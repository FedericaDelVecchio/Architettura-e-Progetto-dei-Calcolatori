
Progetto_APC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c608  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800c798  0800c798  0001c798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cba4  0800cba4  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  0800cba4  0800cba4  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cba4  0800cba4  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cba4  0800cba4  0001cba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cba8  0800cba8  0001cba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800cbac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020344  2**0
                  CONTENTS
 10 .bss          000013e4  20000344  20000344  00020344  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001728  20001728  00020344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015a27  00000000  00000000  000203b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003854  00000000  00000000  00035dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013d8  00000000  00000000  00039638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f2a  00000000  00000000  0003aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000609a  00000000  00000000  0003b93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a64b  00000000  00000000  000419d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba439  00000000  00000000  0005c01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063e0  00000000  00000000  00116458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0011c838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000344 	.word	0x20000344
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c780 	.word	0x0800c780

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000348 	.word	0x20000348
 80001cc:	0800c780 	.word	0x0800c780

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <delay+0x30>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8000bba:	bf00      	nop
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <delay+0x30>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3f9      	bcc.n	8000bbc <delay+0x14>
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200003b4 	.word	0x200003b4

08000bdc <send_data>:

void send_data (float Temp, float Rh)
{
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b096      	sub	sp, #88	; 0x58
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000be6:	edc7 0a00 	vstr	s1, [r7]
	char buffer[64];
	int length = sprintf(buffer, "Temperature: %.2f; Humidity: %.2f\n",Temp,Rh);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fcac 	bl	8000548 <__aeabi_f2d>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	6838      	ldr	r0, [r7, #0]
 8000bf6:	f7ff fca7 	bl	8000548 <__aeabi_f2d>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	f107 000c 	add.w	r0, r7, #12
 8000c02:	e9cd 2300 	strd	r2, r3, [sp]
 8000c06:	4622      	mov	r2, r4
 8000c08:	462b      	mov	r3, r5
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <send_data+0x50>)
 8000c0c:	f009 fc5a 	bl	800a4c4 <siprintf>
 8000c10:	64f8      	str	r0, [r7, #76]	; 0x4c
	CDC_Transmit_FS((uint8_t*)buffer, length);
 8000c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f008 fb1f 	bl	8009260 <CDC_Transmit_FS>
}
 8000c22:	bf00      	nop
 8000c24:	3750      	adds	r7, #80	; 0x50
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800c798 	.word	0x0800c798

08000c30 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c4c:	887b      	ldrh	r3, [r7, #2]
 8000c4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fe14 	bl	800188c <HAL_GPIO_Init>
}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 fdf6 	bl	800188c <HAL_GPIO_Init>
}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000cac:	2102      	movs	r1, #2
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f7ff ffbd 	bl	8000c30 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2102      	movs	r1, #2
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f000 ff77 	bl	8001bb0 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8000cc2:	f244 6050 	movw	r0, #18000	; 0x4650
 8000cc6:	f7ff ff6f 	bl	8000ba8 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2102      	movs	r1, #2
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f000 ff6d 	bl	8001bb0 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f7ff ff66 	bl	8000ba8 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000cdc:	2102      	movs	r1, #2
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f7ff ffc3 	bl	8000c6c <Set_Pin_Input>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000cf4:	2028      	movs	r0, #40	; 0x28
 8000cf6:	f7ff ff57 	bl	8000ba8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 ff3e 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10f      	bne.n	8000d2a <DHT11_Check_Response+0x40>
	{
		delay (80);
 8000d0a:	2050      	movs	r0, #80	; 0x50
 8000d0c:	f7ff ff4c 	bl	8000ba8 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000d10:	2102      	movs	r1, #2
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f000 ff33 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <DHT11_Check_Response+0x3c>
 8000d20:	2301      	movs	r3, #1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	e001      	b.n	8000d2a <DHT11_Check_Response+0x40>
		else Response = -1; // 255
 8000d26:	23ff      	movs	r3, #255	; 0xff
 8000d28:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8000d2a:	bf00      	nop
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f000 ff25 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f7      	bne.n	8000d2c <DHT11_Check_Response+0x42>

	return Response;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	71bb      	strb	r3, [r7, #6]
 8000d50:	e03a      	b.n	8000dc8 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000d52:	bf00      	nop
 8000d54:	2102      	movs	r1, #2
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f000 ff11 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f7      	beq.n	8000d54 <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f7ff ff1f 	bl	8000ba8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f000 ff06 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10e      	bne.n	8000d98 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	f1c3 0307 	rsb	r3, r3, #7
 8000d80:	2201      	movs	r2, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4013      	ands	r3, r2
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	e00b      	b.n	8000db0 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000db0:	bf00      	nop
 8000db2:	2102      	movs	r1, #2
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f000 fee2 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f7      	bne.n	8000db2 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	71bb      	strb	r3, [r7, #6]
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d9c1      	bls.n	8000d52 <DHT11_Read+0xc>
	}
	return i;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 fbba 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f878 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f000 f94e 	bl	8001084 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000de8:	f000 f8d6 	bl	8000f98 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000dec:	f000 f914 	bl	8001018 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000df0:	f008 f978 	bl	80090e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <main+0xd0>)
 8000df6:	f004 f905 	bl	8005004 <HAL_TIM_Base_Start>
  //lcd_send_string("INITIALISING>>>>");
  HAL_Delay(2000);
 8000dfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dfe:	f000 fc0f 	bl	8001620 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5000);
 8000e02:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e06:	f000 fc0b 	bl	8001620 <HAL_Delay>
	  send_data(Temperature,Humidity);
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <main+0xd4>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <main+0xd8>)
 8000e12:	ed93 7a00 	vldr	s14, [r3]
 8000e16:	eef0 0a47 	vmov.f32	s1, s14
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	f7ff fedd 	bl	8000bdc <send_data>

	  DHT11_Start();
 8000e22:	f7ff ff41 	bl	8000ca8 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 8000e26:	f7ff ff60 	bl	8000cea <DHT11_Check_Response>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <main+0xdc>)
 8000e30:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 8000e32:	f7ff ff88 	bl	8000d46 <DHT11_Read>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <main+0xe0>)
 8000e3c:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read ();
 8000e3e:	f7ff ff82 	bl	8000d46 <DHT11_Read>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <main+0xe4>)
 8000e48:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 8000e4a:	f7ff ff7c 	bl	8000d46 <DHT11_Read>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <main+0xe8>)
 8000e54:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 8000e56:	f7ff ff76 	bl	8000d46 <DHT11_Read>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <main+0xec>)
 8000e60:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 8000e62:	f7ff ff70 	bl	8000d46 <DHT11_Read>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <main+0xf0>)
 8000e6c:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <main+0xe8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <main+0xf4>)
 8000e76:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <main+0xe0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <main+0xf8>)
 8000e80:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <main+0xf4>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <main+0xd4>)
 8000e90:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <main+0xf8>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	ee07 3a90 	vmov	s15, r3
 8000e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <main+0xd8>)
 8000ea2:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(5000);
 8000ea6:	e7ac      	b.n	8000e02 <main+0x2a>
 8000ea8:	200003b4 	.word	0x200003b4
 8000eac:	2000040c 	.word	0x2000040c
 8000eb0:	20000410 	.word	0x20000410
 8000eb4:	20000414 	.word	0x20000414
 8000eb8:	20000400 	.word	0x20000400
 8000ebc:	20000401 	.word	0x20000401
 8000ec0:	20000402 	.word	0x20000402
 8000ec4:	20000403 	.word	0x20000403
 8000ec8:	20000404 	.word	0x20000404
 8000ecc:	20000408 	.word	0x20000408
 8000ed0:	20000406 	.word	0x20000406

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b09e      	sub	sp, #120	; 0x78
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ede:	2228      	movs	r2, #40	; 0x28
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f009 fb51 	bl	800a58a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	223c      	movs	r2, #60	; 0x3c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f009 fb43 	bl	800a58a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f04:	2303      	movs	r3, #3
 8000f06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f12:	2301      	movs	r3, #1
 8000f14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f16:	2310      	movs	r3, #16
 8000f18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f22:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f28:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fc52 	bl	80037d8 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f3a:	f000 f947 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fc7a 	bl	8004854 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f66:	f000 f931 	bl	80011cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <SystemClock_Config+0xc0>)
 8000f6c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fe3a 	bl	8004bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f86:	f000 f921 	bl	80011cc <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3778      	adds	r7, #120	; 0x78
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	00020020 	.word	0x00020020

08000f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_I2C1_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_I2C1_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_I2C1_Init+0x74>)
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <MX_I2C1_Init+0x7c>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_I2C1_Init+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_I2C1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_I2C1_Init+0x74>)
 8000fd4:	f000 fe04 	bl	8001be0 <HAL_I2C_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fde:	f000 f8f5 	bl	80011cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_I2C1_Init+0x74>)
 8000fe6:	f000 fe96 	bl	8001d16 <HAL_I2CEx_ConfigAnalogFilter>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff0:	f000 f8ec 	bl	80011cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_I2C1_Init+0x74>)
 8000ff8:	f000 fed8 	bl	8001dac <HAL_I2CEx_ConfigDigitalFilter>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 f8e3 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000360 	.word	0x20000360
 8001010:	40005400 	.word	0x40005400
 8001014:	2000090e 	.word	0x2000090e

08001018 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_TIM6_Init+0x64>)
 800102a:	4a15      	ldr	r2, [pc, #84]	; (8001080 <MX_TIM6_Init+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <MX_TIM6_Init+0x64>)
 8001030:	222f      	movs	r2, #47	; 0x2f
 8001032:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_TIM6_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_TIM6_Init+0x64>)
 800103c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001040:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_TIM6_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <MX_TIM6_Init+0x64>)
 800104a:	f003 ff83 	bl	8004f54 <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001054:	f000 f8ba 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_TIM6_Init+0x64>)
 8001066:	f004 f8cb 	bl	8005200 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001070:	f000 f8ac 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200003b4 	.word	0x200003b4
 8001080:	40001000 	.word	0x40001000

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <MX_GPIO_Init+0x140>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a43      	ldr	r2, [pc, #268]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ca:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a3d      	ldr	r2, [pc, #244]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <MX_GPIO_Init+0x140>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <MX_GPIO_Init+0x140>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6153      	str	r3, [r2, #20]
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MX_GPIO_Init+0x140>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001112:	2200      	movs	r2, #0
 8001114:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001118:	482b      	ldr	r0, [pc, #172]	; (80011c8 <MX_GPIO_Init+0x144>)
 800111a:	f000 fd49 	bl	8001bb0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2102      	movs	r1, #2
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f000 fd43 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800112a:	2337      	movs	r3, #55	; 0x37
 800112c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800112e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4822      	ldr	r0, [pc, #136]	; (80011c8 <MX_GPIO_Init+0x144>)
 8001140:	f000 fba4 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001144:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001148:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	481a      	ldr	r0, [pc, #104]	; (80011c8 <MX_GPIO_Init+0x144>)
 800115e:	f000 fb95 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001162:	2301      	movs	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f000 fb88 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117c:	2302      	movs	r3, #2
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001196:	f000 fb79 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800119a:	23e0      	movs	r3, #224	; 0xe0
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011aa:	2305      	movs	r3, #5
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f000 fb68 	bl	800188c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48001000 	.word	0x48001000

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_MspInit+0x44>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_MspInit+0x44>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_MspInit+0x44>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x44>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_MspInit+0x44>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x44>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120e:	2007      	movs	r0, #7
 8001210:	f000 fafa 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_I2C_MspInit+0x7c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d128      	bne.n	8001294 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124c:	6153      	str	r3, [r2, #20]
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800125a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126c:	2304      	movs	r3, #4
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_I2C_MspInit+0x84>)
 8001278:	f000 fb08 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 8001282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001286:	61d3      	str	r3, [r2, #28]
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_I2C_MspInit+0x80>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40005400 	.word	0x40005400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000400 	.word	0x48000400

080012a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_TIM_Base_MspInit+0x38>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10b      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_TIM_Base_MspInit+0x3c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_TIM_Base_MspInit+0x3c>)
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_TIM_Base_MspInit+0x3c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40001000 	.word	0x40001000
 80012e4:	40021000 	.word	0x40021000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f954 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001342:	f000 fe6c 	bl	800201e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200010e8 	.word	0x200010e8

08001350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return 1;
 8001354:	2301      	movs	r3, #1
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_kill>:

int _kill(int pid, int sig)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800136a:	f009 f961 	bl	800a630 <__errno>
 800136e:	4603      	mov	r3, r0
 8001370:	2216      	movs	r2, #22
 8001372:	601a      	str	r2, [r3, #0]
  return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_exit>:

void _exit (int status)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ffe7 	bl	8001360 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001392:	e7fe      	b.n	8001392 <_exit+0x12>

08001394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
  }

  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e009      	b.n	80013f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf1      	blt.n	80013e0 <_write+0x12>
  }
  return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_close>:

int _close(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	605a      	str	r2, [r3, #4]
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_isatty>:

int _isatty(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f009 f8c6 	bl	800a630 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000a000 	.word	0x2000a000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	20000418 	.word	0x20000418
 80014d8:	20001728 	.word	0x20001728

080014dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <LoopForever+0x6>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <LoopForever+0xe>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <LoopForever+0x16>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f009 f885 	bl	800a63c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001532:	f7ff fc51 	bl	8000dd8 <main>

08001536 <LoopForever>:

LoopForever:
    b LoopForever
 8001536:	e7fe      	b.n	8001536 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001538:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001544:	0800cbac 	.word	0x0800cbac
  ldr r2, =_sbss
 8001548:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 800154c:	20001728 	.word	0x20001728

08001550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>
	...

08001554 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x28>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x28>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f94f 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fe32 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f967 	bl	8001872 <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f92f 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	2000041c 	.word	0x2000041c

08001608 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;  
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000041c 	.word	0x2000041c

08001620 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff3e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff31 	bl	80016cc <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e154      	b.n	8001b46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8146 	beq.w	8001b40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <HAL_GPIO_Init+0x40>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f003 0201 	and.w	r2, r3, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b03      	cmp	r3, #3
 8001938:	d017      	beq.n	800196a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d123      	bne.n	80019be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	6939      	ldr	r1, [r7, #16]
 80019ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0203 	and.w	r2, r3, #3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80a0 	beq.w	8001b40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <HAL_GPIO_Init+0x2d8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a57      	ldr	r2, [pc, #348]	; (8001b64 <HAL_GPIO_Init+0x2d8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b55      	ldr	r3, [pc, #340]	; (8001b64 <HAL_GPIO_Init+0x2d8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a18:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a42:	d019      	beq.n	8001a78 <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a49      	ldr	r2, [pc, #292]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a48      	ldr	r2, [pc, #288]	; (8001b70 <HAL_GPIO_Init+0x2e4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x1e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x1e0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a46      	ldr	r2, [pc, #280]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x1dc>
 8001a64:	2304      	movs	r3, #4
 8001a66:	e008      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a68:	2305      	movs	r3, #5
 8001a6a:	e006      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8a:	4937      	ldr	r1, [pc, #220]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a98:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001abc:	4a2f      	ldr	r2, [pc, #188]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ae6:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b10:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f aea3 	bne.w	800189c <HAL_GPIO_Init+0x10>
  }
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	48000800 	.word	0x48000800
 8001b74:	48000c00 	.word	0x48000c00
 8001b78:	48001000 	.word	0x48001000
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e08d      	b.n	8001d0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fb0a 	bl	8001220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e006      	b.n	8001c68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d108      	bne.n	8001c82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	e007      	b.n	8001c92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69d9      	ldr	r1, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d138      	bne.n	8001d9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e032      	b.n	8001da0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2224      	movs	r2, #36	; 0x24
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d9e:	2302      	movs	r3, #2
  }
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d139      	bne.n	8001e36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e033      	b.n	8001e38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2224      	movs	r2, #36	; 0x24
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
  }
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0b9      	b.n	8001fca <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f007 fb2e 	bl	80094cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2203      	movs	r2, #3
 8001e74:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fa56 	bl	800532e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	e03e      	b.n	8001f06 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3311      	adds	r3, #17
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3310      	adds	r3, #16
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3313      	adds	r3, #19
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3320      	adds	r3, #32
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3324      	adds	r3, #36	; 0x24
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	3301      	adds	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	791b      	ldrb	r3, [r3, #4]
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3bb      	bcc.n	8001e88 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e044      	b.n	8001fa0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	791b      	ldrb	r3, [r3, #4]
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3b5      	bcc.n	8001f16 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fb6:	f003 f9d5 	bl	8005364 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_PCD_Start+0x16>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e016      	b.n	8002016 <HAL_PCD_Start+0x44>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 f983 	bl	8005300 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f007 fd01 	bl	8009a04 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f005 fc40 	bl	800788c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f005 fc39 	bl	80078a2 <USB_ReadInterrupts>
 8002030:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fab1 	bl	80025a4 <PCD_EP_ISR_Handler>

    return;
 8002042:	e0bd      	b.n	80021c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d013      	beq.n	8002076 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002056:	b29a      	uxth	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002060:	b292      	uxth	r2, r2
 8002062:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f007 fad1 	bl	800960e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800206c:	2100      	movs	r1, #0
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8a9 	bl	80021c6 <HAL_PCD_SetAddress>

    return;
 8002074:	e0a4      	b.n	80021c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002092:	b292      	uxth	r2, r2
 8002094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002098:	e092      	b.n	80021c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020b6:	b292      	uxth	r2, r2
 80020b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020bc:	e080      	b.n	80021c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d027      	beq.n	8002118 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0204 	bic.w	r2, r2, #4
 80020da:	b292      	uxth	r2, r2
 80020dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0208 	bic.w	r2, r2, #8
 80020f2:	b292      	uxth	r2, r2
 80020f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f007 fac1 	bl	8009680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002110:	b292      	uxth	r2, r2
 8002112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002116:	e053      	b.n	80021c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211e:	2b00      	cmp	r3, #0
 8002120:	d027      	beq.n	8002172 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800212a:	b29a      	uxth	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0208 	orr.w	r2, r2, #8
 8002134:	b292      	uxth	r2, r2
 8002136:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002142:	b29a      	uxth	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214c:	b292      	uxth	r2, r2
 800214e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0204 	orr.w	r2, r2, #4
 8002164:	b292      	uxth	r2, r2
 8002166:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f007 fa6e 	bl	800964c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002170:	e026      	b.n	80021c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00f      	beq.n	800219c <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800218e:	b292      	uxth	r2, r2
 8002190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f007 fa2c 	bl	80095f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800219a:	e011      	b.n	80021c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b8:	b292      	uxth	r2, r2
 80021ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021be:	bf00      	nop
  }
}
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_PCD_SetAddress+0x1a>
 80021dc:	2302      	movs	r3, #2
 80021de:	e012      	b.n	8002206 <HAL_PCD_SetAddress+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 fb34 	bl	8007864 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	4608      	mov	r0, r1
 8002218:	4611      	mov	r1, r2
 800221a:	461a      	mov	r2, r3
 800221c:	4603      	mov	r3, r0
 800221e:	70fb      	strb	r3, [r7, #3]
 8002220:	460b      	mov	r3, r1
 8002222:	803b      	strh	r3, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800222c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002230:	2b00      	cmp	r3, #0
 8002232:	da0e      	bge.n	8002252 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 0207 	and.w	r2, r3, #7
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	3310      	adds	r3, #16
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	705a      	strb	r2, [r3, #1]
 8002250:	e00e      	b.n	8002270 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 0207 	and.w	r2, r3, #7
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	b2da      	uxtb	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800227c:	883a      	ldrh	r2, [r7, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	78ba      	ldrb	r2, [r7, #2]
 8002286:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002288:	78bb      	ldrb	r3, [r7, #2]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d102      	bne.n	8002294 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_PCD_EP_Open+0x94>
 800229e:	2302      	movs	r3, #2
 80022a0:	e00e      	b.n	80022c0 <HAL_PCD_EP_Open+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 f875 	bl	80053a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80022be:	7afb      	ldrb	r3, [r7, #11]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da0e      	bge.n	80022fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 0207 	and.w	r2, r3, #7
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	3310      	adds	r3, #16
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	705a      	strb	r2, [r3, #1]
 80022f8:	e00e      	b.n	8002318 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 0207 	and.w	r2, r3, #7
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_PCD_EP_Close+0x6a>
 800232e:	2302      	movs	r3, #2
 8002330:	e00e      	b.n	8002350 <HAL_PCD_EP_Close+0x88>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	4618      	mov	r0, r3
 8002342:	f003 fbf1 	bl	8005b28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	460b      	mov	r3, r1
 8002366:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f003 0207 	and.w	r2, r3, #7
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6979      	ldr	r1, [r7, #20]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fda9 	bl	8005f02 <USB_EPStartXfer>

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	f003 0207 	and.w	r2, r3, #7
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80023dc:	681b      	ldr	r3, [r3, #0]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	460b      	mov	r3, r1
 80023f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023fa:	7afb      	ldrb	r3, [r7, #11]
 80023fc:	f003 0207 	and.w	r2, r3, #7
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	3310      	adds	r3, #16
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2201      	movs	r2, #1
 8002434:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	b2da      	uxtb	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6979      	ldr	r1, [r7, #20]
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fd5a 	bl	8005f02 <USB_EPStartXfer>

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	7912      	ldrb	r2, [r2, #4]
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e03e      	b.n	80024f4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800247a:	2b00      	cmp	r3, #0
 800247c:	da0e      	bge.n	800249c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	f003 0207 	and.w	r2, r3, #7
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	3310      	adds	r3, #16
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	705a      	strb	r2, [r3, #1]
 800249a:	e00c      	b.n	80024b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_PCD_EP_SetStall+0x7e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e00e      	b.n	80024f4 <HAL_PCD_EP_SetStall+0x9c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f005 f8be 	bl	8007666 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	7912      	ldrb	r2, [r2, #4]
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e040      	b.n	800259c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800251a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800251e:	2b00      	cmp	r3, #0
 8002520:	da0e      	bge.n	8002540 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 0207 	and.w	r2, r3, #7
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	3310      	adds	r3, #16
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	705a      	strb	r2, [r3, #1]
 800253e:	e00e      	b.n	800255e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	f003 0207 	and.w	r2, r3, #7
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_PCD_EP_ClrStall+0x82>
 800257a:	2302      	movs	r3, #2
 800257c:	e00e      	b.n	800259c <HAL_PCD_EP_ClrStall+0xa0>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	4618      	mov	r0, r3
 800258e:	f005 f8bb 	bl	8007708 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b096      	sub	sp, #88	; 0x58
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025ac:	e3bc      	b.n	8002d28 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 80025c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 8176 	bne.w	80028be <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d14f      	bne.n	800267e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	81fb      	strh	r3, [r7, #14]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fe:	b29b      	uxth	r3, r3
 8002600:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3310      	adds	r3, #16
 8002606:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002610:	b29b      	uxth	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	3302      	adds	r3, #2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002632:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	441a      	add	r2, r3
 800263e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002640:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002642:	2100      	movs	r1, #0
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f006 ffba 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7b1b      	ldrb	r3, [r3, #12]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8369 	beq.w	8002d28 <PCD_EP_ISR_Handler+0x784>
 8002656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 8364 	bne.w	8002d28 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800266a:	b2da      	uxtb	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b292      	uxth	r2, r2
 8002672:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	731a      	strb	r2, [r3, #12]
 800267c:	e354      	b.n	8002d28 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002690:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002698:	2b00      	cmp	r3, #0
 800269a:	d034      	beq.n	8002706 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	3306      	adds	r3, #6
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f005 f937 	bl	800794e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026ec:	4013      	ands	r3, r2
 80026ee:	823b      	strh	r3, [r7, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	8a3a      	ldrh	r2, [r7, #16]
 80026f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026fa:	b292      	uxth	r2, r2
 80026fc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f006 ff30 	bl	8009564 <HAL_PCD_SetupStageCallback>
 8002704:	e310      	b.n	8002d28 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002706:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800270a:	2b00      	cmp	r3, #0
 800270c:	f280 830c 	bge.w	8002d28 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29a      	uxth	r2, r3
 8002718:	f640 738f 	movw	r3, #3983	; 0xf8f
 800271c:	4013      	ands	r3, r2
 800271e:	83fb      	strh	r3, [r7, #30]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	8bfa      	ldrh	r2, [r7, #30]
 8002726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800272a:	b292      	uxth	r2, r2
 800272c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	3306      	adds	r3, #6
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002758:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800275a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d019      	beq.n	8002796 <PCD_EP_ISR_Handler+0x1f2>
 8002762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	6959      	ldr	r1, [r3, #20]
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002778:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800277a:	b29b      	uxth	r3, r3
 800277c:	f005 f8e7 	bl	800794e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	441a      	add	r2, r3
 800278a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800278e:	2100      	movs	r1, #0
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f006 fef9 	bl	8009588 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80027a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 82bd 	bne.w	8002d28 <PCD_EP_ISR_Handler+0x784>
 80027ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80027b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027ba:	f000 82b5 	beq.w	8002d28 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <PCD_EP_ISR_Handler+0x268>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002804:	b29a      	uxth	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e039      	b.n	8002880 <PCD_EP_ISR_Handler+0x2dc>
 800280c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b3e      	cmp	r3, #62	; 0x3e
 8002812:	d818      	bhi.n	8002846 <PCD_EP_ISR_Handler+0x2a2>
 8002814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	647b      	str	r3, [r7, #68]	; 0x44
 800281c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <PCD_EP_ISR_Handler+0x28a>
 8002828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282a:	3301      	adds	r3, #1
 800282c:	647b      	str	r3, [r7, #68]	; 0x44
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	b29a      	uxth	r2, r3
 8002834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002836:	b29b      	uxth	r3, r3
 8002838:	029b      	lsls	r3, r3, #10
 800283a:	b29b      	uxth	r3, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	b29a      	uxth	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	801a      	strh	r2, [r3, #0]
 8002844:	e01c      	b.n	8002880 <PCD_EP_ISR_Handler+0x2dc>
 8002846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <PCD_EP_ISR_Handler+0x2bc>
 800285a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285c:	3b01      	subs	r3, #1
 800285e:	647b      	str	r3, [r7, #68]	; 0x44
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29a      	uxth	r2, r3
 8002866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002868:	b29b      	uxth	r3, r3
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	b29b      	uxth	r3, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287a:	b29a      	uxth	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002890:	827b      	strh	r3, [r7, #18]
 8002892:	8a7b      	ldrh	r3, [r7, #18]
 8002894:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002898:	827b      	strh	r3, [r7, #18]
 800289a:	8a7b      	ldrh	r3, [r7, #18]
 800289c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028a0:	827b      	strh	r3, [r7, #18]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	8a7b      	ldrh	r3, [r7, #18]
 80028a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	8013      	strh	r3, [r2, #0]
 80028bc:	e234      	b.n	8002d28 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028d2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f280 80fc 	bge.w	8002ad4 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028f2:	4013      	ands	r3, r2
 80028f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800290a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800290e:	b292      	uxth	r2, r2
 8002910:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002912:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292a:	7b1b      	ldrb	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d125      	bne.n	800297c <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	3306      	adds	r3, #6
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002958:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800295c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8092 	beq.w	8002a8a <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296c:	6959      	ldr	r1, [r3, #20]
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	88da      	ldrh	r2, [r3, #6]
 8002972:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002976:	f004 ffea 	bl	800794e <USB_ReadPMA>
 800297a:	e086      	b.n	8002a8a <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800297c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297e:	78db      	ldrb	r3, [r3, #3]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d10a      	bne.n	800299a <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002984:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002988:	461a      	mov	r2, r3
 800298a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f9d9 	bl	8002d44 <HAL_PCD_EP_DB_Receive>
 8002992:	4603      	mov	r3, r0
 8002994:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002998:	e077      	b.n	8002a8a <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	441a      	add	r2, r3
 80029c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029da:	b29b      	uxth	r3, r3
 80029dc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d024      	beq.n	8002a42 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d02e      	beq.n	8002a8a <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a32:	6959      	ldr	r1, [r3, #20]
 8002a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a36:	891a      	ldrh	r2, [r3, #8]
 8002a38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a3c:	f004 ff87 	bl	800794e <USB_ReadPMA>
 8002a40:	e023      	b.n	8002a8a <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	3306      	adds	r3, #6
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	6959      	ldr	r1, [r3, #20]
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a80:	895a      	ldrh	r2, [r3, #10]
 8002a82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a86:	f004 ff62 	bl	800794e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a92:	441a      	add	r2, r3
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002aa0:	441a      	add	r2, r3
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <PCD_EP_ISR_Handler+0x516>
 8002aae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d206      	bcs.n	8002ac8 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f006 fd61 	bl	8009588 <HAL_PCD_DataOutStageCallback>
 8002ac6:	e005      	b.n	8002ad4 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fa17 	bl	8005f02 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ad4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8123 	beq.w	8002d28 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ae2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	3310      	adds	r3, #16
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	441a      	add	r2, r3
 8002b22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	78db      	ldrb	r3, [r3, #3]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	f040 80a2 	bne.w	8002c80 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b44:	7b1b      	ldrb	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8093 	beq.w	8002c72 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d046      	beq.n	8002be6 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d126      	bne.n	8002bae <PCD_EP_ISR_Handler+0x60a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	4413      	add	r3, r2
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	011a      	lsls	r2, r3, #4
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	4413      	add	r3, r2
 8002b82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	e061      	b.n	8002c72 <PCD_EP_ISR_Handler+0x6ce>
 8002bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d15d      	bne.n	8002c72 <PCD_EP_ISR_Handler+0x6ce>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bca:	4413      	add	r3, r2
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	011a      	lsls	r2, r3, #4
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	2200      	movs	r2, #0
 8002be2:	801a      	strh	r2, [r3, #0]
 8002be4:	e045      	b.n	8002c72 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d126      	bne.n	8002c42 <PCD_EP_ISR_Handler+0x69e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c08:	4413      	add	r3, r2
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	011a      	lsls	r2, r3, #4
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	4413      	add	r3, r2
 8002c16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	801a      	strh	r2, [r3, #0]
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	e017      	b.n	8002c72 <PCD_EP_ISR_Handler+0x6ce>
 8002c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c44:	785b      	ldrb	r3, [r3, #1]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d113      	bne.n	8002c72 <PCD_EP_ISR_Handler+0x6ce>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	4413      	add	r3, r2
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	011a      	lsls	r2, r3, #4
 8002c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c64:	4413      	add	r3, r2
 8002c66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6e:	2200      	movs	r2, #0
 8002c70:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f006 fca0 	bl	80095be <HAL_PCD_DataInStageCallback>
 8002c7e:	e053      	b.n	8002d28 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d146      	bne.n	8002d1a <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d907      	bls.n	8002cd4 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ccc:	1ad2      	subs	r2, r2, r3
 8002cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd0:	619a      	str	r2, [r3, #24]
 8002cd2:	e002      	b.n	8002cda <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f006 fc68 	bl	80095be <HAL_PCD_DataInStageCallback>
 8002cee:	e01b      	b.n	8002d28 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cf8:	441a      	add	r2, r3
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d06:	441a      	add	r2, r3
 8002d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 f8f5 	bl	8005f02 <USB_EPStartXfer>
 8002d18:	e006      	b.n	8002d28 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f91b 	bl	8002f5e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b21b      	sxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f6ff ac3a 	blt.w	80025ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3758      	adds	r7, #88	; 0x58
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d07e      	beq.n	8002e5a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3302      	adds	r3, #2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d84:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	8b7b      	ldrh	r3, [r7, #26]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d306      	bcc.n	8002d9e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	8b7b      	ldrh	r3, [r7, #26]
 8002d96:	1ad2      	subs	r2, r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	619a      	str	r2, [r3, #24]
 8002d9c:	e002      	b.n	8002da4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d123      	bne.n	8002df4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	833b      	strh	r3, [r7, #24]
 8002dc8:	8b3b      	ldrh	r3, [r7, #24]
 8002dca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dce:	833b      	strh	r3, [r7, #24]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	441a      	add	r2, r3
 8002dde:	8b3b      	ldrh	r3, [r7, #24]
 8002de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d01f      	beq.n	8002e3e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e18:	82fb      	strh	r3, [r7, #22]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	441a      	add	r2, r3
 8002e28:	8afb      	ldrh	r3, [r7, #22]
 8002e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e3e:	8b7b      	ldrh	r3, [r7, #26]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8087 	beq.w	8002f54 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	6959      	ldr	r1, [r3, #20]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	891a      	ldrh	r2, [r3, #8]
 8002e52:	8b7b      	ldrh	r3, [r7, #26]
 8002e54:	f004 fd7b 	bl	800794e <USB_ReadPMA>
 8002e58:	e07c      	b.n	8002f54 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3306      	adds	r3, #6
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e82:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	8b7b      	ldrh	r3, [r7, #26]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d306      	bcc.n	8002e9c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	8b7b      	ldrh	r3, [r7, #26]
 8002e94:	1ad2      	subs	r2, r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	619a      	str	r2, [r3, #24]
 8002e9a:	e002      	b.n	8002ea2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d123      	bne.n	8002ef2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	83fb      	strh	r3, [r7, #30]
 8002ec6:	8bfb      	ldrh	r3, [r7, #30]
 8002ec8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ecc:	83fb      	strh	r3, [r7, #30]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	441a      	add	r2, r3
 8002edc:	8bfb      	ldrh	r3, [r7, #30]
 8002ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11f      	bne.n	8002f3c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	83bb      	strh	r3, [r7, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	8bbb      	ldrh	r3, [r7, #28]
 8002f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f3c:	8b7b      	ldrh	r3, [r7, #26]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6959      	ldr	r1, [r3, #20]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	895a      	ldrh	r2, [r3, #10]
 8002f4e:	8b7b      	ldrh	r3, [r7, #26]
 8002f50:	f004 fcfd 	bl	800794e <USB_ReadPMA>
    }
  }

  return count;
 8002f54:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b0a4      	sub	sp, #144	; 0x90
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 81dd 	beq.w	8003332 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d907      	bls.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002fb8:	1ad2      	subs	r2, r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	619a      	str	r2, [r3, #24]
 8002fbe:	e002      	b.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 80b9 	bne.w	8003142 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d126      	bne.n	8003026 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	4413      	add	r3, r2
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	011a      	lsls	r2, r3, #4
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800300a:	b29a      	uxth	r2, r3
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	801a      	strh	r2, [r3, #0]
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800301a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301e:	b29a      	uxth	r2, r3
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	e01a      	b.n	800305c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d116      	bne.n	800305c <HAL_PCD_EP_DB_Transmit+0xfe>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	4413      	add	r3, r2
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	011a      	lsls	r2, r3, #4
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	4413      	add	r3, r2
 8003050:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003054:	633b      	str	r3, [r7, #48]	; 0x30
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	2200      	movs	r2, #0
 800305a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d126      	bne.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4413      	add	r3, r2
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	011a      	lsls	r2, r3, #4
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	4413      	add	r3, r2
 800308c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309c:	b29a      	uxth	r2, r3
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	801a      	strh	r2, [r3, #0]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	e017      	b.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d113      	bne.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	4413      	add	r3, r2
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	011a      	lsls	r2, r3, #4
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	4413      	add	r3, r2
 80030dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030e0:	623b      	str	r3, [r7, #32]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2200      	movs	r2, #0
 80030e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f006 fa65 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 82fc 	beq.w	80036f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	82fb      	strh	r3, [r7, #22]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	441a      	add	r2, r3
 800312a:	8afb      	ldrh	r3, [r7, #22]
 800312c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313c:	b29b      	uxth	r3, r3
 800313e:	8013      	strh	r3, [r2, #0]
 8003140:	e2da      	b.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d021      	beq.n	8003190 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003166:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800317c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318c:	b29b      	uxth	r3, r3
 800318e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003196:	2b01      	cmp	r3, #1
 8003198:	f040 82ae 	bne.w	80036f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031a4:	441a      	add	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031b2:	441a      	add	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6a1a      	ldr	r2, [r3, #32]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d30b      	bcc.n	80031dc <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6a1a      	ldr	r2, [r3, #32]
 80031d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	621a      	str	r2, [r3, #32]
 80031da:	e017      	b.n	800320c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d108      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80031e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031f4:	e00a      	b.n	800320c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	785b      	ldrb	r3, [r3, #1]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d165      	bne.n	80032e0 <HAL_PCD_EP_DB_Transmit+0x382>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003222:	b29b      	uxth	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003228:	4413      	add	r3, r2
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	011a      	lsls	r2, r3, #4
 8003232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003234:	4413      	add	r3, r2
 8003236:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003246:	b29a      	uxth	r2, r3
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	801a      	strh	r2, [r3, #0]
 800324c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <HAL_PCD_EP_DB_Transmit+0x30c>
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800325e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003262:	b29a      	uxth	r2, r3
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	801a      	strh	r2, [r3, #0]
 8003268:	e057      	b.n	800331a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800326a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326e:	2b3e      	cmp	r3, #62	; 0x3e
 8003270:	d818      	bhi.n	80032a4 <HAL_PCD_EP_DB_Transmit+0x346>
 8003272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	64bb      	str	r3, [r7, #72]	; 0x48
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_PCD_EP_DB_Transmit+0x32e>
 8003286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003288:	3301      	adds	r3, #1
 800328a:	64bb      	str	r3, [r7, #72]	; 0x48
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29a      	uxth	r2, r3
 8003292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003294:	b29b      	uxth	r3, r3
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	b29b      	uxth	r3, r3
 800329a:	4313      	orrs	r3, r2
 800329c:	b29a      	uxth	r2, r3
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	801a      	strh	r2, [r3, #0]
 80032a2:	e03a      	b.n	800331a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_PCD_EP_DB_Transmit+0x360>
 80032b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ba:	3b01      	subs	r3, #1
 80032bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	029b      	lsls	r3, r3, #10
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d8:	b29a      	uxth	r2, r3
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	801a      	strh	r2, [r3, #0]
 80032de:	e01c      	b.n	800331a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d118      	bne.n	800331a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	647b      	str	r3, [r7, #68]	; 0x44
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fc:	4413      	add	r3, r2
 80032fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	011a      	lsls	r2, r3, #4
 8003306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003308:	4413      	add	r3, r2
 800330a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800330e:	643b      	str	r3, [r7, #64]	; 0x40
 8003310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003314:	b29a      	uxth	r2, r3
 8003316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003318:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6959      	ldr	r1, [r3, #20]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	891a      	ldrh	r2, [r3, #8]
 8003326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332a:	b29b      	uxth	r3, r3
 800332c:	f004 fac9 	bl	80078c2 <USB_WritePMA>
 8003330:	e1e2      	b.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800333a:	b29b      	uxth	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	3306      	adds	r3, #6
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800335a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003366:	429a      	cmp	r2, r3
 8003368:	d307      	bcc.n	800337a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	619a      	str	r2, [r3, #24]
 8003378:	e002      	b.n	8003380 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f040 80c0 	bne.w	800350a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d126      	bne.n	80033e0 <HAL_PCD_EP_DB_Transmit+0x482>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033a6:	4413      	add	r3, r2
 80033a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	011a      	lsls	r2, r3, #4
 80033b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033b2:	4413      	add	r3, r2
 80033b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c8:	801a      	strh	r2, [r3, #0]
 80033ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	e01a      	b.n	8003416 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d116      	bne.n	8003416 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	667b      	str	r3, [r7, #100]	; 0x64
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033fc:	4413      	add	r3, r2
 80033fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	011a      	lsls	r2, r3, #4
 8003406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003408:	4413      	add	r3, r2
 800340a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800340e:	663b      	str	r3, [r7, #96]	; 0x60
 8003410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003412:	2200      	movs	r2, #0
 8003414:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	677b      	str	r3, [r7, #116]	; 0x74
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d12b      	bne.n	800347c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	66fb      	str	r3, [r7, #108]	; 0x6c
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	4413      	add	r3, r2
 800343a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	011a      	lsls	r2, r3, #4
 8003442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003444:	4413      	add	r3, r2
 8003446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800344a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800344e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345a:	b29a      	uxth	r2, r3
 800345c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800346e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003472:	b29a      	uxth	r2, r3
 8003474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003478:	801a      	strh	r2, [r3, #0]
 800347a:	e017      	b.n	80034ac <HAL_PCD_EP_DB_Transmit+0x54e>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d113      	bne.n	80034ac <HAL_PCD_EP_DB_Transmit+0x54e>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800348c:	b29b      	uxth	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003492:	4413      	add	r3, r2
 8003494:	677b      	str	r3, [r7, #116]	; 0x74
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	011a      	lsls	r2, r3, #4
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	4413      	add	r3, r2
 80034a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034a4:	673b      	str	r3, [r7, #112]	; 0x70
 80034a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a8:	2200      	movs	r2, #0
 80034aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	4619      	mov	r1, r3
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f006 f883 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 811a 	bne.w	80036f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	441a      	add	r2, r3
 80034f0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80034f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003504:	b29b      	uxth	r3, r3
 8003506:	8013      	strh	r3, [r2, #0]
 8003508:	e0f6      	b.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d121      	bne.n	8003558 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	441a      	add	r2, r3
 8003540:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800354c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003554:	b29b      	uxth	r3, r3
 8003556:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800355e:	2b01      	cmp	r3, #1
 8003560:	f040 80ca 	bne.w	80036f8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800356c:	441a      	add	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800357a:	441a      	add	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	429a      	cmp	r2, r3
 800358a:	d30b      	bcc.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359c:	1ad2      	subs	r2, r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	621a      	str	r2, [r3, #32]
 80035a2:	e017      	b.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80035ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80035b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035bc:	e00a      	b.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	657b      	str	r3, [r7, #84]	; 0x54
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d165      	bne.n	80036ae <HAL_PCD_EP_DB_Transmit+0x750>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f6:	4413      	add	r3, r2
 80035f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	011a      	lsls	r2, r3, #4
 8003600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003602:	4413      	add	r3, r2
 8003604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003608:	65bb      	str	r3, [r7, #88]	; 0x58
 800360a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003614:	b29a      	uxth	r2, r3
 8003616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003618:	801a      	strh	r2, [r3, #0]
 800361a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <HAL_PCD_EP_DB_Transmit+0x6da>
 8003622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003630:	b29a      	uxth	r2, r3
 8003632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003634:	801a      	strh	r2, [r3, #0]
 8003636:	e054      	b.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800363c:	2b3e      	cmp	r3, #62	; 0x3e
 800363e:	d818      	bhi.n	8003672 <HAL_PCD_EP_DB_Transmit+0x714>
 8003640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	66bb      	str	r3, [r7, #104]	; 0x68
 8003648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003656:	3301      	adds	r3, #1
 8003658:	66bb      	str	r3, [r7, #104]	; 0x68
 800365a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	b29a      	uxth	r2, r3
 8003660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003662:	b29b      	uxth	r3, r3
 8003664:	029b      	lsls	r3, r3, #10
 8003666:	b29b      	uxth	r3, r3
 8003668:	4313      	orrs	r3, r2
 800366a:	b29a      	uxth	r2, r3
 800366c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e037      	b.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	66bb      	str	r3, [r7, #104]	; 0x68
 800367a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <HAL_PCD_EP_DB_Transmit+0x72e>
 8003686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003688:	3b01      	subs	r3, #1
 800368a:	66bb      	str	r3, [r7, #104]	; 0x68
 800368c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29a      	uxth	r2, r3
 8003692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003694:	b29b      	uxth	r3, r3
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	b29b      	uxth	r3, r3
 800369a:	4313      	orrs	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036aa:	801a      	strh	r2, [r3, #0]
 80036ac:	e019      	b.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x784>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d115      	bne.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x784>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036be:	b29b      	uxth	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c4:	4413      	add	r3, r2
 80036c6:	657b      	str	r3, [r7, #84]	; 0x54
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	011a      	lsls	r2, r3, #4
 80036ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d0:	4413      	add	r3, r2
 80036d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036d6:	653b      	str	r3, [r7, #80]	; 0x50
 80036d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6959      	ldr	r1, [r3, #20]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	895a      	ldrh	r2, [r3, #10]
 80036ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f004 f8e5 	bl	80078c2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003712:	82bb      	strh	r3, [r7, #20]
 8003714:	8abb      	ldrh	r3, [r7, #20]
 8003716:	f083 0310 	eor.w	r3, r3, #16
 800371a:	82bb      	strh	r3, [r7, #20]
 800371c:	8abb      	ldrh	r3, [r7, #20]
 800371e:	f083 0320 	eor.w	r3, r3, #32
 8003722:	82bb      	strh	r3, [r7, #20]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	8abb      	ldrh	r3, [r7, #20]
 8003734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	b29b      	uxth	r3, r3
 8003746:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3790      	adds	r7, #144	; 0x90
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	817b      	strh	r3, [r7, #10]
 8003760:	4613      	mov	r3, r2
 8003762:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003764:	897b      	ldrh	r3, [r7, #10]
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003770:	897b      	ldrh	r3, [r7, #10]
 8003772:	f003 0207 	and.w	r2, r3, #7
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	3310      	adds	r3, #16
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e009      	b.n	800379c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003788:	897a      	ldrh	r2, [r7, #10]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800379c:	893b      	ldrh	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d107      	bne.n	80037b2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	80da      	strh	r2, [r3, #6]
 80037b0:	e00b      	b.n	80037ca <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2201      	movs	r2, #1
 80037b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	0c1b      	lsrs	r3, r3, #16
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80037de:	af00      	add	r7, sp, #0
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f001 b823 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 817d 	beq.w	8003b0e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003814:	4bbc      	ldr	r3, [pc, #752]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b04      	cmp	r3, #4
 800381e:	d00c      	beq.n	800383a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003820:	4bb9      	ldr	r3, [pc, #740]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d15c      	bne.n	80038e6 <HAL_RCC_OscConfig+0x10e>
 800382c:	4bb6      	ldr	r3, [pc, #728]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d155      	bne.n	80038e6 <HAL_RCC_OscConfig+0x10e>
 800383a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800383e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800384e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <HAL_RCC_OscConfig+0x94>
 8003866:	4ba8      	ldr	r3, [pc, #672]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	e015      	b.n	8003898 <HAL_RCC_OscConfig+0xc0>
 800386c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003870:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003884:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003888:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003894:	4b9c      	ldr	r3, [pc, #624]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800389c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80038a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80038a4:	fa92 f2a2 	rbit	r2, r2
 80038a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80038ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80038b0:	fab2 f282 	clz	r2, r2
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	f042 0220 	orr.w	r2, r2, #32
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	f002 021f 	and.w	r2, r2, #31
 80038c0:	2101      	movs	r1, #1
 80038c2:	fa01 f202 	lsl.w	r2, r1, r2
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 811f 	beq.w	8003b0c <HAL_RCC_OscConfig+0x334>
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 8116 	bne.w	8003b0c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f000 bfaf 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x12e>
 80038f8:	4b83      	ldr	r3, [pc, #524]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a82      	ldr	r2, [pc, #520]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e036      	b.n	8003974 <HAL_RCC_OscConfig+0x19c>
 8003906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x158>
 8003916:	4b7c      	ldr	r3, [pc, #496]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7b      	ldr	r2, [pc, #492]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 800391c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a78      	ldr	r2, [pc, #480]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e021      	b.n	8003974 <HAL_RCC_OscConfig+0x19c>
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x184>
 8003942:	4b71      	ldr	r3, [pc, #452]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a70      	ldr	r2, [pc, #448]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b6e      	ldr	r3, [pc, #440]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6d      	ldr	r2, [pc, #436]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0x19c>
 800395c:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a69      	ldr	r2, [pc, #420]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b67      	ldr	r3, [pc, #412]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a66      	ldr	r2, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003974:	4b64      	ldr	r3, [pc, #400]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f023 020f 	bic.w	r2, r3, #15
 800397c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	495f      	ldr	r1, [pc, #380]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 800398a:	4313      	orrs	r3, r2
 800398c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d059      	beq.n	8003a52 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fd fe33 	bl	8001608 <HAL_GetTick>
 80039a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd fe2e 	bl	8001608 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	; 0x64
 80039b6:	d902      	bls.n	80039be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	f000 bf43 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>
 80039be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80039d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HAL_RCC_OscConfig+0x218>
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e015      	b.n	8003a1c <HAL_RCC_OscConfig+0x244>
 80039f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a08:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003a0c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a18:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a20:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003a24:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003a28:	fa92 f2a2 	rbit	r2, r2
 8003a2c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003a30:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a34:	fab2 f282 	clz	r2, r2
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	f042 0220 	orr.w	r2, r2, #32
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f002 021f 	and.w	r2, r2, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ab      	beq.n	80039a8 <HAL_RCC_OscConfig+0x1d0>
 8003a50:	e05d      	b.n	8003b0e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fd fdd9 	bl	8001608 <HAL_GetTick>
 8003a56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fdd4 	bl	8001608 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b64      	cmp	r3, #100	; 0x64
 8003a6a:	d902      	bls.n	8003a72 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	f000 bee9 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>
 8003a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a76:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003a86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2cc>
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	e015      	b.n	8003ad0 <HAL_RCC_OscConfig+0x2f8>
 8003aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003abc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ac0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003acc:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ad4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ad8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003adc:	fa92 f2a2 	rbit	r2, r2
 8003ae0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ae4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ae8:	fab2 f282 	clz	r2, r2
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	f042 0220 	orr.w	r2, r2, #32
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f002 021f 	and.w	r2, r2, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f202 	lsl.w	r2, r1, r2
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1ab      	bne.n	8003a5c <HAL_RCC_OscConfig+0x284>
 8003b04:	e003      	b.n	8003b0e <HAL_RCC_OscConfig+0x336>
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 817d 	beq.w	8003e1e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b24:	4ba6      	ldr	r3, [pc, #664]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00b      	beq.n	8003b48 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b30:	4ba3      	ldr	r3, [pc, #652]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d172      	bne.n	8003c22 <HAL_RCC_OscConfig+0x44a>
 8003b3c:	4ba0      	ldr	r3, [pc, #640]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d16c      	bne.n	8003c22 <HAL_RCC_OscConfig+0x44a>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003b5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_RCC_OscConfig+0x3a0>
 8003b72:	4b93      	ldr	r3, [pc, #588]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	e013      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3c8>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003b9c:	4b88      	ldr	r3, [pc, #544]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003ba6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003baa:	fa92 f2a2 	rbit	r2, r2
 8003bae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003bb2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003bb6:	fab2 f282 	clz	r2, r2
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	f042 0220 	orr.w	r2, r2, #32
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f002 021f 	and.w	r2, r2, #31
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x410>
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d002      	beq.n	8003be8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f000 be2e 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b75      	ldr	r3, [pc, #468]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	21f8      	movs	r1, #248	; 0xf8
 8003bfe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003c06:	fa91 f1a1 	rbit	r1, r1
 8003c0a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003c0e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003c12:	fab1 f181 	clz	r1, r1
 8003c16:	b2c9      	uxtb	r1, r1
 8003c18:	408b      	lsls	r3, r1
 8003c1a:	4969      	ldr	r1, [pc, #420]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c20:	e0fd      	b.n	8003e1e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8088 	beq.w	8003d44 <HAL_RCC_OscConfig+0x56c>
 8003c34:	2301      	movs	r3, #1
 8003c36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003c46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fd fcd2 	bl	8001608 <HAL_GetTick>
 8003c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6a:	f7fd fccd 	bl	8001608 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d902      	bls.n	8003c80 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	f000 bde2 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003c92:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d102      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4d8>
 8003caa:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	e013      	b.n	8003cd8 <HAL_RCC_OscConfig+0x500>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003cc8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003cd4:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003cde:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003ce2:	fa92 f2a2 	rbit	r2, r2
 8003ce6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003cea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003cee:	fab2 f282 	clz	r2, r2
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f042 0220 	orr.w	r2, r2, #32
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f002 021f 	and.w	r2, r2, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0af      	beq.n	8003c6a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0a:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	21f8      	movs	r1, #248	; 0xf8
 8003d20:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003d28:	fa91 f1a1 	rbit	r1, r1
 8003d2c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003d30:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003d34:	fab1 f181 	clz	r1, r1
 8003d38:	b2c9      	uxtb	r1, r1
 8003d3a:	408b      	lsls	r3, r1
 8003d3c:	4920      	ldr	r1, [pc, #128]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
 8003d42:	e06c      	b.n	8003e1e <HAL_RCC_OscConfig+0x646>
 8003d44:	2301      	movs	r3, #1
 8003d46:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003d56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd fc4a 	bl	8001608 <HAL_GetTick>
 8003d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7a:	f7fd fc45 	bl	8001608 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d902      	bls.n	8003d90 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	f000 bd5a 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d104      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x5ec>
 8003dba:	4b01      	ldr	r3, [pc, #4]	; (8003dc0 <HAL_RCC_OscConfig+0x5e8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	e015      	b.n	8003dec <HAL_RCC_OscConfig+0x614>
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ddc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003de8:	4bc8      	ldr	r3, [pc, #800]	; (800410c <HAL_RCC_OscConfig+0x934>)
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2202      	movs	r2, #2
 8003dee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003df2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003df6:	fa92 f2a2 	rbit	r2, r2
 8003dfa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003dfe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003e02:	fab2 f282 	clz	r2, r2
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f042 0220 	orr.w	r2, r2, #32
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	f002 021f 	and.w	r2, r2, #31
 8003e12:	2101      	movs	r1, #1
 8003e14:	fa01 f202 	lsl.w	r2, r1, r2
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ad      	bne.n	8003d7a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8110 	beq.w	8004054 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d079      	beq.n	8003f38 <HAL_RCC_OscConfig+0x760>
 8003e44:	2301      	movs	r3, #1
 8003e46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	4bab      	ldr	r3, [pc, #684]	; (8004110 <HAL_RCC_OscConfig+0x938>)
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fbcb 	bl	8001608 <HAL_GetTick>
 8003e72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fd fbc6 	bl	8001608 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d902      	bls.n	8003e8e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	f000 bcdb 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	fa93 f2a3 	rbit	r2, r3
 8003eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ecc:	2202      	movs	r2, #2
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	fa93 f2a3 	rbit	r2, r3
 8003ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ee6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee8:	4b88      	ldr	r3, [pc, #544]	; (800410c <HAL_RCC_OscConfig+0x934>)
 8003eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	6019      	str	r1, [r3, #0]
 8003ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	fa93 f1a3 	rbit	r1, r3
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f0e:	6019      	str	r1, [r3, #0]
  return result;
 8003f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0a0      	beq.n	8003e78 <HAL_RCC_OscConfig+0x6a0>
 8003f36:	e08d      	b.n	8004054 <HAL_RCC_OscConfig+0x87c>
 8003f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	fa93 f2a3 	rbit	r2, r3
 8003f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f5a:	601a      	str	r2, [r3, #0]
  return result;
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_RCC_OscConfig+0x938>)
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	461a      	mov	r2, r3
 8003f76:	2300      	movs	r3, #0
 8003f78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fd fb45 	bl	8001608 <HAL_GetTick>
 8003f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fd fb40 	bl	8001608 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d902      	bls.n	8003f9a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	f000 bc55 	b.w	8004844 <HAL_RCC_OscConfig+0x106c>
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	fa93 f2a3 	rbit	r2, r3
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	fa93 f2a3 	rbit	r2, r3
 8003fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fea:	2202      	movs	r2, #2
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	fa93 f2a3 	rbit	r2, r3
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004004:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_OscConfig+0x934>)
 8004008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004012:	2102      	movs	r1, #2
 8004014:	6019      	str	r1, [r3, #0]
 8004016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	fa93 f1a3 	rbit	r1, r3
 8004024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004028:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800402c:	6019      	str	r1, [r3, #0]
  return result;
 800402e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004032:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d197      	bne.n	8003f84 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 81a1 	beq.w	80043ac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004070:	4b26      	ldr	r3, [pc, #152]	; (800410c <HAL_RCC_OscConfig+0x934>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d116      	bne.n	80040aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407c:	4b23      	ldr	r3, [pc, #140]	; (800410c <HAL_RCC_OscConfig+0x934>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_RCC_OscConfig+0x934>)
 8004082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004086:	61d3      	str	r3, [r2, #28]
 8004088:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_RCC_OscConfig+0x934>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004094:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80040a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_OscConfig+0x93c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11a      	bne.n	80040ec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_RCC_OscConfig+0x93c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a16      	ldr	r2, [pc, #88]	; (8004114 <HAL_RCC_OscConfig+0x93c>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c2:	f7fd faa1 	bl	8001608 <HAL_GetTick>
 80040c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ca:	e009      	b.n	80040e0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040cc:	f7fd fa9c 	bl	8001608 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b64      	cmp	r3, #100	; 0x64
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e3b1      	b.n	8004844 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <HAL_RCC_OscConfig+0x93c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ef      	beq.n	80040cc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10d      	bne.n	8004118 <HAL_RCC_OscConfig+0x940>
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_OscConfig+0x934>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	4a02      	ldr	r2, [pc, #8]	; (800410c <HAL_RCC_OscConfig+0x934>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6213      	str	r3, [r2, #32]
 8004108:	e03c      	b.n	8004184 <HAL_RCC_OscConfig+0x9ac>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	10908120 	.word	0x10908120
 8004114:	40007000 	.word	0x40007000
 8004118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10c      	bne.n	8004142 <HAL_RCC_OscConfig+0x96a>
 8004128:	4bc1      	ldr	r3, [pc, #772]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4ac0      	ldr	r2, [pc, #768]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	6213      	str	r3, [r2, #32]
 8004134:	4bbe      	ldr	r3, [pc, #760]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	4abd      	ldr	r2, [pc, #756]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 800413a:	f023 0304 	bic.w	r3, r3, #4
 800413e:	6213      	str	r3, [r2, #32]
 8004140:	e020      	b.n	8004184 <HAL_RCC_OscConfig+0x9ac>
 8004142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b05      	cmp	r3, #5
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x994>
 8004152:	4bb7      	ldr	r3, [pc, #732]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4ab6      	ldr	r2, [pc, #728]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	6213      	str	r3, [r2, #32]
 800415e:	4bb4      	ldr	r3, [pc, #720]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4ab3      	ldr	r2, [pc, #716]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6213      	str	r3, [r2, #32]
 800416a:	e00b      	b.n	8004184 <HAL_RCC_OscConfig+0x9ac>
 800416c:	4bb0      	ldr	r3, [pc, #704]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	4aaf      	ldr	r2, [pc, #700]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	6213      	str	r3, [r2, #32]
 8004178:	4bad      	ldr	r3, [pc, #692]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4aac      	ldr	r2, [pc, #688]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 800417e:	f023 0304 	bic.w	r3, r3, #4
 8004182:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8081 	beq.w	8004298 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004196:	f7fd fa37 	bl	8001608 <HAL_GetTick>
 800419a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fd fa32 	bl	8001608 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e345      	b.n	8004844 <HAL_RCC_OscConfig+0x106c>
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80041c0:	2202      	movs	r2, #2
 80041c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	fa93 f2a3 	rbit	r2, r3
 80041d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80041e4:	2202      	movs	r2, #2
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	fa93 f2a3 	rbit	r2, r3
 80041f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041fe:	601a      	str	r2, [r3, #0]
  return result;
 8004200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004204:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004208:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d102      	bne.n	8004224 <HAL_RCC_OscConfig+0xa4c>
 800421e:	4b84      	ldr	r3, [pc, #528]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	e013      	b.n	800424c <HAL_RCC_OscConfig+0xa74>
 8004224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004228:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800422c:	2202      	movs	r2, #2
 800422e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004234:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	fa93 f2a3 	rbit	r2, r3
 800423e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004242:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	4b79      	ldr	r3, [pc, #484]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004250:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004254:	2102      	movs	r1, #2
 8004256:	6011      	str	r1, [r2, #0]
 8004258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800425c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	fa92 f1a2 	rbit	r1, r2
 8004266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800426a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800426e:	6011      	str	r1, [r2, #0]
  return result;
 8004270:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004274:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	fab2 f282 	clz	r2, r2
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	f002 021f 	and.w	r2, r2, #31
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d084      	beq.n	80041a0 <HAL_RCC_OscConfig+0x9c8>
 8004296:	e07f      	b.n	8004398 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004298:	f7fd f9b6 	bl	8001608 <HAL_GetTick>
 800429c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a0:	e00b      	b.n	80042ba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fd f9b1 	bl	8001608 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e2c4      	b.n	8004844 <HAL_RCC_OscConfig+0x106c>
 80042ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80042c2:	2202      	movs	r2, #2
 80042c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	fa93 f2a3 	rbit	r2, r3
 80042d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042e6:	2202      	movs	r2, #2
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	fa93 f2a3 	rbit	r2, r3
 80042f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004300:	601a      	str	r2, [r3, #0]
  return result;
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800430a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	fab3 f383 	clz	r3, r3
 8004310:	b2db      	uxtb	r3, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f043 0302 	orr.w	r3, r3, #2
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d102      	bne.n	8004326 <HAL_RCC_OscConfig+0xb4e>
 8004320:	4b43      	ldr	r3, [pc, #268]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	e013      	b.n	800434e <HAL_RCC_OscConfig+0xb76>
 8004326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800432e:	2202      	movs	r2, #2
 8004330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004336:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	fa93 f2a3 	rbit	r2, r3
 8004340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004344:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004352:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004356:	2102      	movs	r1, #2
 8004358:	6011      	str	r1, [r2, #0]
 800435a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800435e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	fa92 f1a2 	rbit	r1, r2
 8004368:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800436c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004370:	6011      	str	r1, [r2, #0]
  return result;
 8004372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004376:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	fab2 f282 	clz	r2, r2
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	f002 021f 	and.w	r2, r2, #31
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f202 	lsl.w	r2, r1, r2
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d184      	bne.n	80042a2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004398:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b23      	ldr	r3, [pc, #140]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4a22      	ldr	r2, [pc, #136]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8242 	beq.w	8004842 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <HAL_RCC_OscConfig+0xc58>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	f000 8213 	beq.w	80047f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	f040 8162 	bne.w	80046a2 <HAL_RCC_OscConfig+0xeca>
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80043e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	fa93 f2a3 	rbit	r2, r3
 80043fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004402:	601a      	str	r2, [r3, #0]
  return result;
 8004404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004408:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800440c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004418:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	461a      	mov	r2, r3
 8004420:	2300      	movs	r3, #0
 8004422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd f8f0 	bl	8001608 <HAL_GetTick>
 8004428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800442c:	e00c      	b.n	8004448 <HAL_RCC_OscConfig+0xc70>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd f8e8 	bl	8001608 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e1fd      	b.n	8004844 <HAL_RCC_OscConfig+0x106c>
 8004448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	fa93 f2a3 	rbit	r2, r3
 8004464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004468:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800446c:	601a      	str	r2, [r3, #0]
  return result;
 800446e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004472:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004476:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	d102      	bne.n	8004492 <HAL_RCC_OscConfig+0xcba>
 800448c:	4bb0      	ldr	r3, [pc, #704]	; (8004750 <HAL_RCC_OscConfig+0xf78>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	e027      	b.n	80044e2 <HAL_RCC_OscConfig+0xd0a>
 8004492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004496:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800449a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800449e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	fa93 f2a3 	rbit	r2, r3
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80044c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	fa93 f2a3 	rbit	r2, r3
 80044d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	4b9c      	ldr	r3, [pc, #624]	; (8004750 <HAL_RCC_OscConfig+0xf78>)
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044e6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80044ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044ee:	6011      	str	r1, [r2, #0]
 80044f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044f4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	fa92 f1a2 	rbit	r1, r2
 80044fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004502:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004506:	6011      	str	r1, [r2, #0]
  return result;
 8004508:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800450c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	fab2 f282 	clz	r2, r2
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	f042 0220 	orr.w	r2, r2, #32
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	f002 021f 	and.w	r2, r2, #31
 8004522:	2101      	movs	r1, #1
 8004524:	fa01 f202 	lsl.w	r2, r1, r2
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d182      	bne.n	8004434 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452e:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCC_OscConfig+0xf78>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	430b      	orrs	r3, r1
 8004550:	497f      	ldr	r1, [pc, #508]	; (8004750 <HAL_RCC_OscConfig+0xf78>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
 8004556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800455e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004568:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	fa93 f2a3 	rbit	r2, r3
 8004572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004576:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800457a:	601a      	str	r2, [r3, #0]
  return result;
 800457c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004580:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004584:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004590:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	461a      	mov	r2, r3
 8004598:	2301      	movs	r3, #1
 800459a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fd f834 	bl	8001608 <HAL_GetTick>
 80045a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a4:	e009      	b.n	80045ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fd f82f 	bl	8001608 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e144      	b.n	8004844 <HAL_RCC_OscConfig+0x106c>
 80045ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80045c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	fa93 f2a3 	rbit	r2, r3
 80045d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80045de:	601a      	str	r2, [r3, #0]
  return result;
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80045e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d102      	bne.n	8004604 <HAL_RCC_OscConfig+0xe2c>
 80045fe:	4b54      	ldr	r3, [pc, #336]	; (8004750 <HAL_RCC_OscConfig+0xf78>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	e027      	b.n	8004654 <HAL_RCC_OscConfig+0xe7c>
 8004604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004608:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800460c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004616:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	fa93 f2a3 	rbit	r2, r3
 8004620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004624:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	fa93 f2a3 	rbit	r2, r3
 8004646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <HAL_RCC_OscConfig+0xf78>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004658:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800465c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004660:	6011      	str	r1, [r2, #0]
 8004662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004666:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	fa92 f1a2 	rbit	r1, r2
 8004670:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004674:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004678:	6011      	str	r1, [r2, #0]
  return result;
 800467a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800467e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	fab2 f282 	clz	r2, r2
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	f042 0220 	orr.w	r2, r2, #32
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	f002 021f 	and.w	r2, r2, #31
 8004694:	2101      	movs	r1, #1
 8004696:	fa01 f202 	lsl.w	r2, r1, r2
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d082      	beq.n	80045a6 <HAL_RCC_OscConfig+0xdce>
 80046a0:	e0cf      	b.n	8004842 <HAL_RCC_OscConfig+0x106a>
 80046a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80046aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	fa93 f2a3 	rbit	r2, r3
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80046c6:	601a      	str	r2, [r3, #0]
  return result;
 80046c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80046d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	461a      	mov	r2, r3
 80046e4:	2300      	movs	r3, #0
 80046e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e8:	f7fc ff8e 	bl	8001608 <HAL_GetTick>
 80046ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f0:	e009      	b.n	8004706 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fc ff89 	bl	8001608 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e09e      	b.n	8004844 <HAL_RCC_OscConfig+0x106c>
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800470e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	fa93 f2a3 	rbit	r2, r3
 8004722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004726:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800472a:	601a      	str	r2, [r3, #0]
  return result;
 800472c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004730:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004734:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d104      	bne.n	8004754 <HAL_RCC_OscConfig+0xf7c>
 800474a:	4b01      	ldr	r3, [pc, #4]	; (8004750 <HAL_RCC_OscConfig+0xf78>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	e029      	b.n	80047a4 <HAL_RCC_OscConfig+0xfcc>
 8004750:	40021000 	.word	0x40021000
 8004754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004758:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800475c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004766:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	fa93 f2a3 	rbit	r2, r3
 8004770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004774:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	fa93 f2a3 	rbit	r2, r3
 8004796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <HAL_RCC_OscConfig+0x1078>)
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80047ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	fa92 f1a2 	rbit	r1, r2
 80047c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80047c8:	6011      	str	r1, [r2, #0]
  return result;
 80047ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	fab2 f282 	clz	r2, r2
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	f042 0220 	orr.w	r2, r2, #32
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	f002 021f 	and.w	r2, r2, #31
 80047e4:	2101      	movs	r1, #1
 80047e6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d180      	bne.n	80046f2 <HAL_RCC_OscConfig+0xf1a>
 80047f0:	e027      	b.n	8004842 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e01e      	b.n	8004844 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <HAL_RCC_OscConfig+0x1078>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800480e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004812:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	429a      	cmp	r2, r3
 8004824:	d10b      	bne.n	800483e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004826:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800482a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800482e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800483a:	429a      	cmp	r2, r3
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000

08004854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b09e      	sub	sp, #120	; 0x78
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e162      	b.n	8004b32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800486c:	4b90      	ldr	r3, [pc, #576]	; (8004ab0 <HAL_RCC_ClockConfig+0x25c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d910      	bls.n	800489c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b8d      	ldr	r3, [pc, #564]	; (8004ab0 <HAL_RCC_ClockConfig+0x25c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 0207 	bic.w	r2, r3, #7
 8004882:	498b      	ldr	r1, [pc, #556]	; (8004ab0 <HAL_RCC_ClockConfig+0x25c>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b89      	ldr	r3, [pc, #548]	; (8004ab0 <HAL_RCC_ClockConfig+0x25c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e14a      	b.n	8004b32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a8:	4b82      	ldr	r3, [pc, #520]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	497f      	ldr	r1, [pc, #508]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80dc 	beq.w	8004a80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d13c      	bne.n	800494a <HAL_RCC_ClockConfig+0xf6>
 80048d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d102      	bne.n	80048fa <HAL_RCC_ClockConfig+0xa6>
 80048f4:	4b6f      	ldr	r3, [pc, #444]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	e00f      	b.n	800491a <HAL_RCC_ClockConfig+0xc6>
 80048fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	667b      	str	r3, [r7, #100]	; 0x64
 8004908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800490c:	663b      	str	r3, [r7, #96]	; 0x60
 800490e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004916:	4b67      	ldr	r3, [pc, #412]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800491e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004922:	fa92 f2a2 	rbit	r2, r2
 8004926:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800492a:	fab2 f282 	clz	r2, r2
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	f042 0220 	orr.w	r2, r2, #32
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	f002 021f 	and.w	r2, r2, #31
 800493a:	2101      	movs	r1, #1
 800493c:	fa01 f202 	lsl.w	r2, r1, r2
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d17b      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e0f3      	b.n	8004b32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d13c      	bne.n	80049cc <HAL_RCC_ClockConfig+0x178>
 8004952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004956:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d102      	bne.n	800497c <HAL_RCC_ClockConfig+0x128>
 8004976:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	e00f      	b.n	800499c <HAL_RCC_ClockConfig+0x148>
 800497c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004980:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004984:	fa93 f3a3 	rbit	r3, r3
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
 800498a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800498e:	643b      	str	r3, [r7, #64]	; 0x40
 8004990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004998:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80049a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a4:	fa92 f2a2 	rbit	r2, r2
 80049a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80049aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ac:	fab2 f282 	clz	r2, r2
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	f042 0220 	orr.w	r2, r2, #32
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	f002 021f 	and.w	r2, r2, #31
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f202 	lsl.w	r2, r1, r2
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d13a      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0b2      	b.n	8004b32 <HAL_RCC_ClockConfig+0x2de>
 80049cc:	2302      	movs	r3, #2
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	fab3 f383 	clz	r3, r3
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d102      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x1a0>
 80049ee:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	e00d      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1bc>
 80049f4:	2302      	movs	r3, #2
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004a00:	2302      	movs	r3, #2
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2202      	movs	r2, #2
 8004a12:	61ba      	str	r2, [r7, #24]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	fa92 f2a2 	rbit	r2, r2
 8004a1a:	617a      	str	r2, [r7, #20]
  return result;
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	fab2 f282 	clz	r2, r2
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	f042 0220 	orr.w	r2, r2, #32
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	f002 021f 	and.w	r2, r2, #31
 8004a2e:	2101      	movs	r1, #1
 8004a30:	fa01 f202 	lsl.w	r2, r1, r2
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e079      	b.n	8004b32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f023 0203 	bic.w	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	491a      	ldr	r1, [pc, #104]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a50:	f7fc fdda 	bl	8001608 <HAL_GetTick>
 8004a54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a56:	e00a      	b.n	8004a6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a58:	f7fc fdd6 	bl	8001608 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e061      	b.n	8004b32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_RCC_ClockConfig+0x260>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 020c 	and.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d1eb      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_ClockConfig+0x25c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d214      	bcs.n	8004ab8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <HAL_RCC_ClockConfig+0x25c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 0207 	bic.w	r2, r3, #7
 8004a96:	4906      	ldr	r1, [pc, #24]	; (8004ab0 <HAL_RCC_ClockConfig+0x25c>)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <HAL_RCC_ClockConfig+0x25c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e040      	b.n	8004b32 <HAL_RCC_ClockConfig+0x2de>
 8004ab0:	40022000 	.word	0x40022000
 8004ab4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_RCC_ClockConfig+0x2e8>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	491a      	ldr	r1, [pc, #104]	; (8004b3c <HAL_RCC_ClockConfig+0x2e8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ae2:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <HAL_RCC_ClockConfig+0x2e8>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4912      	ldr	r1, [pc, #72]	; (8004b3c <HAL_RCC_ClockConfig+0x2e8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004af6:	f000 f829 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8004afa:	4601      	mov	r1, r0
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <HAL_RCC_ClockConfig+0x2e8>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b04:	22f0      	movs	r2, #240	; 0xf0
 8004b06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	fa92 f2a2 	rbit	r2, r2
 8004b0e:	60fa      	str	r2, [r7, #12]
  return result;
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	fab2 f282 	clz	r2, r2
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	40d3      	lsrs	r3, r2
 8004b1a:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <HAL_RCC_ClockConfig+0x2ec>)
 8004b1c:	5cd3      	ldrb	r3, [r2, r3]
 8004b1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b22:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <HAL_RCC_ClockConfig+0x2f0>)
 8004b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_RCC_ClockConfig+0x2f4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fc fd28 	bl	8001580 <HAL_InitTick>
  
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3778      	adds	r7, #120	; 0x78
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	0800c804 	.word	0x0800c804
 8004b44:	20000000 	.word	0x20000000
 8004b48:	20000004 	.word	0x20000004

08004b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b66:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d002      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x30>
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x36>
 8004b7a:	e026      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b7e:	613b      	str	r3, [r7, #16]
      break;
 8004b80:	e026      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	0c9b      	lsrs	r3, r3, #18
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
 8004b8e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ba8:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	613b      	str	r3, [r7, #16]
      break;
 8004bc8:	e002      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bcc:	613b      	str	r3, [r7, #16]
      break;
 8004bce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd0:	693b      	ldr	r3, [r7, #16]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	007a1200 	.word	0x007a1200
 8004be8:	0800c814 	.word	0x0800c814
 8004bec:	0800c824 	.word	0x0800c824
 8004bf0:	003d0900 	.word	0x003d0900

08004bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b092      	sub	sp, #72	; 0x48
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80d4 	beq.w	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c18:	4b4e      	ldr	r3, [pc, #312]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10e      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c24:	4b4b      	ldr	r3, [pc, #300]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4a4a      	ldr	r2, [pc, #296]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	61d3      	str	r3, [r2, #28]
 8004c30:	4b48      	ldr	r3, [pc, #288]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c42:	4b45      	ldr	r3, [pc, #276]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d118      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4e:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a41      	ldr	r2, [pc, #260]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5a:	f7fc fcd5 	bl	8001608 <HAL_GetTick>
 8004c5e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	e008      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fc fcd1 	bl	8001608 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b64      	cmp	r3, #100	; 0x64
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e169      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c74:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c80:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8084 	beq.w	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d07c      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ca0:	4b2c      	ldr	r3, [pc, #176]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2301      	movs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	461a      	mov	r2, r3
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cf2:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04b      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fc fc81 	bl	8001608 <HAL_GetTick>
 8004d06:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fc fc7d 	bl	8001608 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e113      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004d20:	2302      	movs	r3, #2
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	fa93 f3a3 	rbit	r3, r3
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	61fb      	str	r3, [r7, #28]
  return result;
 8004d38:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3a:	fab3 f383 	clz	r3, r3
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f043 0302 	orr.w	r3, r3, #2
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d108      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d4e:	4b01      	ldr	r3, [pc, #4]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	e00d      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	10908100 	.word	0x10908100
 8004d60:	2302      	movs	r3, #2
 8004d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	4b78      	ldr	r3, [pc, #480]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2202      	movs	r2, #2
 8004d72:	613a      	str	r2, [r7, #16]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	fa92 f2a2 	rbit	r2, r2
 8004d7a:	60fa      	str	r2, [r7, #12]
  return result;
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	fab2 f282 	clz	r2, r2
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	f002 021f 	and.w	r2, r2, #31
 8004d8e:	2101      	movs	r1, #1
 8004d90:	fa01 f202 	lsl.w	r2, r1, r2
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0b7      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d9a:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	496a      	ldr	r1, [pc, #424]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db4:	4b66      	ldr	r3, [pc, #408]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	4a65      	ldr	r2, [pc, #404]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dcc:	4b60      	ldr	r3, [pc, #384]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	f023 0203 	bic.w	r2, r3, #3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	495d      	ldr	r1, [pc, #372]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dea:	4b59      	ldr	r3, [pc, #356]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4956      	ldr	r1, [pc, #344]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e08:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	494e      	ldr	r1, [pc, #312]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e26:	4b4a      	ldr	r3, [pc, #296]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f023 0210 	bic.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4947      	ldr	r1, [pc, #284]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e44:	4b42      	ldr	r3, [pc, #264]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	493f      	ldr	r1, [pc, #252]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e62:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f023 0220 	bic.w	r2, r3, #32
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4938      	ldr	r1, [pc, #224]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e80:	4b33      	ldr	r3, [pc, #204]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	4930      	ldr	r1, [pc, #192]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e9e:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	4929      	ldr	r1, [pc, #164]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4921      	ldr	r1, [pc, #132]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004eda:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	491a      	ldr	r1, [pc, #104]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	4912      	ldr	r1, [pc, #72]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	490b      	ldr	r1, [pc, #44]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	4903      	ldr	r1, [pc, #12]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3748      	adds	r7, #72	; 0x48
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000

08004f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e049      	b.n	8004ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc f994 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f000 f898 	bl	80050c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	d001      	beq.n	800501c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e042      	b.n	80050a2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <HAL_TIM_Base_Start+0xac>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <HAL_TIM_Base_Start+0x5c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d013      	beq.n	8005060 <HAL_TIM_Base_Start+0x5c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <HAL_TIM_Base_Start+0xb0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_TIM_Base_Start+0x5c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_TIM_Base_Start+0xb4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_TIM_Base_Start+0x5c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <HAL_TIM_Base_Start+0xb8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIM_Base_Start+0x5c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_TIM_Base_Start+0xbc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d115      	bne.n	800508c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <HAL_TIM_Base_Start+0xc0>)
 8005068:	4013      	ands	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b06      	cmp	r3, #6
 8005070:	d015      	beq.n	800509e <HAL_TIM_Base_Start+0x9a>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d011      	beq.n	800509e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508a:	e008      	b.n	800509e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	e000      	b.n	80050a0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40013400 	.word	0x40013400
 80050c0:	40014000 	.word	0x40014000
 80050c4:	00010007 	.word	0x00010007

080050c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a42      	ldr	r2, [pc, #264]	; (80051e4 <TIM_Base_SetConfig+0x11c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00f      	beq.n	8005100 <TIM_Base_SetConfig+0x38>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d00b      	beq.n	8005100 <TIM_Base_SetConfig+0x38>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a3f      	ldr	r2, [pc, #252]	; (80051e8 <TIM_Base_SetConfig+0x120>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_Base_SetConfig+0x38>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a3e      	ldr	r2, [pc, #248]	; (80051ec <TIM_Base_SetConfig+0x124>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_Base_SetConfig+0x38>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a3d      	ldr	r2, [pc, #244]	; (80051f0 <TIM_Base_SetConfig+0x128>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d108      	bne.n	8005112 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a33      	ldr	r2, [pc, #204]	; (80051e4 <TIM_Base_SetConfig+0x11c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01b      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005120:	d017      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a30      	ldr	r2, [pc, #192]	; (80051e8 <TIM_Base_SetConfig+0x120>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2f      	ldr	r2, [pc, #188]	; (80051ec <TIM_Base_SetConfig+0x124>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00f      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a2e      	ldr	r2, [pc, #184]	; (80051f0 <TIM_Base_SetConfig+0x128>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00b      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2d      	ldr	r2, [pc, #180]	; (80051f4 <TIM_Base_SetConfig+0x12c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a2c      	ldr	r2, [pc, #176]	; (80051f8 <TIM_Base_SetConfig+0x130>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <TIM_Base_SetConfig+0x134>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d108      	bne.n	8005164 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <TIM_Base_SetConfig+0x11c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00f      	beq.n	80051b0 <TIM_Base_SetConfig+0xe8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <TIM_Base_SetConfig+0x128>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00b      	beq.n	80051b0 <TIM_Base_SetConfig+0xe8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <TIM_Base_SetConfig+0x12c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d007      	beq.n	80051b0 <TIM_Base_SetConfig+0xe8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <TIM_Base_SetConfig+0x130>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0xe8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a14      	ldr	r2, [pc, #80]	; (80051fc <TIM_Base_SetConfig+0x134>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d103      	bne.n	80051b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d105      	bne.n	80051d6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]
  }
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40013400 	.word	0x40013400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005214:	2302      	movs	r3, #2
 8005216:	e063      	b.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2b      	ldr	r2, [pc, #172]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2a      	ldr	r2, [pc, #168]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d108      	bne.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005252:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d013      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a17      	ldr	r2, [pc, #92]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a13      	ldr	r2, [pc, #76]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10c      	bne.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40014000 	.word	0x40014000

08005300 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005310:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005314:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005336:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800533a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	b29b      	uxth	r3, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	b29b      	uxth	r3, r3
 800534c:	4013      	ands	r3, r2
 800534e:	b29a      	uxth	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	1d3b      	adds	r3, r7, #4
 800536e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b09d      	sub	sp, #116	; 0x74
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	78db      	ldrb	r3, [r3, #3]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d81f      	bhi.n	8005412 <USB_ActivateEndpoint+0x72>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <USB_ActivateEndpoint+0x38>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053e9 	.word	0x080053e9
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800541b 	.word	0x0800541b
 80053e4:	080053f7 	.word	0x080053f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053f4:	e012      	b.n	800541c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80053fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005402:	e00b      	b.n	800541c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005404:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800540c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005410:	e004      	b.n	800541c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005418:	e000      	b.n	800541c <USB_ActivateEndpoint+0x7c>
      break;
 800541a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	b21b      	sxth	r3, r3
 800544e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	b21a      	sxth	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	b21b      	sxth	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b21b      	sxth	r3, r3
 8005462:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	441a      	add	r2, r3
 8005470:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005484:	b29b      	uxth	r3, r3
 8005486:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	7b1b      	ldrb	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f040 8178 	bne.w	8005782 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8084 	beq.w	80055a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	461a      	mov	r2, r3
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	4413      	add	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	011a      	lsls	r2, r3, #4
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	88db      	ldrh	r3, [r3, #6]
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	827b      	strh	r3, [r7, #18]
 80054de:	8a7b      	ldrh	r3, [r7, #18]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <USB_ActivateEndpoint+0x180>
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	823b      	strh	r3, [r7, #16]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	8a3b      	ldrh	r3, [r7, #16]
 800550c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005518:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800551c:	b29b      	uxth	r3, r3
 800551e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	78db      	ldrb	r3, [r3, #3]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d020      	beq.n	800556a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553e:	81bb      	strh	r3, [r7, #12]
 8005540:	89bb      	ldrh	r3, [r7, #12]
 8005542:	f083 0320 	eor.w	r3, r3, #32
 8005546:	81bb      	strh	r3, [r7, #12]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]
 8005568:	e2d5      	b.n	8005b16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005580:	81fb      	strh	r3, [r7, #14]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	89fb      	ldrh	r3, [r7, #14]
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]
 80055a2:	e2b8      	b.n	8005b16 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	4413      	add	r3, r2
 80055b6:	633b      	str	r3, [r7, #48]	; 0x30
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	011a      	lsls	r2, r3, #4
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	88db      	ldrh	r3, [r3, #6]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	4413      	add	r3, r2
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	011a      	lsls	r2, r3, #4
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	4413      	add	r3, r2
 80055f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005606:	b29a      	uxth	r2, r3
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <USB_ActivateEndpoint+0x28a>
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005622:	b29a      	uxth	r2, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e039      	b.n	800569e <USB_ActivateEndpoint+0x2fe>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b3e      	cmp	r3, #62	; 0x3e
 8005630:	d818      	bhi.n	8005664 <USB_ActivateEndpoint+0x2c4>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	66bb      	str	r3, [r7, #104]	; 0x68
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <USB_ActivateEndpoint+0x2ac>
 8005646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005648:	3301      	adds	r3, #1
 800564a:	66bb      	str	r3, [r7, #104]	; 0x68
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005654:	b29b      	uxth	r3, r3
 8005656:	029b      	lsls	r3, r3, #10
 8005658:	b29b      	uxth	r3, r3
 800565a:	4313      	orrs	r3, r2
 800565c:	b29a      	uxth	r2, r3
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	e01c      	b.n	800569e <USB_ActivateEndpoint+0x2fe>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	66bb      	str	r3, [r7, #104]	; 0x68
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <USB_ActivateEndpoint+0x2de>
 8005678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800567a:	3b01      	subs	r3, #1
 800567c:	66bb      	str	r3, [r7, #104]	; 0x68
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29a      	uxth	r2, r3
 8005684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005686:	b29b      	uxth	r3, r3
 8005688:	029b      	lsls	r3, r3, #10
 800568a:	b29b      	uxth	r3, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	b29b      	uxth	r3, r3
 8005690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005698:	b29a      	uxth	r2, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80056ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01b      	beq.n	80056ee <USB_ActivateEndpoint+0x34e>
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056cc:	843b      	strh	r3, [r7, #32]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	8c3b      	ldrh	r3, [r7, #32]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d124      	bne.n	8005740 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570c:	83bb      	strh	r3, [r7, #28]
 800570e:	8bbb      	ldrh	r3, [r7, #28]
 8005710:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005714:	83bb      	strh	r3, [r7, #28]
 8005716:	8bbb      	ldrh	r3, [r7, #28]
 8005718:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800571c:	83bb      	strh	r3, [r7, #28]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	8bbb      	ldrh	r3, [r7, #28]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
 800573e:	e1ea      	b.n	8005b16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	83fb      	strh	r3, [r7, #30]
 8005758:	8bfb      	ldrh	r3, [r7, #30]
 800575a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800575e:	83fb      	strh	r3, [r7, #30]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	8bfb      	ldrh	r3, [r7, #30]
 800576c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577c:	b29b      	uxth	r3, r3
 800577e:	8013      	strh	r3, [r2, #0]
 8005780:	e1c9      	b.n	8005b16 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d11e      	bne.n	80057c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]
 80057c6:	e01d      	b.n	8005804 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	b29b      	uxth	r3, r3
 8005802:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580e:	b29b      	uxth	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005814:	4413      	add	r3, r2
 8005816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	011a      	lsls	r2, r3, #4
 800581e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005820:	4413      	add	r3, r2
 8005822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005826:	65bb      	str	r3, [r7, #88]	; 0x58
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	891b      	ldrh	r3, [r3, #8]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	b29b      	uxth	r3, r3
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	657b      	str	r3, [r7, #84]	; 0x54
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005842:	b29b      	uxth	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005848:	4413      	add	r3, r2
 800584a:	657b      	str	r3, [r7, #84]	; 0x54
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	011a      	lsls	r2, r3, #4
 8005852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005854:	4413      	add	r3, r2
 8005856:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	895b      	ldrh	r3, [r3, #10]
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	b29b      	uxth	r3, r3
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f040 8093 	bne.w	800599c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005886:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800588a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01b      	beq.n	80058ca <USB_ActivateEndpoint+0x52a>
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80058b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80058d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d01b      	beq.n	800591a <USB_ActivateEndpoint+0x57a>
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	441a      	add	r2, r3
 8005904:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005912:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005916:	b29b      	uxth	r3, r3
 8005918:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	873b      	strh	r3, [r7, #56]	; 0x38
 8005932:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005934:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005938:	873b      	strh	r3, [r7, #56]	; 0x38
 800593a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800593c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005940:	873b      	strh	r3, [r7, #56]	; 0x38
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005978:	86fb      	strh	r3, [r7, #54]	; 0x36
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
 800599a:	e0bc      	b.n	8005b16 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80059ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01d      	beq.n	80059f4 <USB_ActivateEndpoint+0x654>
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	441a      	add	r2, r3
 80059dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80059e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005a04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01d      	beq.n	8005a4c <USB_ActivateEndpoint+0x6ac>
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	441a      	add	r2, r3
 8005a34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	78db      	ldrb	r3, [r3, #3]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d024      	beq.n	8005a9e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a72:	f083 0320 	eor.w	r3, r3, #32
 8005a76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	8013      	strh	r3, [r2, #0]
 8005a9c:	e01d      	b.n	8005ada <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005b16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3774      	adds	r7, #116	; 0x74
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop

08005b28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b08d      	sub	sp, #52	; 0x34
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	7b1b      	ldrb	r3, [r3, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 808e 	bne.w	8005c58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d044      	beq.n	8005bce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	81bb      	strh	r3, [r7, #12]
 8005b52:	89bb      	ldrh	r3, [r7, #12]
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01b      	beq.n	8005b94 <USB_DeactivateEndpoint+0x6c>
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b72:	817b      	strh	r3, [r7, #10]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	441a      	add	r2, r3
 8005b7e:	897b      	ldrh	r3, [r7, #10]
 8005b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005baa:	813b      	strh	r3, [r7, #8]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	441a      	add	r2, r3
 8005bb6:	893b      	ldrh	r3, [r7, #8]
 8005bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	8013      	strh	r3, [r2, #0]
 8005bcc:	e192      	b.n	8005ef4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	827b      	strh	r3, [r7, #18]
 8005bdc:	8a7b      	ldrh	r3, [r7, #18]
 8005bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01b      	beq.n	8005c1e <USB_DeactivateEndpoint+0xf6>
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfc:	823b      	strh	r3, [r7, #16]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	441a      	add	r2, r3
 8005c08:	8a3b      	ldrh	r3, [r7, #16]
 8005c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c34:	81fb      	strh	r3, [r7, #14]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	89fb      	ldrh	r3, [r7, #14]
 8005c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	8013      	strh	r3, [r2, #0]
 8005c56:	e14d      	b.n	8005ef4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 80a5 	bne.w	8005dac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	843b      	strh	r3, [r7, #32]
 8005c70:	8c3b      	ldrh	r3, [r7, #32]
 8005c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01b      	beq.n	8005cb2 <USB_DeactivateEndpoint+0x18a>
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	83fb      	strh	r3, [r7, #30]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	8bfb      	ldrh	r3, [r7, #30]
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	83bb      	strh	r3, [r7, #28]
 8005cc0:	8bbb      	ldrh	r3, [r7, #28]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01b      	beq.n	8005d02 <USB_DeactivateEndpoint+0x1da>
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce0:	837b      	strh	r3, [r7, #26]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	441a      	add	r2, r3
 8005cec:	8b7b      	ldrh	r3, [r7, #26]
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	833b      	strh	r3, [r7, #24]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	441a      	add	r2, r3
 8005d24:	8b3b      	ldrh	r3, [r7, #24]
 8005d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d50:	82fb      	strh	r3, [r7, #22]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	8afb      	ldrh	r3, [r7, #22]
 8005d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d88:	82bb      	strh	r3, [r7, #20]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	441a      	add	r2, r3
 8005d94:	8abb      	ldrh	r3, [r7, #20]
 8005d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	8013      	strh	r3, [r2, #0]
 8005daa:	e0a3      	b.n	8005ef4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005dba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01b      	beq.n	8005dfc <USB_DeactivateEndpoint+0x2d4>
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01b      	beq.n	8005e4c <USB_DeactivateEndpoint+0x324>
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	441a      	add	r2, r3
 8005e36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	441a      	add	r2, r3
 8005ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3734      	adds	r7, #52	; 0x34
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b0c2      	sub	sp, #264	; 0x108
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f10:	6018      	str	r0, [r3, #0]
 8005f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f040 86b7 	bne.w	8006c9c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d908      	bls.n	8005f5c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f5a:	e007      	b.n	8005f6c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	7b1b      	ldrb	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d13a      	bne.n	8005ff2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6959      	ldr	r1, [r3, #20]
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	88da      	ldrh	r2, [r3, #6]
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005fa2:	6800      	ldr	r0, [r0, #0]
 8005fa4:	f001 fc8d 	bl	80078c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	011a      	lsls	r2, r3, #4
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	f000 be1f 	b.w	8006c30 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	78db      	ldrb	r3, [r3, #3]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	f040 8462 	bne.w	80068c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	429a      	cmp	r2, r3
 800601e:	f240 83df 	bls.w	80067e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	441a      	add	r2, r3
 8006066:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006072:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800607e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800609c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 81c7 	beq.w	8006452 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	633b      	str	r3, [r7, #48]	; 0x30
 80060d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d177      	bne.n	80061d0 <USB_EPStartXfer+0x2ce>
 80060e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	4413      	add	r3, r2
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	011a      	lsls	r2, r3, #4
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	4413      	add	r3, r2
 8006116:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006126:	b29a      	uxth	r2, r3
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <USB_EPStartXfer+0x248>
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b29b      	uxth	r3, r3
 800613a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006142:	b29a      	uxth	r2, r3
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	e067      	b.n	800621a <USB_EPStartXfer+0x318>
 800614a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614e:	2b3e      	cmp	r3, #62	; 0x3e
 8006150:	d81c      	bhi.n	800618c <USB_EPStartXfer+0x28a>
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <USB_EPStartXfer+0x270>
 8006168:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800616c:	3301      	adds	r3, #1
 800616e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29a      	uxth	r2, r3
 8006178:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800617c:	b29b      	uxth	r3, r3
 800617e:	029b      	lsls	r3, r3, #10
 8006180:	b29b      	uxth	r3, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	b29a      	uxth	r2, r3
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	e046      	b.n	800621a <USB_EPStartXfer+0x318>
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <USB_EPStartXfer+0x2aa>
 80061a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061a6:	3b01      	subs	r3, #1
 80061a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	4313      	orrs	r3, r2
 80061be:	b29b      	uxth	r3, r3
 80061c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	e024      	b.n	800621a <USB_EPStartXfer+0x318>
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d11c      	bne.n	800621a <USB_EPStartXfer+0x318>
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	4413      	add	r3, r2
 80061f6:	633b      	str	r3, [r7, #48]	; 0x30
 80061f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	011a      	lsls	r2, r3, #4
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	4413      	add	r3, r2
 800620a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006214:	b29a      	uxth	r2, r3
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800621a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	895b      	ldrh	r3, [r3, #10]
 8006226:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800622a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6959      	ldr	r1, [r3, #20]
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623a:	b29b      	uxth	r3, r3
 800623c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006240:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006244:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006248:	6800      	ldr	r0, [r0, #0]
 800624a:	f001 fb3a 	bl	80078c2 <USB_WritePMA>
            ep->xfer_buff += len;
 800624e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695a      	ldr	r2, [r3, #20]
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625e:	441a      	add	r2, r3
 8006260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800626c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	429a      	cmp	r2, r3
 8006286:	d90f      	bls.n	80062a8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6a1a      	ldr	r2, [r3, #32]
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006298:	1ad2      	subs	r2, r2, r3
 800629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	621a      	str	r2, [r3, #32]
 80062a6:	e00e      	b.n	80062c6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80062a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80062b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d177      	bne.n	80063c6 <USB_EPStartXfer+0x4c4>
 80062d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	4413      	add	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	011a      	lsls	r2, r3, #4
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	4413      	add	r3, r2
 800630c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800631c:	b29a      	uxth	r2, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <USB_EPStartXfer+0x43e>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006338:	b29a      	uxth	r2, r3
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e06d      	b.n	800641c <USB_EPStartXfer+0x51a>
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006344:	2b3e      	cmp	r3, #62	; 0x3e
 8006346:	d81c      	bhi.n	8006382 <USB_EPStartXfer+0x480>
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <USB_EPStartXfer+0x466>
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006362:	3301      	adds	r3, #1
 8006364:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006372:	b29b      	uxth	r3, r3
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	b29b      	uxth	r3, r3
 8006378:	4313      	orrs	r3, r2
 800637a:	b29a      	uxth	r2, r3
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e04c      	b.n	800641c <USB_EPStartXfer+0x51a>
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <USB_EPStartXfer+0x4a0>
 8006398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639c:	3b01      	subs	r3, #1
 800639e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	029b      	lsls	r3, r3, #10
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063be:	b29a      	uxth	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e02a      	b.n	800641c <USB_EPStartXfer+0x51a>
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d122      	bne.n	800641c <USB_EPStartXfer+0x51a>
 80063d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	623b      	str	r3, [r7, #32]
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	4413      	add	r3, r2
 80063f8:	623b      	str	r3, [r7, #32]
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	011a      	lsls	r2, r3, #4
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	4413      	add	r3, r2
 800640c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006416:	b29a      	uxth	r2, r3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	891b      	ldrh	r3, [r3, #8]
 8006428:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6959      	ldr	r1, [r3, #20]
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643c:	b29b      	uxth	r3, r3
 800643e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006442:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006446:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	f001 fa39 	bl	80078c2 <USB_WritePMA>
 8006450:	e3ee      	b.n	8006c30 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d177      	bne.n	8006552 <USB_EPStartXfer+0x650>
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	64bb      	str	r3, [r7, #72]	; 0x48
 800646e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647c:	b29b      	uxth	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006482:	4413      	add	r3, r2
 8006484:	64bb      	str	r3, [r7, #72]	; 0x48
 8006486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	011a      	lsls	r2, r3, #4
 8006494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006496:	4413      	add	r3, r2
 8006498:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800649c:	647b      	str	r3, [r7, #68]	; 0x44
 800649e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <USB_EPStartXfer+0x5ca>
 80064b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e06d      	b.n	80065a8 <USB_EPStartXfer+0x6a6>
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d0:	2b3e      	cmp	r3, #62	; 0x3e
 80064d2:	d81c      	bhi.n	800650e <USB_EPStartXfer+0x60c>
 80064d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <USB_EPStartXfer+0x5f2>
 80064ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064ee:	3301      	adds	r3, #1
 80064f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064fe:	b29b      	uxth	r3, r3
 8006500:	029b      	lsls	r3, r3, #10
 8006502:	b29b      	uxth	r3, r3
 8006504:	4313      	orrs	r3, r2
 8006506:	b29a      	uxth	r2, r3
 8006508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800650a:	801a      	strh	r2, [r3, #0]
 800650c:	e04c      	b.n	80065a8 <USB_EPStartXfer+0x6a6>
 800650e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <USB_EPStartXfer+0x62c>
 8006524:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006528:	3b01      	subs	r3, #1
 800652a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800652e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29a      	uxth	r2, r3
 8006534:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006538:	b29b      	uxth	r3, r3
 800653a:	029b      	lsls	r3, r3, #10
 800653c:	b29b      	uxth	r3, r3
 800653e:	4313      	orrs	r3, r2
 8006540:	b29b      	uxth	r3, r3
 8006542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654a:	b29a      	uxth	r2, r3
 800654c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	e02a      	b.n	80065a8 <USB_EPStartXfer+0x6a6>
 8006552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	785b      	ldrb	r3, [r3, #1]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d122      	bne.n	80065a8 <USB_EPStartXfer+0x6a6>
 8006562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	653b      	str	r3, [r7, #80]	; 0x50
 800656e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657c:	b29b      	uxth	r3, r3
 800657e:	461a      	mov	r2, r3
 8006580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006582:	4413      	add	r3, r2
 8006584:	653b      	str	r3, [r7, #80]	; 0x50
 8006586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	011a      	lsls	r2, r3, #4
 8006594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006596:	4413      	add	r3, r2
 8006598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800659c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	891b      	ldrh	r3, [r3, #8]
 80065b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6959      	ldr	r1, [r3, #20]
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065d6:	6800      	ldr	r0, [r0, #0]
 80065d8:	f001 f973 	bl	80078c2 <USB_WritePMA>
            ep->xfer_buff += len;
 80065dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695a      	ldr	r2, [r3, #20]
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ec:	441a      	add	r2, r3
 80065ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6a1a      	ldr	r2, [r3, #32]
 8006606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	d90f      	bls.n	8006636 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6a1a      	ldr	r2, [r3, #32]
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	621a      	str	r2, [r3, #32]
 8006634:	e00e      	b.n	8006654 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2200      	movs	r2, #0
 8006652:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	643b      	str	r3, [r7, #64]	; 0x40
 8006660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d177      	bne.n	8006760 <USB_EPStartXfer+0x85e>
 8006670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	63bb      	str	r3, [r7, #56]	; 0x38
 800667c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	4413      	add	r3, r2
 8006692:	63bb      	str	r3, [r7, #56]	; 0x38
 8006694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	011a      	lsls	r2, r3, #4
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <USB_EPStartXfer+0x7d8>
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	e067      	b.n	80067aa <USB_EPStartXfer+0x8a8>
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066de:	2b3e      	cmp	r3, #62	; 0x3e
 80066e0:	d81c      	bhi.n	800671c <USB_EPStartXfer+0x81a>
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <USB_EPStartXfer+0x800>
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	3301      	adds	r3, #1
 80066fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29a      	uxth	r2, r3
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	b29b      	uxth	r3, r3
 800670e:	029b      	lsls	r3, r3, #10
 8006710:	b29b      	uxth	r3, r3
 8006712:	4313      	orrs	r3, r2
 8006714:	b29a      	uxth	r2, r3
 8006716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	e046      	b.n	80067aa <USB_EPStartXfer+0x8a8>
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	2b00      	cmp	r3, #0
 8006730:	d104      	bne.n	800673c <USB_EPStartXfer+0x83a>
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	3b01      	subs	r3, #1
 8006738:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29a      	uxth	r2, r3
 8006742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006746:	b29b      	uxth	r3, r3
 8006748:	029b      	lsls	r3, r3, #10
 800674a:	b29b      	uxth	r3, r3
 800674c:	4313      	orrs	r3, r2
 800674e:	b29b      	uxth	r3, r3
 8006750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006758:	b29a      	uxth	r2, r3
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	e024      	b.n	80067aa <USB_EPStartXfer+0x8a8>
 8006760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d11c      	bne.n	80067aa <USB_EPStartXfer+0x8a8>
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677e:	b29b      	uxth	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006784:	4413      	add	r3, r2
 8006786:	643b      	str	r3, [r7, #64]	; 0x40
 8006788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	011a      	lsls	r2, r3, #4
 8006796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006798:	4413      	add	r3, r2
 800679a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	895b      	ldrh	r3, [r3, #10]
 80067b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6959      	ldr	r1, [r3, #20]
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067d8:	6800      	ldr	r0, [r0, #0]
 80067da:	f001 f872 	bl	80078c2 <USB_WritePMA>
 80067de:	e227      	b.n	8006c30 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80067e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800681a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006848:	b29b      	uxth	r3, r3
 800684a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686c:	4413      	add	r3, r2
 800686e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	011a      	lsls	r2, r3, #4
 800687e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006880:	4413      	add	r3, r2
 8006882:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006886:	65bb      	str	r3, [r7, #88]	; 0x58
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688c:	b29a      	uxth	r2, r3
 800688e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006890:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	891b      	ldrh	r3, [r3, #8]
 800689e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6959      	ldr	r1, [r3, #20]
 80068ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068c0:	6800      	ldr	r0, [r0, #0]
 80068c2:	f000 fffe 	bl	80078c2 <USB_WritePMA>
 80068c6:	e1b3      	b.n	8006c30 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80068c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6a1a      	ldr	r2, [r3, #32]
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80c6 	beq.w	8006a9a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800690e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	673b      	str	r3, [r7, #112]	; 0x70
 800691a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d177      	bne.n	8006a1a <USB_EPStartXfer+0xb18>
 800692a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	66bb      	str	r3, [r7, #104]	; 0x68
 8006936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006944:	b29b      	uxth	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800694a:	4413      	add	r3, r2
 800694c:	66bb      	str	r3, [r7, #104]	; 0x68
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	011a      	lsls	r2, r3, #4
 800695c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800695e:	4413      	add	r3, r2
 8006960:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006964:	667b      	str	r3, [r7, #100]	; 0x64
 8006966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006970:	b29a      	uxth	r2, r3
 8006972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <USB_EPStartXfer+0xa92>
 800697e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698c:	b29a      	uxth	r2, r3
 800698e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	e067      	b.n	8006a64 <USB_EPStartXfer+0xb62>
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006998:	2b3e      	cmp	r3, #62	; 0x3e
 800699a:	d81c      	bhi.n	80069d6 <USB_EPStartXfer+0xad4>
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a0:	085b      	lsrs	r3, r3, #1
 80069a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <USB_EPStartXfer+0xaba>
 80069b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069b6:	3301      	adds	r3, #1
 80069b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	029b      	lsls	r3, r3, #10
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	4313      	orrs	r3, r2
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	e046      	b.n	8006a64 <USB_EPStartXfer+0xb62>
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <USB_EPStartXfer+0xaf4>
 80069ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069f0:	3b01      	subs	r3, #1
 80069f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	029b      	lsls	r3, r3, #10
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	4313      	orrs	r3, r2
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e024      	b.n	8006a64 <USB_EPStartXfer+0xb62>
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d11c      	bne.n	8006a64 <USB_EPStartXfer+0xb62>
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a3e:	4413      	add	r3, r2
 8006a40:	673b      	str	r3, [r7, #112]	; 0x70
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	011a      	lsls	r2, r3, #4
 8006a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a52:	4413      	add	r3, r2
 8006a54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	895b      	ldrh	r3, [r3, #10]
 8006a70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6959      	ldr	r1, [r3, #20]
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a92:	6800      	ldr	r0, [r0, #0]
 8006a94:	f000 ff15 	bl	80078c2 <USB_WritePMA>
 8006a98:	e0ca      	b.n	8006c30 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d177      	bne.n	8006b9a <USB_EPStartXfer+0xc98>
 8006aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006aca:	4413      	add	r3, r2
 8006acc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	011a      	lsls	r2, r3, #4
 8006adc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ade:	4413      	add	r3, r2
 8006ae0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <USB_EPStartXfer+0xc12>
 8006afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	e073      	b.n	8006bfc <USB_EPStartXfer+0xcfa>
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b18:	2b3e      	cmp	r3, #62	; 0x3e
 8006b1a:	d81c      	bhi.n	8006b56 <USB_EPStartXfer+0xc54>
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d004      	beq.n	8006b3c <USB_EPStartXfer+0xc3a>
 8006b32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b36:	3301      	adds	r3, #1
 8006b38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	029b      	lsls	r3, r3, #10
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e052      	b.n	8006bfc <USB_EPStartXfer+0xcfa>
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <USB_EPStartXfer+0xc74>
 8006b6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b70:	3b01      	subs	r3, #1
 8006b72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	029b      	lsls	r3, r3, #10
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4313      	orrs	r3, r2
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	e030      	b.n	8006bfc <USB_EPStartXfer+0xcfa>
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d128      	bne.n	8006bfc <USB_EPStartXfer+0xcfa>
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bce:	4413      	add	r3, r2
 8006bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	011a      	lsls	r2, r3, #4
 8006be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006be6:	4413      	add	r3, r2
 8006be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	891b      	ldrh	r3, [r3, #8]
 8006c08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6959      	ldr	r1, [r3, #20]
 8006c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	f000 fe49 	bl	80078c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c56:	817b      	strh	r3, [r7, #10]
 8006c58:	897b      	ldrh	r3, [r7, #10]
 8006c5a:	f083 0310 	eor.w	r3, r3, #16
 8006c5e:	817b      	strh	r3, [r7, #10]
 8006c60:	897b      	ldrh	r3, [r7, #10]
 8006c62:	f083 0320 	eor.w	r3, r3, #32
 8006c66:	817b      	strh	r3, [r7, #10]
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	441a      	add	r2, r3
 8006c82:	897b      	ldrh	r3, [r7, #10]
 8006c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	8013      	strh	r3, [r2, #0]
 8006c98:	f000 bcdf 	b.w	800765a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	7b1b      	ldrb	r3, [r3, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f040 80bc 	bne.w	8006e26 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d917      	bls.n	8006cfa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	619a      	str	r2, [r3, #24]
 8006cf8:	e00e      	b.n	8006d18 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2200      	movs	r2, #0
 8006d16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	011a      	lsls	r2, r3, #4
 8006d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d54:	4413      	add	r3, r2
 8006d56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10d      	bne.n	8006d96 <USB_EPStartXfer+0xe94>
 8006d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	f000 bc28 	b.w	80075e6 <USB_EPStartXfer+0x16e4>
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d9c:	d81f      	bhi.n	8006dde <USB_EPStartXfer+0xedc>
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <USB_EPStartXfer+0xebc>
 8006db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006db8:	3301      	adds	r3, #1
 8006dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	029b      	lsls	r3, r3, #10
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	f000 bc04 	b.w	80075e6 <USB_EPStartXfer+0x16e4>
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d104      	bne.n	8006dfe <USB_EPStartXfer+0xefc>
 8006df4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	029b      	lsls	r3, r3, #10
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	4313      	orrs	r3, r2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e3df      	b.n	80075e6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	78db      	ldrb	r3, [r3, #3]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	f040 8218 	bne.w	8007268 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 809d 	bne.w	8006f84 <USB_EPStartXfer+0x1082>
 8006e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e6e:	4413      	add	r3, r2
 8006e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	011a      	lsls	r2, r3, #4
 8006e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e86:	4413      	add	r3, r2
 8006e88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10c      	bne.n	8006ece <USB_EPStartXfer+0xfcc>
 8006eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e08f      	b.n	8006fee <USB_EPStartXfer+0x10ec>
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b3e      	cmp	r3, #62	; 0x3e
 8006edc:	d826      	bhi.n	8006f2c <USB_EPStartXfer+0x102a>
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <USB_EPStartXfer+0x100c>
 8006f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	029b      	lsls	r3, r3, #10
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	4313      	orrs	r3, r2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e060      	b.n	8006fee <USB_EPStartXfer+0x10ec>
 8006f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <USB_EPStartXfer+0x105a>
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f56:	3b01      	subs	r3, #1
 8006f58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	029b      	lsls	r3, r3, #10
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	e034      	b.n	8006fee <USB_EPStartXfer+0x10ec>
 8006f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d12c      	bne.n	8006fee <USB_EPStartXfer+0x10ec>
 8006f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fb8:	4413      	add	r3, r2
 8006fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	011a      	lsls	r2, r3, #4
 8006fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 809d 	bne.w	8007148 <USB_EPStartXfer+0x1246>
 800700e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800701c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702a:	b29b      	uxth	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007032:	4413      	add	r3, r2
 8007034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	011a      	lsls	r2, r3, #4
 8007046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800704a:	4413      	add	r3, r2
 800704c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007060:	b29a      	uxth	r2, r3
 8007062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10c      	bne.n	8007092 <USB_EPStartXfer+0x1190>
 8007078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007088:	b29a      	uxth	r2, r3
 800708a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800708e:	801a      	strh	r2, [r3, #0]
 8007090:	e088      	b.n	80071a4 <USB_EPStartXfer+0x12a2>
 8007092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b3e      	cmp	r3, #62	; 0x3e
 80070a0:	d826      	bhi.n	80070f0 <USB_EPStartXfer+0x11ee>
 80070a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <USB_EPStartXfer+0x11d0>
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	3301      	adds	r3, #1
 80070ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29a      	uxth	r2, r3
 80070da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070de:	b29b      	uxth	r3, r3
 80070e0:	029b      	lsls	r3, r3, #10
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	4313      	orrs	r3, r2
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	e059      	b.n	80071a4 <USB_EPStartXfer+0x12a2>
 80070f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <USB_EPStartXfer+0x121e>
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711a:	3b01      	subs	r3, #1
 800711c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29a      	uxth	r2, r3
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712c:	b29b      	uxth	r3, r3
 800712e:	029b      	lsls	r3, r3, #10
 8007130:	b29b      	uxth	r3, r3
 8007132:	4313      	orrs	r3, r2
 8007134:	b29b      	uxth	r3, r3
 8007136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713e:	b29a      	uxth	r2, r3
 8007140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	e02d      	b.n	80071a4 <USB_EPStartXfer+0x12a2>
 8007148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	785b      	ldrb	r3, [r3, #1]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d125      	bne.n	80071a4 <USB_EPStartXfer+0x12a2>
 8007158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007166:	b29b      	uxth	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800716e:	4413      	add	r3, r2
 8007170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	011a      	lsls	r2, r3, #4
 8007182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007186:	4413      	add	r3, r2
 8007188:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800718c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	b29a      	uxth	r2, r3
 800719e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8218 	beq.w	80075e6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80071da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <USB_EPStartXfer+0x12ec>
 80071e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10d      	bne.n	800720a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80071f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f040 81f5 	bne.w	80075e6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 81ee 	bne.w	80075e6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800720a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007230:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007262:	b29b      	uxth	r3, r3
 8007264:	8013      	strh	r3, [r2, #0]
 8007266:	e1be      	b.n	80075e6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	78db      	ldrb	r3, [r3, #3]
 8007274:	2b01      	cmp	r3, #1
 8007276:	f040 81b4 	bne.w	80075e2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800727a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	429a      	cmp	r2, r3
 8007294:	d917      	bls.n	80072c6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80072a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	619a      	str	r2, [r3, #24]
 80072c4:	e00e      	b.n	80072e4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80072c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80072d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2200      	movs	r2, #0
 80072e2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 8085 	bne.w	8007400 <USB_EPStartXfer+0x14fe>
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007312:	b29b      	uxth	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800731a:	4413      	add	r3, r2
 800731c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	011a      	lsls	r2, r3, #4
 800732e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007332:	4413      	add	r3, r2
 8007334:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800733c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007348:	b29a      	uxth	r2, r3
 800734a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10c      	bne.n	8007372 <USB_EPStartXfer+0x1470>
 8007358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	e077      	b.n	8007462 <USB_EPStartXfer+0x1560>
 8007372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007376:	2b3e      	cmp	r3, #62	; 0x3e
 8007378:	d81e      	bhi.n	80073b8 <USB_EPStartXfer+0x14b6>
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <USB_EPStartXfer+0x1498>
 8007390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007394:	3301      	adds	r3, #1
 8007396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800739a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	029b      	lsls	r3, r3, #10
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e054      	b.n	8007462 <USB_EPStartXfer+0x1560>
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <USB_EPStartXfer+0x14d6>
 80073ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d2:	3b01      	subs	r3, #1
 80073d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29a      	uxth	r2, r3
 80073e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	029b      	lsls	r3, r3, #10
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	4313      	orrs	r3, r2
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e030      	b.n	8007462 <USB_EPStartXfer+0x1560>
 8007400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d128      	bne.n	8007462 <USB_EPStartXfer+0x1560>
 8007410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800741e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742c:	b29b      	uxth	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007434:	4413      	add	r3, r2
 8007436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800743a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	011a      	lsls	r2, r3, #4
 8007448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800744c:	4413      	add	r3, r2
 800744e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007452:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f040 8085 	bne.w	800758c <USB_EPStartXfer+0x168a>
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749e:	b29b      	uxth	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074a6:	4413      	add	r3, r2
 80074a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	011a      	lsls	r2, r3, #4
 80074ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074be:	4413      	add	r3, r2
 80074c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074da:	801a      	strh	r2, [r3, #0]
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10c      	bne.n	80074fe <USB_EPStartXfer+0x15fc>
 80074e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074fa:	801a      	strh	r2, [r3, #0]
 80074fc:	e073      	b.n	80075e6 <USB_EPStartXfer+0x16e4>
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007502:	2b3e      	cmp	r3, #62	; 0x3e
 8007504:	d81e      	bhi.n	8007544 <USB_EPStartXfer+0x1642>
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750a:	085b      	lsrs	r3, r3, #1
 800750c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <USB_EPStartXfer+0x1624>
 800751c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007520:	3301      	adds	r3, #1
 8007522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007532:	b29b      	uxth	r3, r3
 8007534:	029b      	lsls	r3, r3, #10
 8007536:	b29b      	uxth	r3, r3
 8007538:	4313      	orrs	r3, r2
 800753a:	b29a      	uxth	r2, r3
 800753c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	e050      	b.n	80075e6 <USB_EPStartXfer+0x16e4>
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <USB_EPStartXfer+0x1662>
 800755a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800755e:	3b01      	subs	r3, #1
 8007560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29a      	uxth	r2, r3
 800756c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007570:	b29b      	uxth	r3, r3
 8007572:	029b      	lsls	r3, r3, #10
 8007574:	b29b      	uxth	r3, r3
 8007576:	4313      	orrs	r3, r2
 8007578:	b29b      	uxth	r3, r3
 800757a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007582:	b29a      	uxth	r2, r3
 8007584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007588:	801a      	strh	r2, [r3, #0]
 800758a:	e02c      	b.n	80075e6 <USB_EPStartXfer+0x16e4>
 800758c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d124      	bne.n	80075e6 <USB_EPStartXfer+0x16e4>
 800759c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075b2:	4413      	add	r3, r2
 80075b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	011a      	lsls	r2, r3, #4
 80075c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d8:	b29a      	uxth	r2, r3
 80075da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	e001      	b.n	80075e6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e03a      	b.n	800765c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007610:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007614:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007618:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800761c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007620:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007624:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	441a      	add	r2, r3
 8007642:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d020      	beq.n	80076ba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	81bb      	strh	r3, [r7, #12]
 8007690:	89bb      	ldrh	r3, [r7, #12]
 8007692:	f083 0310 	eor.w	r3, r3, #16
 8007696:	81bb      	strh	r3, [r7, #12]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	441a      	add	r2, r3
 80076a2:	89bb      	ldrh	r3, [r7, #12]
 80076a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	8013      	strh	r3, [r2, #0]
 80076b8:	e01f      	b.n	80076fa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d0:	81fb      	strh	r3, [r7, #14]
 80076d2:	89fb      	ldrh	r3, [r7, #14]
 80076d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076d8:	81fb      	strh	r3, [r7, #14]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	441a      	add	r2, r3
 80076e4:	89fb      	ldrh	r3, [r7, #14]
 80076e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	7b1b      	ldrb	r3, [r3, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 809d 	bne.w	8007856 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d04c      	beq.n	80077be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	823b      	strh	r3, [r7, #16]
 8007732:	8a3b      	ldrh	r3, [r7, #16]
 8007734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01b      	beq.n	8007774 <USB_EPClearStall+0x6c>
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	81fb      	strh	r3, [r7, #14]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	441a      	add	r2, r3
 800775e:	89fb      	ldrh	r3, [r7, #14]
 8007760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007770:	b29b      	uxth	r3, r3
 8007772:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	78db      	ldrb	r3, [r3, #3]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d06c      	beq.n	8007856 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007792:	81bb      	strh	r3, [r7, #12]
 8007794:	89bb      	ldrh	r3, [r7, #12]
 8007796:	f083 0320 	eor.w	r3, r3, #32
 800779a:	81bb      	strh	r3, [r7, #12]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	89bb      	ldrh	r3, [r7, #12]
 80077a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	8013      	strh	r3, [r2, #0]
 80077bc:	e04b      	b.n	8007856 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	82fb      	strh	r3, [r7, #22]
 80077cc:	8afb      	ldrh	r3, [r7, #22]
 80077ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d01b      	beq.n	800780e <USB_EPClearStall+0x106>
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ec:	82bb      	strh	r3, [r7, #20]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	441a      	add	r2, r3
 80077f8:	8abb      	ldrh	r3, [r7, #20]
 80077fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780a:	b29b      	uxth	r3, r3
 800780c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007824:	827b      	strh	r3, [r7, #18]
 8007826:	8a7b      	ldrh	r3, [r7, #18]
 8007828:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800782c:	827b      	strh	r3, [r7, #18]
 800782e:	8a7b      	ldrh	r3, [r7, #18]
 8007830:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007834:	827b      	strh	r3, [r7, #18]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	441a      	add	r2, r3
 8007840:	8a7b      	ldrh	r3, [r7, #18]
 8007842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800784e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007852:	b29b      	uxth	r3, r3
 8007854:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2280      	movs	r2, #128	; 0x80
 800787a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078b4:	68fb      	ldr	r3, [r7, #12]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b08b      	sub	sp, #44	; 0x2c
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	4611      	mov	r1, r2
 80078ce:	461a      	mov	r2, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	80fb      	strh	r3, [r7, #6]
 80078d4:	4613      	mov	r3, r2
 80078d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80078d8:	88bb      	ldrh	r3, [r7, #4]
 80078da:	3301      	adds	r3, #1
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	005a      	lsls	r2, r3, #1
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
 80078fa:	e01e      	b.n	800793a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3301      	adds	r3, #1
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	b21a      	sxth	r2, r3
 800790c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007910:	4313      	orrs	r3, r2
 8007912:	b21b      	sxth	r3, r3
 8007914:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	8a7a      	ldrh	r2, [r7, #18]
 800791a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	3302      	adds	r3, #2
 8007920:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	3302      	adds	r3, #2
 8007926:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	3301      	adds	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	3301      	adds	r3, #1
 8007932:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	3b01      	subs	r3, #1
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1dd      	bne.n	80078fc <USB_WritePMA+0x3a>
  }
}
 8007940:	bf00      	nop
 8007942:	bf00      	nop
 8007944:	372c      	adds	r7, #44	; 0x2c
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800794e:	b480      	push	{r7}
 8007950:	b08b      	sub	sp, #44	; 0x2c
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	4611      	mov	r1, r2
 800795a:	461a      	mov	r2, r3
 800795c:	460b      	mov	r3, r1
 800795e:	80fb      	strh	r3, [r7, #6]
 8007960:	4613      	mov	r3, r2
 8007962:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007964:	88bb      	ldrh	r3, [r7, #4]
 8007966:	085b      	lsrs	r3, r3, #1
 8007968:	b29b      	uxth	r3, r3
 800796a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007974:	88fb      	ldrh	r3, [r7, #6]
 8007976:	005a      	lsls	r2, r3, #1
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007980:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
 8007986:	e01b      	b.n	80079c0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	3302      	adds	r3, #2
 8007994:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	b2da      	uxtb	r2, r3
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	3301      	adds	r3, #1
 80079a2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3301      	adds	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	3302      	adds	r3, #2
 80079b8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	3b01      	subs	r3, #1
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e0      	bne.n	8007988 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80079c6:	88bb      	ldrh	r3, [r7, #4]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	701a      	strb	r2, [r3, #0]
  }
}
 80079e2:	bf00      	nop
 80079e4:	372c      	adds	r7, #44	; 0x2c
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7c1b      	ldrb	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d115      	bne.n	8007a32 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	2181      	movs	r1, #129	; 0x81
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 feb9 	bl	8009786 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a1e:	2202      	movs	r2, #2
 8007a20:	2101      	movs	r1, #1
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 feaf 	bl	8009786 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007a30:	e012      	b.n	8007a58 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a32:	2340      	movs	r3, #64	; 0x40
 8007a34:	2202      	movs	r2, #2
 8007a36:	2181      	movs	r1, #129	; 0x81
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fea4 	bl	8009786 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a44:	2340      	movs	r3, #64	; 0x40
 8007a46:	2202      	movs	r2, #2
 8007a48:	2101      	movs	r1, #1
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 fe9b 	bl	8009786 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a58:	2308      	movs	r3, #8
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	2182      	movs	r1, #130	; 0x82
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fe91 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a6a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a6e:	f001 ffb1 	bl	80099d4 <USBD_static_malloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e026      	b.n	8007ad8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7c1b      	ldrb	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d109      	bne.n	8007ac8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007abe:	2101      	movs	r1, #1
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 ff51 	bl	8009968 <USBD_LL_PrepareReceive>
 8007ac6:	e007      	b.n	8007ad8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ace:	2340      	movs	r3, #64	; 0x40
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 ff48 	bl	8009968 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007af2:	2181      	movs	r1, #129	; 0x81
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 fe6c 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b00:	2101      	movs	r1, #1
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 fe65 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b10:	2182      	movs	r1, #130	; 0x82
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 fe5d 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00e      	beq.n	8007b46 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 ff59 	bl	80099f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d039      	beq.n	8007bee <USBD_CDC_Setup+0x9e>
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d17f      	bne.n	8007c7e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d029      	beq.n	8007bda <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da11      	bge.n	8007bb4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007b9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	88d2      	ldrh	r2, [r2, #6]
 8007ba2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ba4:	6939      	ldr	r1, [r7, #16]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88db      	ldrh	r3, [r3, #6]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 fa14 	bl	8008fda <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007bb2:	e06b      	b.n	8007c8c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	785a      	ldrb	r2, [r3, #1]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88db      	ldrh	r3, [r3, #6]
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bca:	6939      	ldr	r1, [r7, #16]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	88db      	ldrh	r3, [r3, #6]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fa2f 	bl	8009036 <USBD_CtlPrepareRx>
      break;
 8007bd8:	e058      	b.n	8007c8c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	7850      	ldrb	r0, [r2, #1]
 8007be6:	2200      	movs	r2, #0
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	4798      	blx	r3
      break;
 8007bec:	e04e      	b.n	8007c8c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	785b      	ldrb	r3, [r3, #1]
 8007bf2:	2b0b      	cmp	r3, #11
 8007bf4:	d02e      	beq.n	8007c54 <USBD_CDC_Setup+0x104>
 8007bf6:	2b0b      	cmp	r3, #11
 8007bf8:	dc38      	bgt.n	8007c6c <USBD_CDC_Setup+0x11c>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <USBD_CDC_Setup+0xb4>
 8007bfe:	2b0a      	cmp	r3, #10
 8007c00:	d014      	beq.n	8007c2c <USBD_CDC_Setup+0xdc>
 8007c02:	e033      	b.n	8007c6c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d107      	bne.n	8007c1e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	2202      	movs	r2, #2
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 f9df 	bl	8008fda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c1c:	e02e      	b.n	8007c7c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f96f 	bl	8008f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	75fb      	strb	r3, [r7, #23]
          break;
 8007c2a:	e027      	b.n	8007c7c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d107      	bne.n	8007c46 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c36:	f107 030f 	add.w	r3, r7, #15
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 f9cb 	bl	8008fda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c44:	e01a      	b.n	8007c7c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f95b 	bl	8008f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	75fb      	strb	r3, [r7, #23]
          break;
 8007c52:	e013      	b.n	8007c7c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d00d      	beq.n	8007c7a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f94f 	bl	8008f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c66:	2302      	movs	r3, #2
 8007c68:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c6a:	e006      	b.n	8007c7a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 f948 	bl	8008f04 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c74:	2302      	movs	r3, #2
 8007c76:	75fb      	strb	r3, [r7, #23]
          break;
 8007c78:	e000      	b.n	8007c7c <USBD_CDC_Setup+0x12c>
          break;
 8007c7a:	bf00      	nop
      }
      break;
 8007c7c:	e006      	b.n	8007c8c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 f93f 	bl	8008f04 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c86:	2302      	movs	r3, #2
 8007c88:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8a:	bf00      	nop
  }

  return ret;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d03a      	beq.n	8007d32 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	331c      	adds	r3, #28
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d029      	beq.n	8007d26 <USBD_CDC_DataIn+0x90>
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	331c      	adds	r3, #28
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	78f9      	ldrb	r1, [r7, #3]
 8007ce6:	68b8      	ldr	r0, [r7, #8]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4403      	add	r3, r0
 8007cf2:	3320      	adds	r3, #32
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d110      	bne.n	8007d26 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	331c      	adds	r3, #28
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d18:	78f9      	ldrb	r1, [r7, #3]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fdff 	bl	8009922 <USBD_LL_Transmit>
 8007d24:	e003      	b.n	8007d2e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e000      	b.n	8007d34 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007d32:	2302      	movs	r3, #2
  }
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 fe2a 	bl	80099ae <USBD_LL_GetRxDataSize>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00d      	beq.n	8007d88 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d80:	4611      	mov	r1, r2
 8007d82:	4798      	blx	r3

    return USBD_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	e000      	b.n	8007d8a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007d88:	2302      	movs	r3, #2
  }
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d015      	beq.n	8007dd8 <USBD_CDC_EP0_RxReady+0x46>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007db2:	2bff      	cmp	r3, #255	; 0xff
 8007db4:	d010      	beq.n	8007dd8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007dc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	22ff      	movs	r2, #255	; 0xff
 8007dd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2243      	movs	r2, #67	; 0x43
 8007df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20000094 	.word	0x20000094

08007e04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2243      	movs	r2, #67	; 0x43
 8007e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007e12:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000050 	.word	0x20000050

08007e24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2243      	movs	r2, #67	; 0x43
 8007e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007e32:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	200000d8 	.word	0x200000d8

08007e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	220a      	movs	r2, #10
 8007e50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e52:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b087      	sub	sp, #28
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007eb0:	88fa      	ldrh	r2, [r7, #6]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01c      	beq.n	8007f42 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d115      	bne.n	8007f3e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2181      	movs	r1, #129	; 0x81
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fcf4 	bl	8009922 <USBD_LL_Transmit>

      return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e002      	b.n	8007f44 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e000      	b.n	8007f44 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007f42:	2302      	movs	r3, #2
  }
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d017      	beq.n	8007f96 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	7c1b      	ldrb	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f78:	2101      	movs	r1, #1
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 fcf4 	bl	8009968 <USBD_LL_PrepareReceive>
 8007f80:	e007      	b.n	8007f92 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f88:	2340      	movs	r3, #64	; 0x40
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fceb 	bl	8009968 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	e000      	b.n	8007f98 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f96:	2302      	movs	r3, #2
  }
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e01a      	b.n	8007fee <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	79fa      	ldrb	r2, [r7, #7]
 8007fe4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f001 fb58 	bl	800969c <USBD_LL_Init>

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d006      	beq.n	8008018 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]
 8008016:	e001      	b.n	800801c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008018:	2302      	movs	r3, #2
 800801a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 fb8c 	bl	8009750 <USBD_LL_Start>

  return USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008064:	2302      	movs	r3, #2
 8008066:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00c      	beq.n	800808c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	78fa      	ldrb	r2, [r7, #3]
 800807c:	4611      	mov	r1, r2
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	4611      	mov	r1, r2
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3

  return USBD_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fedb 	bl	8008e8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d016      	beq.n	8008126 <USBD_LL_SetupStage+0x6a>
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d81c      	bhi.n	8008136 <USBD_LL_SetupStage+0x7a>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <USBD_LL_SetupStage+0x4a>
 8008100:	2b01      	cmp	r3, #1
 8008102:	d008      	beq.n	8008116 <USBD_LL_SetupStage+0x5a>
 8008104:	e017      	b.n	8008136 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9ce 	bl	80084b0 <USBD_StdDevReq>
      break;
 8008114:	e01a      	b.n	800814c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa30 	bl	8008584 <USBD_StdItfReq>
      break;
 8008124:	e012      	b.n	800814c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fa70 	bl	8008614 <USBD_StdEPReq>
      break;
 8008134:	e00a      	b.n	800814c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800813c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008140:	b2db      	uxtb	r3, r3
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 fb63 	bl	8009810 <USBD_LL_StallEP>
      break;
 800814a:	bf00      	nop
  }

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b086      	sub	sp, #24
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	460b      	mov	r3, r1
 8008160:	607a      	str	r2, [r7, #4]
 8008162:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d14b      	bne.n	8008202 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008170:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008178:	2b03      	cmp	r3, #3
 800817a:	d134      	bne.n	80081e6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	429a      	cmp	r2, r3
 8008186:	d919      	bls.n	80081bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800819e:	429a      	cmp	r2, r3
 80081a0:	d203      	bcs.n	80081aa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	e002      	b.n	80081b0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	461a      	mov	r2, r3
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 ff5c 	bl	8009072 <USBD_CtlContinueRx>
 80081ba:	e038      	b.n	800822e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00a      	beq.n	80081de <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d105      	bne.n	80081de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 ff59 	bl	8009096 <USBD_CtlSendStatus>
 80081e4:	e023      	b.n	800822e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081ec:	2b05      	cmp	r3, #5
 80081ee:	d11e      	bne.n	800822e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081f8:	2100      	movs	r1, #0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f001 fb08 	bl	8009810 <USBD_LL_StallEP>
 8008200:	e015      	b.n	800822e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00d      	beq.n	800822a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008214:	2b03      	cmp	r3, #3
 8008216:	d108      	bne.n	800822a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	7afa      	ldrb	r2, [r7, #11]
 8008222:	4611      	mov	r1, r2
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	4798      	blx	r3
 8008228:	e001      	b.n	800822e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800822a:	2302      	movs	r3, #2
 800822c:	e000      	b.n	8008230 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	460b      	mov	r3, r1
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d17f      	bne.n	800834c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3314      	adds	r3, #20
 8008250:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008258:	2b02      	cmp	r3, #2
 800825a:	d15c      	bne.n	8008316 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	429a      	cmp	r2, r3
 8008266:	d915      	bls.n	8008294 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	1ad2      	subs	r2, r2, r3
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	b29b      	uxth	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fec6 	bl	8009012 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008286:	2300      	movs	r3, #0
 8008288:	2200      	movs	r2, #0
 800828a:	2100      	movs	r1, #0
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f001 fb6b 	bl	8009968 <USBD_LL_PrepareReceive>
 8008292:	e04e      	b.n	8008332 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	6912      	ldr	r2, [r2, #16]
 800829c:	fbb3 f1f2 	udiv	r1, r3, r2
 80082a0:	fb01 f202 	mul.w	r2, r1, r2
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d11c      	bne.n	80082e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d316      	bcc.n	80082e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d20f      	bcs.n	80082e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082c4:	2200      	movs	r2, #0
 80082c6:	2100      	movs	r1, #0
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 fea2 	bl	8009012 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082d6:	2300      	movs	r3, #0
 80082d8:	2200      	movs	r2, #0
 80082da:	2100      	movs	r1, #0
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f001 fb43 	bl	8009968 <USBD_LL_PrepareReceive>
 80082e2:	e026      	b.n	8008332 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d105      	bne.n	8008306 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008306:	2180      	movs	r1, #128	; 0x80
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f001 fa81 	bl	8009810 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 fed4 	bl	80090bc <USBD_CtlReceiveStatus>
 8008314:	e00d      	b.n	8008332 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800831c:	2b04      	cmp	r3, #4
 800831e:	d004      	beq.n	800832a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008326:	2b00      	cmp	r3, #0
 8008328:	d103      	bne.n	8008332 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800832a:	2180      	movs	r1, #128	; 0x80
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f001 fa6f 	bl	8009810 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008338:	2b01      	cmp	r3, #1
 800833a:	d11d      	bne.n	8008378 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f7ff fe80 	bl	8008042 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800834a:	e015      	b.n	8008378 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00d      	beq.n	8008374 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800835e:	2b03      	cmp	r3, #3
 8008360:	d108      	bne.n	8008374 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	7afa      	ldrb	r2, [r7, #11]
 800836c:	4611      	mov	r1, r2
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	4798      	blx	r3
 8008372:	e001      	b.n	8008378 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008374:	2302      	movs	r3, #2
 8008376:	e000      	b.n	800837a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800838a:	2340      	movs	r3, #64	; 0x40
 800838c:	2200      	movs	r2, #0
 800838e:	2100      	movs	r1, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f9f8 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2240      	movs	r2, #64	; 0x40
 80083a2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083a6:	2340      	movs	r3, #64	; 0x40
 80083a8:	2200      	movs	r2, #0
 80083aa:	2180      	movs	r1, #128	; 0x80
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 f9ea 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2240      	movs	r2, #64	; 0x40
 80083bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6852      	ldr	r2, [r2, #4]
 80083f2:	b2d2      	uxtb	r2, r2
 80083f4:	4611      	mov	r1, r2
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
  }

  return USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	78fa      	ldrb	r2, [r7, #3]
 8008414:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2204      	movs	r2, #4
 800843c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845c:	2b04      	cmp	r3, #4
 800845e:	d105      	bne.n	800846c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	2b03      	cmp	r3, #3
 800848a:	d10b      	bne.n	80084a4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	d005      	beq.n	80084d6 <USBD_StdDevReq+0x26>
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d84f      	bhi.n	800856e <USBD_StdDevReq+0xbe>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d009      	beq.n	80084e6 <USBD_StdDevReq+0x36>
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d14b      	bne.n	800856e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3
      break;
 80084e4:	e048      	b.n	8008578 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	785b      	ldrb	r3, [r3, #1]
 80084ea:	2b09      	cmp	r3, #9
 80084ec:	d839      	bhi.n	8008562 <USBD_StdDevReq+0xb2>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USBD_StdDevReq+0x44>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008545 	.word	0x08008545
 80084f8:	08008559 	.word	0x08008559
 80084fc:	08008563 	.word	0x08008563
 8008500:	0800854f 	.word	0x0800854f
 8008504:	08008563 	.word	0x08008563
 8008508:	08008527 	.word	0x08008527
 800850c:	0800851d 	.word	0x0800851d
 8008510:	08008563 	.word	0x08008563
 8008514:	0800853b 	.word	0x0800853b
 8008518:	08008531 	.word	0x08008531
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f9dc 	bl	80088dc <USBD_GetDescriptor>
          break;
 8008524:	e022      	b.n	800856c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fb3f 	bl	8008bac <USBD_SetAddress>
          break;
 800852e:	e01d      	b.n	800856c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fb7e 	bl	8008c34 <USBD_SetConfig>
          break;
 8008538:	e018      	b.n	800856c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fc07 	bl	8008d50 <USBD_GetConfig>
          break;
 8008542:	e013      	b.n	800856c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fc37 	bl	8008dba <USBD_GetStatus>
          break;
 800854c:	e00e      	b.n	800856c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fc65 	bl	8008e20 <USBD_SetFeature>
          break;
 8008556:	e009      	b.n	800856c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fc74 	bl	8008e48 <USBD_ClrFeature>
          break;
 8008560:	e004      	b.n	800856c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fccd 	bl	8008f04 <USBD_CtlError>
          break;
 800856a:	bf00      	nop
      }
      break;
 800856c:	e004      	b.n	8008578 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fcc7 	bl	8008f04 <USBD_CtlError>
      break;
 8008576:	bf00      	nop
  }

  return ret;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop

08008584 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800859a:	2b40      	cmp	r3, #64	; 0x40
 800859c:	d005      	beq.n	80085aa <USBD_StdItfReq+0x26>
 800859e:	2b40      	cmp	r3, #64	; 0x40
 80085a0:	d82e      	bhi.n	8008600 <USBD_StdItfReq+0x7c>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <USBD_StdItfReq+0x26>
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d12a      	bne.n	8008600 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b0:	3b01      	subs	r3, #1
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d81d      	bhi.n	80085f2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	889b      	ldrh	r3, [r3, #4]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d813      	bhi.n	80085e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	88db      	ldrh	r3, [r3, #6]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d110      	bne.n	80085fc <USBD_StdItfReq+0x78>
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10d      	bne.n	80085fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fd58 	bl	8009096 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085e6:	e009      	b.n	80085fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fc8a 	bl	8008f04 <USBD_CtlError>
          break;
 80085f0:	e004      	b.n	80085fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fc85 	bl	8008f04 <USBD_CtlError>
          break;
 80085fa:	e000      	b.n	80085fe <USBD_StdItfReq+0x7a>
          break;
 80085fc:	bf00      	nop
      }
      break;
 80085fe:	e004      	b.n	800860a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fc7e 	bl	8008f04 <USBD_CtlError>
      break;
 8008608:	bf00      	nop
  }

  return USBD_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	889b      	ldrh	r3, [r3, #4]
 8008626:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d007      	beq.n	8008644 <USBD_StdEPReq+0x30>
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	f200 8146 	bhi.w	80088c6 <USBD_StdEPReq+0x2b2>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00a      	beq.n	8008654 <USBD_StdEPReq+0x40>
 800863e:	2b20      	cmp	r3, #32
 8008640:	f040 8141 	bne.w	80088c6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
      break;
 8008652:	e13d      	b.n	80088d0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800865c:	2b20      	cmp	r3, #32
 800865e:	d10a      	bne.n	8008676 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	e12d      	b.n	80088d2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	2b03      	cmp	r3, #3
 800867c:	d007      	beq.n	800868e <USBD_StdEPReq+0x7a>
 800867e:	2b03      	cmp	r3, #3
 8008680:	f300 811b 	bgt.w	80088ba <USBD_StdEPReq+0x2a6>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d072      	beq.n	800876e <USBD_StdEPReq+0x15a>
 8008688:	2b01      	cmp	r3, #1
 800868a:	d03a      	beq.n	8008702 <USBD_StdEPReq+0xee>
 800868c:	e115      	b.n	80088ba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008694:	2b02      	cmp	r3, #2
 8008696:	d002      	beq.n	800869e <USBD_StdEPReq+0x8a>
 8008698:	2b03      	cmp	r3, #3
 800869a:	d015      	beq.n	80086c8 <USBD_StdEPReq+0xb4>
 800869c:	e02b      	b.n	80086f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00c      	beq.n	80086be <USBD_StdEPReq+0xaa>
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b80      	cmp	r3, #128	; 0x80
 80086a8:	d009      	beq.n	80086be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 f8ae 	bl	8009810 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086b4:	2180      	movs	r1, #128	; 0x80
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 f8aa 	bl	8009810 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086bc:	e020      	b.n	8008700 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fc1f 	bl	8008f04 <USBD_CtlError>
              break;
 80086c6:	e01b      	b.n	8008700 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	885b      	ldrh	r3, [r3, #2]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10e      	bne.n	80086ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <USBD_StdEPReq+0xda>
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b80      	cmp	r3, #128	; 0x80
 80086da:	d008      	beq.n	80086ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	88db      	ldrh	r3, [r3, #6]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 f891 	bl	8009810 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fcd1 	bl	8009096 <USBD_CtlSendStatus>

              break;
 80086f4:	e004      	b.n	8008700 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fc03 	bl	8008f04 <USBD_CtlError>
              break;
 80086fe:	bf00      	nop
          }
          break;
 8008700:	e0e0      	b.n	80088c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008708:	2b02      	cmp	r3, #2
 800870a:	d002      	beq.n	8008712 <USBD_StdEPReq+0xfe>
 800870c:	2b03      	cmp	r3, #3
 800870e:	d015      	beq.n	800873c <USBD_StdEPReq+0x128>
 8008710:	e026      	b.n	8008760 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00c      	beq.n	8008732 <USBD_StdEPReq+0x11e>
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	2b80      	cmp	r3, #128	; 0x80
 800871c:	d009      	beq.n	8008732 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 f874 	bl	8009810 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008728:	2180      	movs	r1, #128	; 0x80
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 f870 	bl	8009810 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008730:	e01c      	b.n	800876c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbe5 	bl	8008f04 <USBD_CtlError>
              break;
 800873a:	e017      	b.n	800876c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	885b      	ldrh	r3, [r3, #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d112      	bne.n	800876a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 f87b 	bl	800984e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc9c 	bl	8009096 <USBD_CtlSendStatus>
              }
              break;
 800875e:	e004      	b.n	800876a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fbce 	bl	8008f04 <USBD_CtlError>
              break;
 8008768:	e000      	b.n	800876c <USBD_StdEPReq+0x158>
              break;
 800876a:	bf00      	nop
          }
          break;
 800876c:	e0aa      	b.n	80088c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008774:	2b02      	cmp	r3, #2
 8008776:	d002      	beq.n	800877e <USBD_StdEPReq+0x16a>
 8008778:	2b03      	cmp	r3, #3
 800877a:	d032      	beq.n	80087e2 <USBD_StdEPReq+0x1ce>
 800877c:	e097      	b.n	80088ae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d007      	beq.n	8008794 <USBD_StdEPReq+0x180>
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d004      	beq.n	8008794 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fbb9 	bl	8008f04 <USBD_CtlError>
                break;
 8008792:	e091      	b.n	80088b8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	da0b      	bge.n	80087b4 <USBD_StdEPReq+0x1a0>
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	3310      	adds	r3, #16
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	3304      	adds	r3, #4
 80087b2:	e00b      	b.n	80087cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	3304      	adds	r3, #4
 80087cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2202      	movs	r2, #2
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fbfd 	bl	8008fda <USBD_CtlSendData>
              break;
 80087e0:	e06a      	b.n	80088b8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da11      	bge.n	800880e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	f003 020f 	and.w	r2, r3, #15
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	3318      	adds	r3, #24
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d117      	bne.n	8008834 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb7c 	bl	8008f04 <USBD_CtlError>
                  break;
 800880c:	e054      	b.n	80088b8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	f003 020f 	and.w	r2, r3, #15
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fb69 	bl	8008f04 <USBD_CtlError>
                  break;
 8008832:	e041      	b.n	80088b8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008838:	2b00      	cmp	r3, #0
 800883a:	da0b      	bge.n	8008854 <USBD_StdEPReq+0x240>
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	3310      	adds	r3, #16
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	4413      	add	r3, r2
 8008850:	3304      	adds	r3, #4
 8008852:	e00b      	b.n	800886c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	4413      	add	r3, r2
 800886a:	3304      	adds	r3, #4
 800886c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <USBD_StdEPReq+0x266>
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b80      	cmp	r3, #128	; 0x80
 8008878:	d103      	bne.n	8008882 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	e00e      	b.n	80088a0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 f800 	bl	800988c <USBD_LL_IsStallEP>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2201      	movs	r2, #1
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	e002      	b.n	80088a0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2202      	movs	r2, #2
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fb97 	bl	8008fda <USBD_CtlSendData>
              break;
 80088ac:	e004      	b.n	80088b8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fb27 	bl	8008f04 <USBD_CtlError>
              break;
 80088b6:	bf00      	nop
          }
          break;
 80088b8:	e004      	b.n	80088c4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fb21 	bl	8008f04 <USBD_CtlError>
          break;
 80088c2:	bf00      	nop
      }
      break;
 80088c4:	e004      	b.n	80088d0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fb1b 	bl	8008f04 <USBD_CtlError>
      break;
 80088ce:	bf00      	nop
  }

  return ret;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	0a1b      	lsrs	r3, r3, #8
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	2b06      	cmp	r3, #6
 80088fe:	f200 8128 	bhi.w	8008b52 <USBD_GetDescriptor+0x276>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <USBD_GetDescriptor+0x2c>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008925 	.word	0x08008925
 800890c:	0800893d 	.word	0x0800893d
 8008910:	0800897d 	.word	0x0800897d
 8008914:	08008b53 	.word	0x08008b53
 8008918:	08008b53 	.word	0x08008b53
 800891c:	08008af3 	.word	0x08008af3
 8008920:	08008b1f 	.word	0x08008b1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7c12      	ldrb	r2, [r2, #16]
 8008930:	f107 0108 	add.w	r1, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
      break;
 800893a:	e112      	b.n	8008b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	7c1b      	ldrb	r3, [r3, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10d      	bne.n	8008960 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894c:	f107 0208 	add.w	r2, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3301      	adds	r3, #1
 800895a:	2202      	movs	r2, #2
 800895c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800895e:	e100      	b.n	8008b62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	f107 0208 	add.w	r2, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3301      	adds	r3, #1
 8008976:	2202      	movs	r2, #2
 8008978:	701a      	strb	r2, [r3, #0]
      break;
 800897a:	e0f2      	b.n	8008b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	885b      	ldrh	r3, [r3, #2]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b05      	cmp	r3, #5
 8008984:	f200 80ac 	bhi.w	8008ae0 <USBD_GetDescriptor+0x204>
 8008988:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <USBD_GetDescriptor+0xb4>)
 800898a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898e:	bf00      	nop
 8008990:	080089a9 	.word	0x080089a9
 8008994:	080089dd 	.word	0x080089dd
 8008998:	08008a11 	.word	0x08008a11
 800899c:	08008a45 	.word	0x08008a45
 80089a0:	08008a79 	.word	0x08008a79
 80089a4:	08008aad 	.word	0x08008aad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7c12      	ldrb	r2, [r2, #16]
 80089c0:	f107 0108 	add.w	r1, r7, #8
 80089c4:	4610      	mov	r0, r2
 80089c6:	4798      	blx	r3
 80089c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ca:	e091      	b.n	8008af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa98 	bl	8008f04 <USBD_CtlError>
            err++;
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	3301      	adds	r3, #1
 80089d8:	72fb      	strb	r3, [r7, #11]
          break;
 80089da:	e089      	b.n	8008af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	7c12      	ldrb	r2, [r2, #16]
 80089f4:	f107 0108 	add.w	r1, r7, #8
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089fe:	e077      	b.n	8008af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa7e 	bl	8008f04 <USBD_CtlError>
            err++;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a0e:	e06f      	b.n	8008af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00b      	beq.n	8008a34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	7c12      	ldrb	r2, [r2, #16]
 8008a28:	f107 0108 	add.w	r1, r7, #8
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a32:	e05d      	b.n	8008af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fa64 	bl	8008f04 <USBD_CtlError>
            err++;
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	72fb      	strb	r3, [r7, #11]
          break;
 8008a42:	e055      	b.n	8008af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7c12      	ldrb	r2, [r2, #16]
 8008a5c:	f107 0108 	add.w	r1, r7, #8
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a66:	e043      	b.n	8008af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa4a 	bl	8008f04 <USBD_CtlError>
            err++;
 8008a70:	7afb      	ldrb	r3, [r7, #11]
 8008a72:	3301      	adds	r3, #1
 8008a74:	72fb      	strb	r3, [r7, #11]
          break;
 8008a76:	e03b      	b.n	8008af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	7c12      	ldrb	r2, [r2, #16]
 8008a90:	f107 0108 	add.w	r1, r7, #8
 8008a94:	4610      	mov	r0, r2
 8008a96:	4798      	blx	r3
 8008a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a9a:	e029      	b.n	8008af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fa30 	bl	8008f04 <USBD_CtlError>
            err++;
 8008aa4:	7afb      	ldrb	r3, [r7, #11]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8008aaa:	e021      	b.n	8008af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	7c12      	ldrb	r2, [r2, #16]
 8008ac4:	f107 0108 	add.w	r1, r7, #8
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4798      	blx	r3
 8008acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ace:	e00f      	b.n	8008af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fa16 	bl	8008f04 <USBD_CtlError>
            err++;
 8008ad8:	7afb      	ldrb	r3, [r7, #11]
 8008ada:	3301      	adds	r3, #1
 8008adc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ade:	e007      	b.n	8008af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa0e 	bl	8008f04 <USBD_CtlError>
          err++;
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
 8008aea:	3301      	adds	r3, #1
 8008aec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008aee:	e038      	b.n	8008b62 <USBD_GetDescriptor+0x286>
 8008af0:	e037      	b.n	8008b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7c1b      	ldrb	r3, [r3, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	f107 0208 	add.w	r2, r7, #8
 8008b06:	4610      	mov	r0, r2
 8008b08:	4798      	blx	r3
 8008b0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b0c:	e029      	b.n	8008b62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f9f7 	bl	8008f04 <USBD_CtlError>
        err++;
 8008b16:	7afb      	ldrb	r3, [r7, #11]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b1c:	e021      	b.n	8008b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	7c1b      	ldrb	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10d      	bne.n	8008b42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2e:	f107 0208 	add.w	r2, r7, #8
 8008b32:	4610      	mov	r0, r2
 8008b34:	4798      	blx	r3
 8008b36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	2207      	movs	r2, #7
 8008b3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b40:	e00f      	b.n	8008b62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f9dd 	bl	8008f04 <USBD_CtlError>
        err++;
 8008b4a:	7afb      	ldrb	r3, [r7, #11]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b50:	e007      	b.n	8008b62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f9d5 	bl	8008f04 <USBD_CtlError>
      err++;
 8008b5a:	7afb      	ldrb	r3, [r7, #11]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b60:	bf00      	nop
  }

  if (err != 0U)
 8008b62:	7afb      	ldrb	r3, [r7, #11]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d11c      	bne.n	8008ba2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b68:	893b      	ldrh	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d011      	beq.n	8008b92 <USBD_GetDescriptor+0x2b6>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	88db      	ldrh	r3, [r3, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00d      	beq.n	8008b92 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	88da      	ldrh	r2, [r3, #6]
 8008b7a:	893b      	ldrh	r3, [r7, #8]
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	bf28      	it	cs
 8008b80:	4613      	movcs	r3, r2
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b86:	893b      	ldrh	r3, [r7, #8]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	68f9      	ldr	r1, [r7, #12]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fa24 	bl	8008fda <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	88db      	ldrh	r3, [r3, #6]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa7b 	bl	8009096 <USBD_CtlSendStatus>
 8008ba0:	e000      	b.n	8008ba4 <USBD_GetDescriptor+0x2c8>
    return;
 8008ba2:	bf00      	nop
    }
  }
}
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop

08008bac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	889b      	ldrh	r3, [r3, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d130      	bne.n	8008c20 <USBD_SetAddress+0x74>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	88db      	ldrh	r3, [r3, #6]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d12c      	bne.n	8008c20 <USBD_SetAddress+0x74>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	885b      	ldrh	r3, [r3, #2]
 8008bca:	2b7f      	cmp	r3, #127	; 0x7f
 8008bcc:	d828      	bhi.n	8008c20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	885b      	ldrh	r3, [r3, #2]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d104      	bne.n	8008bee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f98c 	bl	8008f04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bec:	e01d      	b.n	8008c2a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7bfa      	ldrb	r2, [r7, #15]
 8008bf2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fe72 	bl	80098e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fa48 	bl	8009096 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c14:	e009      	b.n	8008c2a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1e:	e004      	b.n	8008c2a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f96e 	bl	8008f04 <USBD_CtlError>
  }
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	885b      	ldrh	r3, [r3, #2]
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	4b41      	ldr	r3, [pc, #260]	; (8008d4c <USBD_SetConfig+0x118>)
 8008c46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c48:	4b40      	ldr	r3, [pc, #256]	; (8008d4c <USBD_SetConfig+0x118>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d904      	bls.n	8008c5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f956 	bl	8008f04 <USBD_CtlError>
 8008c58:	e075      	b.n	8008d46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d002      	beq.n	8008c6a <USBD_SetConfig+0x36>
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d023      	beq.n	8008cb0 <USBD_SetConfig+0x7c>
 8008c68:	e062      	b.n	8008d30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c6a:	4b38      	ldr	r3, [pc, #224]	; (8008d4c <USBD_SetConfig+0x118>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d01a      	beq.n	8008ca8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c72:	4b36      	ldr	r3, [pc, #216]	; (8008d4c <USBD_SetConfig+0x118>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2203      	movs	r2, #3
 8008c80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c84:	4b31      	ldr	r3, [pc, #196]	; (8008d4c <USBD_SetConfig+0x118>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff f9e4 	bl	8008058 <USBD_SetClassConfig>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d104      	bne.n	8008ca0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f933 	bl	8008f04 <USBD_CtlError>
            return;
 8008c9e:	e052      	b.n	8008d46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f9f8 	bl	8009096 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ca6:	e04e      	b.n	8008d46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f9f4 	bl	8009096 <USBD_CtlSendStatus>
        break;
 8008cae:	e04a      	b.n	8008d46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008cb0:	4b26      	ldr	r3, [pc, #152]	; (8008d4c <USBD_SetConfig+0x118>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d112      	bne.n	8008cde <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008cc0:	4b22      	ldr	r3, [pc, #136]	; (8008d4c <USBD_SetConfig+0x118>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008cca:	4b20      	ldr	r3, [pc, #128]	; (8008d4c <USBD_SetConfig+0x118>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff f9e0 	bl	8008096 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9dd 	bl	8009096 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008cdc:	e033      	b.n	8008d46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008cde:	4b1b      	ldr	r3, [pc, #108]	; (8008d4c <USBD_SetConfig+0x118>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d01d      	beq.n	8008d28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff f9ce 	bl	8008096 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008cfa:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <USBD_SetConfig+0x118>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d04:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <USBD_SetConfig+0x118>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff f9a4 	bl	8008058 <USBD_SetClassConfig>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d104      	bne.n	8008d20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f8f3 	bl	8008f04 <USBD_CtlError>
            return;
 8008d1e:	e012      	b.n	8008d46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f9b8 	bl	8009096 <USBD_CtlSendStatus>
        break;
 8008d26:	e00e      	b.n	8008d46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f9b4 	bl	8009096 <USBD_CtlSendStatus>
        break;
 8008d2e:	e00a      	b.n	8008d46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f8e6 	bl	8008f04 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008d38:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <USBD_SetConfig+0x118>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff f9a9 	bl	8008096 <USBD_ClrClassConfig>
        break;
 8008d44:	bf00      	nop
    }
  }
}
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20000420 	.word	0x20000420

08008d50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88db      	ldrh	r3, [r3, #6]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d004      	beq.n	8008d6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f8cd 	bl	8008f04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d6a:	e022      	b.n	8008db2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	dc02      	bgt.n	8008d7c <USBD_GetConfig+0x2c>
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dc03      	bgt.n	8008d82 <USBD_GetConfig+0x32>
 8008d7a:	e015      	b.n	8008da8 <USBD_GetConfig+0x58>
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d00b      	beq.n	8008d98 <USBD_GetConfig+0x48>
 8008d80:	e012      	b.n	8008da8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f922 	bl	8008fda <USBD_CtlSendData>
        break;
 8008d96:	e00c      	b.n	8008db2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f91a 	bl	8008fda <USBD_CtlSendData>
        break;
 8008da6:	e004      	b.n	8008db2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f8aa 	bl	8008f04 <USBD_CtlError>
        break;
 8008db0:	bf00      	nop
}
 8008db2:	bf00      	nop
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d81e      	bhi.n	8008e0e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	88db      	ldrh	r3, [r3, #6]
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d004      	beq.n	8008de2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f892 	bl	8008f04 <USBD_CtlError>
        break;
 8008de0:	e01a      	b.n	8008e18 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d005      	beq.n	8008dfe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f043 0202 	orr.w	r2, r3, #2
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	330c      	adds	r3, #12
 8008e02:	2202      	movs	r2, #2
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f8e7 	bl	8008fda <USBD_CtlSendData>
      break;
 8008e0c:	e004      	b.n	8008e18 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f877 	bl	8008f04 <USBD_CtlError>
      break;
 8008e16:	bf00      	nop
  }
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d106      	bne.n	8008e40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f92b 	bl	8009096 <USBD_CtlSendStatus>
  }
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d80b      	bhi.n	8008e76 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d10c      	bne.n	8008e80 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f911 	bl	8009096 <USBD_CtlSendStatus>
      }
      break;
 8008e74:	e004      	b.n	8008e80 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f843 	bl	8008f04 <USBD_CtlError>
      break;
 8008e7e:	e000      	b.n	8008e82 <USBD_ClrFeature+0x3a>
      break;
 8008e80:	bf00      	nop
  }
}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781a      	ldrb	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	785a      	ldrb	r2, [r3, #1]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	3302      	adds	r3, #2
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	3303      	adds	r3, #3
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	021b      	lsls	r3, r3, #8
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	4413      	add	r3, r2
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	3305      	adds	r3, #5
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	3306      	adds	r3, #6
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	3307      	adds	r3, #7
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	80da      	strh	r2, [r3, #6]

}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008f0e:	2180      	movs	r1, #128	; 0x80
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fc7d 	bl	8009810 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008f16:	2100      	movs	r1, #0
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fc79 	bl	8009810 <USBD_LL_StallEP>
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b086      	sub	sp, #24
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d032      	beq.n	8008fa2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 f834 	bl	8008faa <USBD_GetLen>
 8008f42:	4603      	mov	r3, r0
 8008f44:	3301      	adds	r3, #1
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	75fa      	strb	r2, [r7, #23]
 8008f56:	461a      	mov	r2, r3
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	7812      	ldrb	r2, [r2, #0]
 8008f60:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	75fa      	strb	r2, [r7, #23]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	2203      	movs	r2, #3
 8008f70:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f72:	e012      	b.n	8008f9a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	60fa      	str	r2, [r7, #12]
 8008f7a:	7dfa      	ldrb	r2, [r7, #23]
 8008f7c:	1c51      	adds	r1, r2, #1
 8008f7e:	75f9      	strb	r1, [r7, #23]
 8008f80:	4611      	mov	r1, r2
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	440a      	add	r2, r1
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	75fa      	strb	r2, [r7, #23]
 8008f90:	461a      	mov	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	4413      	add	r3, r2
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e8      	bne.n	8008f74 <USBD_GetString+0x4e>
    }
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008fb6:	e005      	b.n	8008fc4 <USBD_GetLen+0x1a>
  {
    len++;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f5      	bne.n	8008fb8 <USBD_GetLen+0xe>
  }

  return len;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ff0:	88fa      	ldrh	r2, [r7, #6]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ff6:	88fa      	ldrh	r2, [r7, #6]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ffc:	88fb      	ldrh	r3, [r7, #6]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	2100      	movs	r1, #0
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 fc8d 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	4613      	mov	r3, r2
 800901e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009020:	88fb      	ldrh	r3, [r7, #6]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 fc7b 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	4613      	mov	r3, r2
 8009042:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2203      	movs	r2, #3
 8009048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800904c:	88fa      	ldrh	r2, [r7, #6]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009054:	88fa      	ldrh	r2, [r7, #6]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800905c:	88fb      	ldrh	r3, [r7, #6]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	2100      	movs	r1, #0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fc80 	bl	8009968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	4613      	mov	r3, r2
 800907e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	2100      	movs	r1, #0
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fc6e 	bl	8009968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2204      	movs	r2, #4
 80090a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090a6:	2300      	movs	r3, #0
 80090a8:	2200      	movs	r2, #0
 80090aa:	2100      	movs	r1, #0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fc38 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2205      	movs	r2, #5
 80090c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090cc:	2300      	movs	r3, #0
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fc48 	bl	8009968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090e8:	2200      	movs	r2, #0
 80090ea:	4912      	ldr	r1, [pc, #72]	; (8009134 <MX_USB_DEVICE_Init+0x50>)
 80090ec:	4812      	ldr	r0, [pc, #72]	; (8009138 <MX_USB_DEVICE_Init+0x54>)
 80090ee:	f7fe ff57 	bl	8007fa0 <USBD_Init>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090f8:	f7f8 f868 	bl	80011cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090fc:	490f      	ldr	r1, [pc, #60]	; (800913c <MX_USB_DEVICE_Init+0x58>)
 80090fe:	480e      	ldr	r0, [pc, #56]	; (8009138 <MX_USB_DEVICE_Init+0x54>)
 8009100:	f7fe ff79 	bl	8007ff6 <USBD_RegisterClass>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800910a:	f7f8 f85f 	bl	80011cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800910e:	490c      	ldr	r1, [pc, #48]	; (8009140 <MX_USB_DEVICE_Init+0x5c>)
 8009110:	4809      	ldr	r0, [pc, #36]	; (8009138 <MX_USB_DEVICE_Init+0x54>)
 8009112:	f7fe fea7 	bl	8007e64 <USBD_CDC_RegisterInterface>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800911c:	f7f8 f856 	bl	80011cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009120:	4805      	ldr	r0, [pc, #20]	; (8009138 <MX_USB_DEVICE_Init+0x54>)
 8009122:	f7fe ff82 	bl	800802a <USBD_Start>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800912c:	f7f8 f84e 	bl	80011cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009130:	bf00      	nop
 8009132:	bd80      	pop	{r7, pc}
 8009134:	2000012c 	.word	0x2000012c
 8009138:	20000424 	.word	0x20000424
 800913c:	20000018 	.word	0x20000018
 8009140:	2000011c 	.word	0x2000011c

08009144 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009148:	2200      	movs	r2, #0
 800914a:	4905      	ldr	r1, [pc, #20]	; (8009160 <CDC_Init_FS+0x1c>)
 800914c:	4805      	ldr	r0, [pc, #20]	; (8009164 <CDC_Init_FS+0x20>)
 800914e:	f7fe fea0 	bl	8007e92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009152:	4905      	ldr	r1, [pc, #20]	; (8009168 <CDC_Init_FS+0x24>)
 8009154:	4803      	ldr	r0, [pc, #12]	; (8009164 <CDC_Init_FS+0x20>)
 8009156:	f7fe feb6 	bl	8007ec6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800915a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800915c:	4618      	mov	r0, r3
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20000ae8 	.word	0x20000ae8
 8009164:	20000424 	.word	0x20000424
 8009168:	200006e8 	.word	0x200006e8

0800916c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009170:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009172:	4618      	mov	r0, r3
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
 8009188:	4613      	mov	r3, r2
 800918a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b23      	cmp	r3, #35	; 0x23
 8009190:	d84a      	bhi.n	8009228 <CDC_Control_FS+0xac>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <CDC_Control_FS+0x1c>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	08009229 	.word	0x08009229
 800919c:	08009229 	.word	0x08009229
 80091a0:	08009229 	.word	0x08009229
 80091a4:	08009229 	.word	0x08009229
 80091a8:	08009229 	.word	0x08009229
 80091ac:	08009229 	.word	0x08009229
 80091b0:	08009229 	.word	0x08009229
 80091b4:	08009229 	.word	0x08009229
 80091b8:	08009229 	.word	0x08009229
 80091bc:	08009229 	.word	0x08009229
 80091c0:	08009229 	.word	0x08009229
 80091c4:	08009229 	.word	0x08009229
 80091c8:	08009229 	.word	0x08009229
 80091cc:	08009229 	.word	0x08009229
 80091d0:	08009229 	.word	0x08009229
 80091d4:	08009229 	.word	0x08009229
 80091d8:	08009229 	.word	0x08009229
 80091dc:	08009229 	.word	0x08009229
 80091e0:	08009229 	.word	0x08009229
 80091e4:	08009229 	.word	0x08009229
 80091e8:	08009229 	.word	0x08009229
 80091ec:	08009229 	.word	0x08009229
 80091f0:	08009229 	.word	0x08009229
 80091f4:	08009229 	.word	0x08009229
 80091f8:	08009229 	.word	0x08009229
 80091fc:	08009229 	.word	0x08009229
 8009200:	08009229 	.word	0x08009229
 8009204:	08009229 	.word	0x08009229
 8009208:	08009229 	.word	0x08009229
 800920c:	08009229 	.word	0x08009229
 8009210:	08009229 	.word	0x08009229
 8009214:	08009229 	.word	0x08009229
 8009218:	08009229 	.word	0x08009229
 800921c:	08009229 	.word	0x08009229
 8009220:	08009229 	.word	0x08009229
 8009224:	08009229 	.word	0x08009229
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009228:	bf00      	nop
  }

  return (USBD_OK);
 800922a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	4805      	ldr	r0, [pc, #20]	; (800925c <CDC_Receive_FS+0x24>)
 8009246:	f7fe fe3e 	bl	8007ec6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800924a:	4804      	ldr	r0, [pc, #16]	; (800925c <CDC_Receive_FS+0x24>)
 800924c:	f7fe fe7e 	bl	8007f4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009250:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000424 	.word	0x20000424

08009260 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009270:	4b0d      	ldr	r3, [pc, #52]	; (80092a8 <CDC_Transmit_FS+0x48>)
 8009272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009276:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009282:	2301      	movs	r3, #1
 8009284:	e00b      	b.n	800929e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009286:	887b      	ldrh	r3, [r7, #2]
 8009288:	461a      	mov	r2, r3
 800928a:	6879      	ldr	r1, [r7, #4]
 800928c:	4806      	ldr	r0, [pc, #24]	; (80092a8 <CDC_Transmit_FS+0x48>)
 800928e:	f7fe fe00 	bl	8007e92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009292:	4805      	ldr	r0, [pc, #20]	; (80092a8 <CDC_Transmit_FS+0x48>)
 8009294:	f7fe fe2b 	bl	8007eee <USBD_CDC_TransmitPacket>
 8009298:	4603      	mov	r3, r0
 800929a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000424 	.word	0x20000424

080092ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2212      	movs	r2, #18
 80092bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092be:	4b03      	ldr	r3, [pc, #12]	; (80092cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	20000148 	.word	0x20000148

080092d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2204      	movs	r2, #4
 80092e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092e2:	4b03      	ldr	r3, [pc, #12]	; (80092f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	2000015c 	.word	0x2000015c

080092f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	6039      	str	r1, [r7, #0]
 80092fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d105      	bne.n	8009312 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	4907      	ldr	r1, [pc, #28]	; (8009328 <USBD_FS_ProductStrDescriptor+0x34>)
 800930a:	4808      	ldr	r0, [pc, #32]	; (800932c <USBD_FS_ProductStrDescriptor+0x38>)
 800930c:	f7ff fe0b 	bl	8008f26 <USBD_GetString>
 8009310:	e004      	b.n	800931c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4904      	ldr	r1, [pc, #16]	; (8009328 <USBD_FS_ProductStrDescriptor+0x34>)
 8009316:	4805      	ldr	r0, [pc, #20]	; (800932c <USBD_FS_ProductStrDescriptor+0x38>)
 8009318:	f7ff fe05 	bl	8008f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000ee8 	.word	0x20000ee8
 800932c:	0800c7bc 	.word	0x0800c7bc

08009330 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	4904      	ldr	r1, [pc, #16]	; (8009350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009340:	4804      	ldr	r0, [pc, #16]	; (8009354 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009342:	f7ff fdf0 	bl	8008f26 <USBD_GetString>
  return USBD_StrDesc;
 8009346:	4b02      	ldr	r3, [pc, #8]	; (8009350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20000ee8 	.word	0x20000ee8
 8009354:	0800c7d4 	.word	0x0800c7d4

08009358 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	6039      	str	r1, [r7, #0]
 8009362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	221a      	movs	r2, #26
 8009368:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800936a:	f000 f843 	bl	80093f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800936e:	4b02      	ldr	r3, [pc, #8]	; (8009378 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000160 	.word	0x20000160

0800937c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	6039      	str	r1, [r7, #0]
 8009386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d105      	bne.n	800939a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	4907      	ldr	r1, [pc, #28]	; (80093b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009392:	4808      	ldr	r0, [pc, #32]	; (80093b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009394:	f7ff fdc7 	bl	8008f26 <USBD_GetString>
 8009398:	e004      	b.n	80093a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	4904      	ldr	r1, [pc, #16]	; (80093b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800939e:	4805      	ldr	r0, [pc, #20]	; (80093b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093a0:	f7ff fdc1 	bl	8008f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000ee8 	.word	0x20000ee8
 80093b4:	0800c7e8 	.word	0x0800c7e8

080093b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	4907      	ldr	r1, [pc, #28]	; (80093ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093ce:	4808      	ldr	r0, [pc, #32]	; (80093f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093d0:	f7ff fda9 	bl	8008f26 <USBD_GetString>
 80093d4:	e004      	b.n	80093e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	4904      	ldr	r1, [pc, #16]	; (80093ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093da:	4805      	ldr	r0, [pc, #20]	; (80093f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093dc:	f7ff fda3 	bl	8008f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e0:	4b02      	ldr	r3, [pc, #8]	; (80093ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20000ee8 	.word	0x20000ee8
 80093f0:	0800c7f4 	.word	0x0800c7f4

080093f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093fa:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <Get_SerialNum+0x44>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009400:	4b0e      	ldr	r3, [pc, #56]	; (800943c <Get_SerialNum+0x48>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009406:	4b0e      	ldr	r3, [pc, #56]	; (8009440 <Get_SerialNum+0x4c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4413      	add	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d009      	beq.n	800942e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800941a:	2208      	movs	r2, #8
 800941c:	4909      	ldr	r1, [pc, #36]	; (8009444 <Get_SerialNum+0x50>)
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 f814 	bl	800944c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009424:	2204      	movs	r2, #4
 8009426:	4908      	ldr	r1, [pc, #32]	; (8009448 <Get_SerialNum+0x54>)
 8009428:	68b8      	ldr	r0, [r7, #8]
 800942a:	f000 f80f 	bl	800944c <IntToUnicode>
  }
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	1ffff7ac 	.word	0x1ffff7ac
 800943c:	1ffff7b0 	.word	0x1ffff7b0
 8009440:	1ffff7b4 	.word	0x1ffff7b4
 8009444:	20000162 	.word	0x20000162
 8009448:	20000172 	.word	0x20000172

0800944c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	4613      	mov	r3, r2
 8009458:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]
 8009462:	e027      	b.n	80094b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	0f1b      	lsrs	r3, r3, #28
 8009468:	2b09      	cmp	r3, #9
 800946a:	d80b      	bhi.n	8009484 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	0f1b      	lsrs	r3, r3, #28
 8009470:	b2da      	uxtb	r2, r3
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	4619      	mov	r1, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	440b      	add	r3, r1
 800947c:	3230      	adds	r2, #48	; 0x30
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	e00a      	b.n	800949a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	0f1b      	lsrs	r3, r3, #28
 8009488:	b2da      	uxtb	r2, r3
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	4619      	mov	r1, r3
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	440b      	add	r3, r1
 8009494:	3237      	adds	r2, #55	; 0x37
 8009496:	b2d2      	uxtb	r2, r2
 8009498:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	3301      	adds	r3, #1
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	4413      	add	r3, r2
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	3301      	adds	r3, #1
 80094b2:	75fb      	strb	r3, [r7, #23]
 80094b4:	7dfa      	ldrb	r2, [r7, #23]
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d3d3      	bcc.n	8009464 <IntToUnicode+0x18>
  }
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	; 0x28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094d4:	f107 0314 	add.w	r3, r7, #20
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	609a      	str	r2, [r3, #8]
 80094e0:	60da      	str	r2, [r3, #12]
 80094e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a1c      	ldr	r2, [pc, #112]	; (800955c <HAL_PCD_MspInit+0x90>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d131      	bne.n	8009552 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ee:	4b1c      	ldr	r3, [pc, #112]	; (8009560 <HAL_PCD_MspInit+0x94>)
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	4a1b      	ldr	r2, [pc, #108]	; (8009560 <HAL_PCD_MspInit+0x94>)
 80094f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094f8:	6153      	str	r3, [r2, #20]
 80094fa:	4b19      	ldr	r3, [pc, #100]	; (8009560 <HAL_PCD_MspInit+0x94>)
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009506:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800950a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800950c:	2302      	movs	r3, #2
 800950e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009514:	2303      	movs	r3, #3
 8009516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009518:	230e      	movs	r3, #14
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800951c:	f107 0314 	add.w	r3, r7, #20
 8009520:	4619      	mov	r1, r3
 8009522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009526:	f7f8 f9b1 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800952a:	4b0d      	ldr	r3, [pc, #52]	; (8009560 <HAL_PCD_MspInit+0x94>)
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	4a0c      	ldr	r2, [pc, #48]	; (8009560 <HAL_PCD_MspInit+0x94>)
 8009530:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009534:	61d3      	str	r3, [r2, #28]
 8009536:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <HAL_PCD_MspInit+0x94>)
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	2014      	movs	r0, #20
 8009548:	f7f8 f969 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800954c:	2014      	movs	r0, #20
 800954e:	f7f8 f982 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009552:	bf00      	nop
 8009554:	3728      	adds	r7, #40	; 0x28
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	40005c00 	.word	0x40005c00
 8009560:	40021000 	.word	0x40021000

08009564 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe fd9e 	bl	80080bc <USBD_LL_SetupStage>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	440b      	add	r3, r1
 80095a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7fe fdd0 	bl	8008156 <USBD_LL_DataOutStage>
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	460b      	mov	r3, r1
 80095c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	440b      	add	r3, r1
 80095de:	3324      	adds	r3, #36	; 0x24
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	4619      	mov	r1, r3
 80095e6:	f7fe fe27 	bl	8008238 <USBD_LL_DataInStage>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe ff3a 	bl	800847a <USBD_LL_SOF>
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009616:	2301      	movs	r3, #1
 8009618:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	795b      	ldrb	r3, [r3, #5]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d001      	beq.n	8009626 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009622:	f7f7 fdd3 	bl	80011cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800962c:	7bfa      	ldrb	r2, [r7, #15]
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fee7 	bl	8008404 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fea0 	bl	8008382 <USBD_LL_Reset>
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fee2 	bl	8008424 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7a5b      	ldrb	r3, [r3, #9]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009668:	4b04      	ldr	r3, [pc, #16]	; (800967c <HAL_PCD_SuspendCallback+0x30>)
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	4a03      	ldr	r2, [pc, #12]	; (800967c <HAL_PCD_SuspendCallback+0x30>)
 800966e:	f043 0306 	orr.w	r3, r3, #6
 8009672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	e000ed00 	.word	0xe000ed00

08009680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fedd 	bl	800844e <USBD_LL_Resume>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80096a4:	4a28      	ldr	r2, [pc, #160]	; (8009748 <USBD_LL_Init+0xac>)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
  pdev->pData = &hpcd_USB_FS;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a26      	ldr	r2, [pc, #152]	; (8009748 <USBD_LL_Init+0xac>)
 80096b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80096b4:	4b24      	ldr	r3, [pc, #144]	; (8009748 <USBD_LL_Init+0xac>)
 80096b6:	4a25      	ldr	r2, [pc, #148]	; (800974c <USBD_LL_Init+0xb0>)
 80096b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096ba:	4b23      	ldr	r3, [pc, #140]	; (8009748 <USBD_LL_Init+0xac>)
 80096bc:	2208      	movs	r2, #8
 80096be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096c0:	4b21      	ldr	r3, [pc, #132]	; (8009748 <USBD_LL_Init+0xac>)
 80096c2:	2202      	movs	r2, #2
 80096c4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096c6:	4b20      	ldr	r3, [pc, #128]	; (8009748 <USBD_LL_Init+0xac>)
 80096c8:	2202      	movs	r2, #2
 80096ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096cc:	4b1e      	ldr	r3, [pc, #120]	; (8009748 <USBD_LL_Init+0xac>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096d2:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <USBD_LL_Init+0xac>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096d8:	481b      	ldr	r0, [pc, #108]	; (8009748 <USBD_LL_Init+0xac>)
 80096da:	f7f8 fbb3 	bl	8001e44 <HAL_PCD_Init>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80096e4:	f7f7 fd72 	bl	80011cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ee:	2318      	movs	r3, #24
 80096f0:	2200      	movs	r2, #0
 80096f2:	2100      	movs	r1, #0
 80096f4:	f7fa f82d 	bl	8003752 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096fe:	2358      	movs	r3, #88	; 0x58
 8009700:	2200      	movs	r2, #0
 8009702:	2180      	movs	r1, #128	; 0x80
 8009704:	f7fa f825 	bl	8003752 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800970e:	23c0      	movs	r3, #192	; 0xc0
 8009710:	2200      	movs	r2, #0
 8009712:	2181      	movs	r1, #129	; 0x81
 8009714:	f7fa f81d 	bl	8003752 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800971e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009722:	2200      	movs	r2, #0
 8009724:	2101      	movs	r1, #1
 8009726:	f7fa f814 	bl	8003752 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009734:	2200      	movs	r2, #0
 8009736:	2182      	movs	r1, #130	; 0x82
 8009738:	f7fa f80b 	bl	8003752 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200010e8 	.word	0x200010e8
 800974c:	40005c00 	.word	0x40005c00

08009750 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009766:	4618      	mov	r0, r3
 8009768:	f7f8 fc33 	bl	8001fd2 <HAL_PCD_Start>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 f952 	bl	8009a1c <USBD_Get_USB_Status>
 8009778:	4603      	mov	r3, r0
 800977a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977c:	7bbb      	ldrb	r3, [r7, #14]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	4608      	mov	r0, r1
 8009790:	4611      	mov	r1, r2
 8009792:	461a      	mov	r2, r3
 8009794:	4603      	mov	r3, r0
 8009796:	70fb      	strb	r3, [r7, #3]
 8009798:	460b      	mov	r3, r1
 800979a:	70bb      	strb	r3, [r7, #2]
 800979c:	4613      	mov	r3, r2
 800979e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097ae:	78bb      	ldrb	r3, [r7, #2]
 80097b0:	883a      	ldrh	r2, [r7, #0]
 80097b2:	78f9      	ldrb	r1, [r7, #3]
 80097b4:	f7f8 fd2b 	bl	800220e <HAL_PCD_EP_Open>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f92c 	bl	8009a1c <USBD_Get_USB_Status>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097ec:	78fa      	ldrb	r2, [r7, #3]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f8 fd69 	bl	80022c8 <HAL_PCD_EP_Close>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f90d 	bl	8009a1c <USBD_Get_USB_Status>
 8009802:	4603      	mov	r3, r0
 8009804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009806:	7bbb      	ldrb	r3, [r7, #14]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800982a:	78fa      	ldrb	r2, [r7, #3]
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f7f8 fe12 	bl	8002458 <HAL_PCD_EP_SetStall>
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	4618      	mov	r0, r3
 800983c:	f000 f8ee 	bl	8009a1c <USBD_Get_USB_Status>
 8009840:	4603      	mov	r3, r0
 8009842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009844:	7bbb      	ldrb	r3, [r7, #14]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7f8 fe45 	bl	80024fc <HAL_PCD_EP_ClrStall>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f8cf 	bl	8009a1c <USBD_Get_USB_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009882:	7bbb      	ldrb	r3, [r7, #14]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800989e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	da0b      	bge.n	80098c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	440b      	add	r3, r1
 80098ba:	3312      	adds	r3, #18
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	e00b      	b.n	80098d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	4613      	mov	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	440b      	add	r3, r1
 80098d2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80098d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	4611      	mov	r1, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f7f8 fc5f 	bl	80021c6 <HAL_PCD_SetAddress>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f884 	bl	8009a1c <USBD_Get_USB_Status>
 8009914:	4603      	mov	r3, r0
 8009916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009918:	7bbb      	ldrb	r3, [r7, #14]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b086      	sub	sp, #24
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	461a      	mov	r2, r3
 800992e:	460b      	mov	r3, r1
 8009930:	72fb      	strb	r3, [r7, #11]
 8009932:	4613      	mov	r3, r2
 8009934:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009944:	893b      	ldrh	r3, [r7, #8]
 8009946:	7af9      	ldrb	r1, [r7, #11]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	f7f8 fd4e 	bl	80023ea <HAL_PCD_EP_Transmit>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 f861 	bl	8009a1c <USBD_Get_USB_Status>
 800995a:	4603      	mov	r3, r0
 800995c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800995e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	461a      	mov	r2, r3
 8009974:	460b      	mov	r3, r1
 8009976:	72fb      	strb	r3, [r7, #11]
 8009978:	4613      	mov	r3, r2
 800997a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800998a:	893b      	ldrh	r3, [r7, #8]
 800998c:	7af9      	ldrb	r1, [r7, #11]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	f7f8 fce2 	bl	8002358 <HAL_PCD_EP_Receive>
 8009994:	4603      	mov	r3, r0
 8009996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 f83e 	bl	8009a1c <USBD_Get_USB_Status>
 80099a0:	4603      	mov	r3, r0
 80099a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099c0:	78fa      	ldrb	r2, [r7, #3]
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7f8 fcf8 	bl	80023ba <HAL_PCD_EP_GetRxCount>
 80099ca:	4603      	mov	r3, r0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099dc:	4b03      	ldr	r3, [pc, #12]	; (80099ec <USBD_static_malloc+0x18>)
}
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	200013bc 	.word	0x200013bc

080099f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]

}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d817      	bhi.n	8009a60 <USBD_Get_USB_Status+0x44>
 8009a30:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <USBD_Get_USB_Status+0x1c>)
 8009a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a36:	bf00      	nop
 8009a38:	08009a49 	.word	0x08009a49
 8009a3c:	08009a4f 	.word	0x08009a4f
 8009a40:	08009a55 	.word	0x08009a55
 8009a44:	08009a5b 	.word	0x08009a5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4c:	e00b      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a4e:	2302      	movs	r3, #2
 8009a50:	73fb      	strb	r3, [r7, #15]
    break;
 8009a52:	e008      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a54:	2301      	movs	r3, #1
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	e005      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5e:	e002      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a60:	2302      	movs	r3, #2
 8009a62:	73fb      	strb	r3, [r7, #15]
    break;
 8009a64:	bf00      	nop
  }
  return usb_status;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <__cvt>:
 8009a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	ec55 4b10 	vmov	r4, r5, d0
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	460e      	mov	r6, r1
 8009a80:	4619      	mov	r1, r3
 8009a82:	462b      	mov	r3, r5
 8009a84:	bfbb      	ittet	lt
 8009a86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a8a:	461d      	movlt	r5, r3
 8009a8c:	2300      	movge	r3, #0
 8009a8e:	232d      	movlt	r3, #45	; 0x2d
 8009a90:	700b      	strb	r3, [r1, #0]
 8009a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a98:	4691      	mov	r9, r2
 8009a9a:	f023 0820 	bic.w	r8, r3, #32
 8009a9e:	bfbc      	itt	lt
 8009aa0:	4622      	movlt	r2, r4
 8009aa2:	4614      	movlt	r4, r2
 8009aa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009aa8:	d005      	beq.n	8009ab6 <__cvt+0x42>
 8009aaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009aae:	d100      	bne.n	8009ab2 <__cvt+0x3e>
 8009ab0:	3601      	adds	r6, #1
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	e000      	b.n	8009ab8 <__cvt+0x44>
 8009ab6:	2103      	movs	r1, #3
 8009ab8:	ab03      	add	r3, sp, #12
 8009aba:	9301      	str	r3, [sp, #4]
 8009abc:	ab02      	add	r3, sp, #8
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	ec45 4b10 	vmov	d0, r4, r5
 8009ac4:	4653      	mov	r3, sl
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	f000 fe6a 	bl	800a7a0 <_dtoa_r>
 8009acc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	d102      	bne.n	8009ada <__cvt+0x66>
 8009ad4:	f019 0f01 	tst.w	r9, #1
 8009ad8:	d022      	beq.n	8009b20 <__cvt+0xac>
 8009ada:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ade:	eb07 0906 	add.w	r9, r7, r6
 8009ae2:	d110      	bne.n	8009b06 <__cvt+0x92>
 8009ae4:	783b      	ldrb	r3, [r7, #0]
 8009ae6:	2b30      	cmp	r3, #48	; 0x30
 8009ae8:	d10a      	bne.n	8009b00 <__cvt+0x8c>
 8009aea:	2200      	movs	r2, #0
 8009aec:	2300      	movs	r3, #0
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f6 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009af6:	b918      	cbnz	r0, 8009b00 <__cvt+0x8c>
 8009af8:	f1c6 0601 	rsb	r6, r6, #1
 8009afc:	f8ca 6000 	str.w	r6, [sl]
 8009b00:	f8da 3000 	ldr.w	r3, [sl]
 8009b04:	4499      	add	r9, r3
 8009b06:	2200      	movs	r2, #0
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	f7f6 ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b12:	b108      	cbz	r0, 8009b18 <__cvt+0xa4>
 8009b14:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b18:	2230      	movs	r2, #48	; 0x30
 8009b1a:	9b03      	ldr	r3, [sp, #12]
 8009b1c:	454b      	cmp	r3, r9
 8009b1e:	d307      	bcc.n	8009b30 <__cvt+0xbc>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b24:	1bdb      	subs	r3, r3, r7
 8009b26:	4638      	mov	r0, r7
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	b004      	add	sp, #16
 8009b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b30:	1c59      	adds	r1, r3, #1
 8009b32:	9103      	str	r1, [sp, #12]
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e7f0      	b.n	8009b1a <__cvt+0xa6>

08009b38 <__exponent>:
 8009b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	bfb8      	it	lt
 8009b40:	4249      	neglt	r1, r1
 8009b42:	f803 2b02 	strb.w	r2, [r3], #2
 8009b46:	bfb4      	ite	lt
 8009b48:	222d      	movlt	r2, #45	; 0x2d
 8009b4a:	222b      	movge	r2, #43	; 0x2b
 8009b4c:	2909      	cmp	r1, #9
 8009b4e:	7042      	strb	r2, [r0, #1]
 8009b50:	dd2a      	ble.n	8009ba8 <__exponent+0x70>
 8009b52:	f10d 0207 	add.w	r2, sp, #7
 8009b56:	4617      	mov	r7, r2
 8009b58:	260a      	movs	r6, #10
 8009b5a:	4694      	mov	ip, r2
 8009b5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b60:	fb06 1415 	mls	r4, r6, r5, r1
 8009b64:	3430      	adds	r4, #48	; 0x30
 8009b66:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	2c63      	cmp	r4, #99	; 0x63
 8009b6e:	f102 32ff 	add.w	r2, r2, #4294967295
 8009b72:	4629      	mov	r1, r5
 8009b74:	dcf1      	bgt.n	8009b5a <__exponent+0x22>
 8009b76:	3130      	adds	r1, #48	; 0x30
 8009b78:	f1ac 0402 	sub.w	r4, ip, #2
 8009b7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b80:	1c41      	adds	r1, r0, #1
 8009b82:	4622      	mov	r2, r4
 8009b84:	42ba      	cmp	r2, r7
 8009b86:	d30a      	bcc.n	8009b9e <__exponent+0x66>
 8009b88:	f10d 0209 	add.w	r2, sp, #9
 8009b8c:	eba2 020c 	sub.w	r2, r2, ip
 8009b90:	42bc      	cmp	r4, r7
 8009b92:	bf88      	it	hi
 8009b94:	2200      	movhi	r2, #0
 8009b96:	4413      	add	r3, r2
 8009b98:	1a18      	subs	r0, r3, r0
 8009b9a:	b003      	add	sp, #12
 8009b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ba2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009ba6:	e7ed      	b.n	8009b84 <__exponent+0x4c>
 8009ba8:	2330      	movs	r3, #48	; 0x30
 8009baa:	3130      	adds	r1, #48	; 0x30
 8009bac:	7083      	strb	r3, [r0, #2]
 8009bae:	70c1      	strb	r1, [r0, #3]
 8009bb0:	1d03      	adds	r3, r0, #4
 8009bb2:	e7f1      	b.n	8009b98 <__exponent+0x60>

08009bb4 <_printf_float>:
 8009bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	ed2d 8b02 	vpush	{d8}
 8009bbc:	b08d      	sub	sp, #52	; 0x34
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	4605      	mov	r5, r0
 8009bca:	f000 fce7 	bl	800a59c <_localeconv_r>
 8009bce:	f8d0 a000 	ldr.w	sl, [r0]
 8009bd2:	4650      	mov	r0, sl
 8009bd4:	f7f6 fb4c 	bl	8000270 <strlen>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	930a      	str	r3, [sp, #40]	; 0x28
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	f8d8 3000 	ldr.w	r3, [r8]
 8009be4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009be8:	3307      	adds	r3, #7
 8009bea:	f023 0307 	bic.w	r3, r3, #7
 8009bee:	f103 0208 	add.w	r2, r3, #8
 8009bf2:	f8c8 2000 	str.w	r2, [r8]
 8009bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bfe:	9307      	str	r3, [sp, #28]
 8009c00:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c04:	ee08 0a10 	vmov	s16, r0
 8009c08:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c10:	4b9e      	ldr	r3, [pc, #632]	; (8009e8c <_printf_float+0x2d8>)
 8009c12:	f04f 32ff 	mov.w	r2, #4294967295
 8009c16:	f7f6 ff89 	bl	8000b2c <__aeabi_dcmpun>
 8009c1a:	bb88      	cbnz	r0, 8009c80 <_printf_float+0xcc>
 8009c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c20:	4b9a      	ldr	r3, [pc, #616]	; (8009e8c <_printf_float+0x2d8>)
 8009c22:	f04f 32ff 	mov.w	r2, #4294967295
 8009c26:	f7f6 ff63 	bl	8000af0 <__aeabi_dcmple>
 8009c2a:	bb48      	cbnz	r0, 8009c80 <_printf_float+0xcc>
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2300      	movs	r3, #0
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff52 	bl	8000adc <__aeabi_dcmplt>
 8009c38:	b110      	cbz	r0, 8009c40 <_printf_float+0x8c>
 8009c3a:	232d      	movs	r3, #45	; 0x2d
 8009c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c40:	4a93      	ldr	r2, [pc, #588]	; (8009e90 <_printf_float+0x2dc>)
 8009c42:	4b94      	ldr	r3, [pc, #592]	; (8009e94 <_printf_float+0x2e0>)
 8009c44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c48:	bf94      	ite	ls
 8009c4a:	4690      	movls	r8, r2
 8009c4c:	4698      	movhi	r8, r3
 8009c4e:	2303      	movs	r3, #3
 8009c50:	6123      	str	r3, [r4, #16]
 8009c52:	9b05      	ldr	r3, [sp, #20]
 8009c54:	f023 0304 	bic.w	r3, r3, #4
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	9700      	str	r7, [sp, #0]
 8009c60:	4633      	mov	r3, r6
 8009c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 f9da 	bl	800a020 <_printf_common>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f040 8090 	bne.w	8009d92 <_printf_float+0x1de>
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295
 8009c76:	b00d      	add	sp, #52	; 0x34
 8009c78:	ecbd 8b02 	vpop	{d8}
 8009c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c80:	4642      	mov	r2, r8
 8009c82:	464b      	mov	r3, r9
 8009c84:	4640      	mov	r0, r8
 8009c86:	4649      	mov	r1, r9
 8009c88:	f7f6 ff50 	bl	8000b2c <__aeabi_dcmpun>
 8009c8c:	b140      	cbz	r0, 8009ca0 <_printf_float+0xec>
 8009c8e:	464b      	mov	r3, r9
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	bfbc      	itt	lt
 8009c94:	232d      	movlt	r3, #45	; 0x2d
 8009c96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c9a:	4a7f      	ldr	r2, [pc, #508]	; (8009e98 <_printf_float+0x2e4>)
 8009c9c:	4b7f      	ldr	r3, [pc, #508]	; (8009e9c <_printf_float+0x2e8>)
 8009c9e:	e7d1      	b.n	8009c44 <_printf_float+0x90>
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ca6:	9206      	str	r2, [sp, #24]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	d13f      	bne.n	8009d2c <_printf_float+0x178>
 8009cac:	2306      	movs	r3, #6
 8009cae:	6063      	str	r3, [r4, #4]
 8009cb0:	9b05      	ldr	r3, [sp, #20]
 8009cb2:	6861      	ldr	r1, [r4, #4]
 8009cb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009cb8:	2300      	movs	r3, #0
 8009cba:	9303      	str	r3, [sp, #12]
 8009cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8009cbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009cc2:	ab09      	add	r3, sp, #36	; 0x24
 8009cc4:	ec49 8b10 	vmov	d0, r8, r9
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	6022      	str	r2, [r4, #0]
 8009ccc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f7ff fecf 	bl	8009a74 <__cvt>
 8009cd6:	9b06      	ldr	r3, [sp, #24]
 8009cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cda:	2b47      	cmp	r3, #71	; 0x47
 8009cdc:	4680      	mov	r8, r0
 8009cde:	d108      	bne.n	8009cf2 <_printf_float+0x13e>
 8009ce0:	1cc8      	adds	r0, r1, #3
 8009ce2:	db02      	blt.n	8009cea <_printf_float+0x136>
 8009ce4:	6863      	ldr	r3, [r4, #4]
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	dd41      	ble.n	8009d6e <_printf_float+0x1ba>
 8009cea:	f1ab 0302 	sub.w	r3, fp, #2
 8009cee:	fa5f fb83 	uxtb.w	fp, r3
 8009cf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cf6:	d820      	bhi.n	8009d3a <_printf_float+0x186>
 8009cf8:	3901      	subs	r1, #1
 8009cfa:	465a      	mov	r2, fp
 8009cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d00:	9109      	str	r1, [sp, #36]	; 0x24
 8009d02:	f7ff ff19 	bl	8009b38 <__exponent>
 8009d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d08:	1813      	adds	r3, r2, r0
 8009d0a:	2a01      	cmp	r2, #1
 8009d0c:	4681      	mov	r9, r0
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	dc02      	bgt.n	8009d18 <_printf_float+0x164>
 8009d12:	6822      	ldr	r2, [r4, #0]
 8009d14:	07d2      	lsls	r2, r2, #31
 8009d16:	d501      	bpl.n	8009d1c <_printf_float+0x168>
 8009d18:	3301      	adds	r3, #1
 8009d1a:	6123      	str	r3, [r4, #16]
 8009d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d09c      	beq.n	8009c5e <_printf_float+0xaa>
 8009d24:	232d      	movs	r3, #45	; 0x2d
 8009d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d2a:	e798      	b.n	8009c5e <_printf_float+0xaa>
 8009d2c:	9a06      	ldr	r2, [sp, #24]
 8009d2e:	2a47      	cmp	r2, #71	; 0x47
 8009d30:	d1be      	bne.n	8009cb0 <_printf_float+0xfc>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1bc      	bne.n	8009cb0 <_printf_float+0xfc>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e7b9      	b.n	8009cae <_printf_float+0xfa>
 8009d3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d3e:	d118      	bne.n	8009d72 <_printf_float+0x1be>
 8009d40:	2900      	cmp	r1, #0
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	dd0b      	ble.n	8009d5e <_printf_float+0x1aa>
 8009d46:	6121      	str	r1, [r4, #16]
 8009d48:	b913      	cbnz	r3, 8009d50 <_printf_float+0x19c>
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	07d0      	lsls	r0, r2, #31
 8009d4e:	d502      	bpl.n	8009d56 <_printf_float+0x1a2>
 8009d50:	3301      	adds	r3, #1
 8009d52:	440b      	add	r3, r1
 8009d54:	6123      	str	r3, [r4, #16]
 8009d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d58:	f04f 0900 	mov.w	r9, #0
 8009d5c:	e7de      	b.n	8009d1c <_printf_float+0x168>
 8009d5e:	b913      	cbnz	r3, 8009d66 <_printf_float+0x1b2>
 8009d60:	6822      	ldr	r2, [r4, #0]
 8009d62:	07d2      	lsls	r2, r2, #31
 8009d64:	d501      	bpl.n	8009d6a <_printf_float+0x1b6>
 8009d66:	3302      	adds	r3, #2
 8009d68:	e7f4      	b.n	8009d54 <_printf_float+0x1a0>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e7f2      	b.n	8009d54 <_printf_float+0x1a0>
 8009d6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d74:	4299      	cmp	r1, r3
 8009d76:	db05      	blt.n	8009d84 <_printf_float+0x1d0>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	6121      	str	r1, [r4, #16]
 8009d7c:	07d8      	lsls	r0, r3, #31
 8009d7e:	d5ea      	bpl.n	8009d56 <_printf_float+0x1a2>
 8009d80:	1c4b      	adds	r3, r1, #1
 8009d82:	e7e7      	b.n	8009d54 <_printf_float+0x1a0>
 8009d84:	2900      	cmp	r1, #0
 8009d86:	bfd4      	ite	le
 8009d88:	f1c1 0202 	rsble	r2, r1, #2
 8009d8c:	2201      	movgt	r2, #1
 8009d8e:	4413      	add	r3, r2
 8009d90:	e7e0      	b.n	8009d54 <_printf_float+0x1a0>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	055a      	lsls	r2, r3, #21
 8009d96:	d407      	bmi.n	8009da8 <_printf_float+0x1f4>
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	4642      	mov	r2, r8
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	d12c      	bne.n	8009e00 <_printf_float+0x24c>
 8009da6:	e764      	b.n	8009c72 <_printf_float+0xbe>
 8009da8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dac:	f240 80e0 	bls.w	8009f70 <_printf_float+0x3bc>
 8009db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009db4:	2200      	movs	r2, #0
 8009db6:	2300      	movs	r3, #0
 8009db8:	f7f6 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d034      	beq.n	8009e2a <_printf_float+0x276>
 8009dc0:	4a37      	ldr	r2, [pc, #220]	; (8009ea0 <_printf_float+0x2ec>)
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b8      	blx	r7
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f43f af51 	beq.w	8009c72 <_printf_float+0xbe>
 8009dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	db02      	blt.n	8009dde <_printf_float+0x22a>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	07d8      	lsls	r0, r3, #31
 8009ddc:	d510      	bpl.n	8009e00 <_printf_float+0x24c>
 8009dde:	ee18 3a10 	vmov	r3, s16
 8009de2:	4652      	mov	r2, sl
 8009de4:	4631      	mov	r1, r6
 8009de6:	4628      	mov	r0, r5
 8009de8:	47b8      	blx	r7
 8009dea:	3001      	adds	r0, #1
 8009dec:	f43f af41 	beq.w	8009c72 <_printf_float+0xbe>
 8009df0:	f04f 0800 	mov.w	r8, #0
 8009df4:	f104 091a 	add.w	r9, r4, #26
 8009df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	4543      	cmp	r3, r8
 8009dfe:	dc09      	bgt.n	8009e14 <_printf_float+0x260>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	079b      	lsls	r3, r3, #30
 8009e04:	f100 8107 	bmi.w	800a016 <_printf_float+0x462>
 8009e08:	68e0      	ldr	r0, [r4, #12]
 8009e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e0c:	4298      	cmp	r0, r3
 8009e0e:	bfb8      	it	lt
 8009e10:	4618      	movlt	r0, r3
 8009e12:	e730      	b.n	8009c76 <_printf_float+0xc2>
 8009e14:	2301      	movs	r3, #1
 8009e16:	464a      	mov	r2, r9
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b8      	blx	r7
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f43f af27 	beq.w	8009c72 <_printf_float+0xbe>
 8009e24:	f108 0801 	add.w	r8, r8, #1
 8009e28:	e7e6      	b.n	8009df8 <_printf_float+0x244>
 8009e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dc39      	bgt.n	8009ea4 <_printf_float+0x2f0>
 8009e30:	4a1b      	ldr	r2, [pc, #108]	; (8009ea0 <_printf_float+0x2ec>)
 8009e32:	2301      	movs	r3, #1
 8009e34:	4631      	mov	r1, r6
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b8      	blx	r7
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	f43f af19 	beq.w	8009c72 <_printf_float+0xbe>
 8009e40:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009e44:	4313      	orrs	r3, r2
 8009e46:	d102      	bne.n	8009e4e <_printf_float+0x29a>
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	07d9      	lsls	r1, r3, #31
 8009e4c:	d5d8      	bpl.n	8009e00 <_printf_float+0x24c>
 8009e4e:	ee18 3a10 	vmov	r3, s16
 8009e52:	4652      	mov	r2, sl
 8009e54:	4631      	mov	r1, r6
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b8      	blx	r7
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	f43f af09 	beq.w	8009c72 <_printf_float+0xbe>
 8009e60:	f04f 0900 	mov.w	r9, #0
 8009e64:	f104 0a1a 	add.w	sl, r4, #26
 8009e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6a:	425b      	negs	r3, r3
 8009e6c:	454b      	cmp	r3, r9
 8009e6e:	dc01      	bgt.n	8009e74 <_printf_float+0x2c0>
 8009e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e72:	e792      	b.n	8009d9a <_printf_float+0x1e6>
 8009e74:	2301      	movs	r3, #1
 8009e76:	4652      	mov	r2, sl
 8009e78:	4631      	mov	r1, r6
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	47b8      	blx	r7
 8009e7e:	3001      	adds	r0, #1
 8009e80:	f43f aef7 	beq.w	8009c72 <_printf_float+0xbe>
 8009e84:	f109 0901 	add.w	r9, r9, #1
 8009e88:	e7ee      	b.n	8009e68 <_printf_float+0x2b4>
 8009e8a:	bf00      	nop
 8009e8c:	7fefffff 	.word	0x7fefffff
 8009e90:	0800c834 	.word	0x0800c834
 8009e94:	0800c838 	.word	0x0800c838
 8009e98:	0800c83c 	.word	0x0800c83c
 8009e9c:	0800c840 	.word	0x0800c840
 8009ea0:	0800c844 	.word	0x0800c844
 8009ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	bfa8      	it	ge
 8009eac:	461a      	movge	r2, r3
 8009eae:	2a00      	cmp	r2, #0
 8009eb0:	4691      	mov	r9, r2
 8009eb2:	dc37      	bgt.n	8009f24 <_printf_float+0x370>
 8009eb4:	f04f 0b00 	mov.w	fp, #0
 8009eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ebc:	f104 021a 	add.w	r2, r4, #26
 8009ec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ec2:	9305      	str	r3, [sp, #20]
 8009ec4:	eba3 0309 	sub.w	r3, r3, r9
 8009ec8:	455b      	cmp	r3, fp
 8009eca:	dc33      	bgt.n	8009f34 <_printf_float+0x380>
 8009ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	db3b      	blt.n	8009f4c <_printf_float+0x398>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	07da      	lsls	r2, r3, #31
 8009ed8:	d438      	bmi.n	8009f4c <_printf_float+0x398>
 8009eda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ede:	eba2 0903 	sub.w	r9, r2, r3
 8009ee2:	9b05      	ldr	r3, [sp, #20]
 8009ee4:	1ad2      	subs	r2, r2, r3
 8009ee6:	4591      	cmp	r9, r2
 8009ee8:	bfa8      	it	ge
 8009eea:	4691      	movge	r9, r2
 8009eec:	f1b9 0f00 	cmp.w	r9, #0
 8009ef0:	dc35      	bgt.n	8009f5e <_printf_float+0x3aa>
 8009ef2:	f04f 0800 	mov.w	r8, #0
 8009ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009efa:	f104 0a1a 	add.w	sl, r4, #26
 8009efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f02:	1a9b      	subs	r3, r3, r2
 8009f04:	eba3 0309 	sub.w	r3, r3, r9
 8009f08:	4543      	cmp	r3, r8
 8009f0a:	f77f af79 	ble.w	8009e00 <_printf_float+0x24c>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4652      	mov	r2, sl
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f aeaa 	beq.w	8009c72 <_printf_float+0xbe>
 8009f1e:	f108 0801 	add.w	r8, r8, #1
 8009f22:	e7ec      	b.n	8009efe <_printf_float+0x34a>
 8009f24:	4613      	mov	r3, r2
 8009f26:	4631      	mov	r1, r6
 8009f28:	4642      	mov	r2, r8
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d1c0      	bne.n	8009eb4 <_printf_float+0x300>
 8009f32:	e69e      	b.n	8009c72 <_printf_float+0xbe>
 8009f34:	2301      	movs	r3, #1
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	9205      	str	r2, [sp, #20]
 8009f3c:	47b8      	blx	r7
 8009f3e:	3001      	adds	r0, #1
 8009f40:	f43f ae97 	beq.w	8009c72 <_printf_float+0xbe>
 8009f44:	9a05      	ldr	r2, [sp, #20]
 8009f46:	f10b 0b01 	add.w	fp, fp, #1
 8009f4a:	e7b9      	b.n	8009ec0 <_printf_float+0x30c>
 8009f4c:	ee18 3a10 	vmov	r3, s16
 8009f50:	4652      	mov	r2, sl
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d1be      	bne.n	8009eda <_printf_float+0x326>
 8009f5c:	e689      	b.n	8009c72 <_printf_float+0xbe>
 8009f5e:	9a05      	ldr	r2, [sp, #20]
 8009f60:	464b      	mov	r3, r9
 8009f62:	4442      	add	r2, r8
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d1c1      	bne.n	8009ef2 <_printf_float+0x33e>
 8009f6e:	e680      	b.n	8009c72 <_printf_float+0xbe>
 8009f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f72:	2a01      	cmp	r2, #1
 8009f74:	dc01      	bgt.n	8009f7a <_printf_float+0x3c6>
 8009f76:	07db      	lsls	r3, r3, #31
 8009f78:	d53a      	bpl.n	8009ff0 <_printf_float+0x43c>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b8      	blx	r7
 8009f84:	3001      	adds	r0, #1
 8009f86:	f43f ae74 	beq.w	8009c72 <_printf_float+0xbe>
 8009f8a:	ee18 3a10 	vmov	r3, s16
 8009f8e:	4652      	mov	r2, sl
 8009f90:	4631      	mov	r1, r6
 8009f92:	4628      	mov	r0, r5
 8009f94:	47b8      	blx	r7
 8009f96:	3001      	adds	r0, #1
 8009f98:	f43f ae6b 	beq.w	8009c72 <_printf_float+0xbe>
 8009f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009fa8:	f7f6 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fac:	b9d8      	cbnz	r0, 8009fe6 <_printf_float+0x432>
 8009fae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009fb2:	f108 0201 	add.w	r2, r8, #1
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b8      	blx	r7
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d10e      	bne.n	8009fde <_printf_float+0x42a>
 8009fc0:	e657      	b.n	8009c72 <_printf_float+0xbe>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	4652      	mov	r2, sl
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4628      	mov	r0, r5
 8009fca:	47b8      	blx	r7
 8009fcc:	3001      	adds	r0, #1
 8009fce:	f43f ae50 	beq.w	8009c72 <_printf_float+0xbe>
 8009fd2:	f108 0801 	add.w	r8, r8, #1
 8009fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	4543      	cmp	r3, r8
 8009fdc:	dcf1      	bgt.n	8009fc2 <_printf_float+0x40e>
 8009fde:	464b      	mov	r3, r9
 8009fe0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fe4:	e6da      	b.n	8009d9c <_printf_float+0x1e8>
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	f104 0a1a 	add.w	sl, r4, #26
 8009fee:	e7f2      	b.n	8009fd6 <_printf_float+0x422>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	4642      	mov	r2, r8
 8009ff4:	e7df      	b.n	8009fb6 <_printf_float+0x402>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	464a      	mov	r2, r9
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	47b8      	blx	r7
 800a000:	3001      	adds	r0, #1
 800a002:	f43f ae36 	beq.w	8009c72 <_printf_float+0xbe>
 800a006:	f108 0801 	add.w	r8, r8, #1
 800a00a:	68e3      	ldr	r3, [r4, #12]
 800a00c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a00e:	1a5b      	subs	r3, r3, r1
 800a010:	4543      	cmp	r3, r8
 800a012:	dcf0      	bgt.n	8009ff6 <_printf_float+0x442>
 800a014:	e6f8      	b.n	8009e08 <_printf_float+0x254>
 800a016:	f04f 0800 	mov.w	r8, #0
 800a01a:	f104 0919 	add.w	r9, r4, #25
 800a01e:	e7f4      	b.n	800a00a <_printf_float+0x456>

0800a020 <_printf_common>:
 800a020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a024:	4616      	mov	r6, r2
 800a026:	4699      	mov	r9, r3
 800a028:	688a      	ldr	r2, [r1, #8]
 800a02a:	690b      	ldr	r3, [r1, #16]
 800a02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a030:	4293      	cmp	r3, r2
 800a032:	bfb8      	it	lt
 800a034:	4613      	movlt	r3, r2
 800a036:	6033      	str	r3, [r6, #0]
 800a038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a03c:	4607      	mov	r7, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	b10a      	cbz	r2, 800a046 <_printf_common+0x26>
 800a042:	3301      	adds	r3, #1
 800a044:	6033      	str	r3, [r6, #0]
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	0699      	lsls	r1, r3, #26
 800a04a:	bf42      	ittt	mi
 800a04c:	6833      	ldrmi	r3, [r6, #0]
 800a04e:	3302      	addmi	r3, #2
 800a050:	6033      	strmi	r3, [r6, #0]
 800a052:	6825      	ldr	r5, [r4, #0]
 800a054:	f015 0506 	ands.w	r5, r5, #6
 800a058:	d106      	bne.n	800a068 <_printf_common+0x48>
 800a05a:	f104 0a19 	add.w	sl, r4, #25
 800a05e:	68e3      	ldr	r3, [r4, #12]
 800a060:	6832      	ldr	r2, [r6, #0]
 800a062:	1a9b      	subs	r3, r3, r2
 800a064:	42ab      	cmp	r3, r5
 800a066:	dc26      	bgt.n	800a0b6 <_printf_common+0x96>
 800a068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a06c:	1e13      	subs	r3, r2, #0
 800a06e:	6822      	ldr	r2, [r4, #0]
 800a070:	bf18      	it	ne
 800a072:	2301      	movne	r3, #1
 800a074:	0692      	lsls	r2, r2, #26
 800a076:	d42b      	bmi.n	800a0d0 <_printf_common+0xb0>
 800a078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a07c:	4649      	mov	r1, r9
 800a07e:	4638      	mov	r0, r7
 800a080:	47c0      	blx	r8
 800a082:	3001      	adds	r0, #1
 800a084:	d01e      	beq.n	800a0c4 <_printf_common+0xa4>
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	6922      	ldr	r2, [r4, #16]
 800a08a:	f003 0306 	and.w	r3, r3, #6
 800a08e:	2b04      	cmp	r3, #4
 800a090:	bf02      	ittt	eq
 800a092:	68e5      	ldreq	r5, [r4, #12]
 800a094:	6833      	ldreq	r3, [r6, #0]
 800a096:	1aed      	subeq	r5, r5, r3
 800a098:	68a3      	ldr	r3, [r4, #8]
 800a09a:	bf0c      	ite	eq
 800a09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0a0:	2500      	movne	r5, #0
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	bfc4      	itt	gt
 800a0a6:	1a9b      	subgt	r3, r3, r2
 800a0a8:	18ed      	addgt	r5, r5, r3
 800a0aa:	2600      	movs	r6, #0
 800a0ac:	341a      	adds	r4, #26
 800a0ae:	42b5      	cmp	r5, r6
 800a0b0:	d11a      	bne.n	800a0e8 <_printf_common+0xc8>
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	e008      	b.n	800a0c8 <_printf_common+0xa8>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4652      	mov	r2, sl
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	4638      	mov	r0, r7
 800a0be:	47c0      	blx	r8
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d103      	bne.n	800a0cc <_printf_common+0xac>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	e7c6      	b.n	800a05e <_printf_common+0x3e>
 800a0d0:	18e1      	adds	r1, r4, r3
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	2030      	movs	r0, #48	; 0x30
 800a0d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0da:	4422      	add	r2, r4
 800a0dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0e4:	3302      	adds	r3, #2
 800a0e6:	e7c7      	b.n	800a078 <_printf_common+0x58>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	47c0      	blx	r8
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	d0e6      	beq.n	800a0c4 <_printf_common+0xa4>
 800a0f6:	3601      	adds	r6, #1
 800a0f8:	e7d9      	b.n	800a0ae <_printf_common+0x8e>
	...

0800a0fc <_printf_i>:
 800a0fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	7e0f      	ldrb	r7, [r1, #24]
 800a102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a104:	2f78      	cmp	r7, #120	; 0x78
 800a106:	4691      	mov	r9, r2
 800a108:	4680      	mov	r8, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	469a      	mov	sl, r3
 800a10e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a112:	d807      	bhi.n	800a124 <_printf_i+0x28>
 800a114:	2f62      	cmp	r7, #98	; 0x62
 800a116:	d80a      	bhi.n	800a12e <_printf_i+0x32>
 800a118:	2f00      	cmp	r7, #0
 800a11a:	f000 80d4 	beq.w	800a2c6 <_printf_i+0x1ca>
 800a11e:	2f58      	cmp	r7, #88	; 0x58
 800a120:	f000 80c0 	beq.w	800a2a4 <_printf_i+0x1a8>
 800a124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a12c:	e03a      	b.n	800a1a4 <_printf_i+0xa8>
 800a12e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a132:	2b15      	cmp	r3, #21
 800a134:	d8f6      	bhi.n	800a124 <_printf_i+0x28>
 800a136:	a101      	add	r1, pc, #4	; (adr r1, 800a13c <_printf_i+0x40>)
 800a138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a13c:	0800a195 	.word	0x0800a195
 800a140:	0800a1a9 	.word	0x0800a1a9
 800a144:	0800a125 	.word	0x0800a125
 800a148:	0800a125 	.word	0x0800a125
 800a14c:	0800a125 	.word	0x0800a125
 800a150:	0800a125 	.word	0x0800a125
 800a154:	0800a1a9 	.word	0x0800a1a9
 800a158:	0800a125 	.word	0x0800a125
 800a15c:	0800a125 	.word	0x0800a125
 800a160:	0800a125 	.word	0x0800a125
 800a164:	0800a125 	.word	0x0800a125
 800a168:	0800a2ad 	.word	0x0800a2ad
 800a16c:	0800a1d5 	.word	0x0800a1d5
 800a170:	0800a267 	.word	0x0800a267
 800a174:	0800a125 	.word	0x0800a125
 800a178:	0800a125 	.word	0x0800a125
 800a17c:	0800a2cf 	.word	0x0800a2cf
 800a180:	0800a125 	.word	0x0800a125
 800a184:	0800a1d5 	.word	0x0800a1d5
 800a188:	0800a125 	.word	0x0800a125
 800a18c:	0800a125 	.word	0x0800a125
 800a190:	0800a26f 	.word	0x0800a26f
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	1d1a      	adds	r2, r3, #4
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	602a      	str	r2, [r5, #0]
 800a19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e09f      	b.n	800a2e8 <_printf_i+0x1ec>
 800a1a8:	6820      	ldr	r0, [r4, #0]
 800a1aa:	682b      	ldr	r3, [r5, #0]
 800a1ac:	0607      	lsls	r7, r0, #24
 800a1ae:	f103 0104 	add.w	r1, r3, #4
 800a1b2:	6029      	str	r1, [r5, #0]
 800a1b4:	d501      	bpl.n	800a1ba <_printf_i+0xbe>
 800a1b6:	681e      	ldr	r6, [r3, #0]
 800a1b8:	e003      	b.n	800a1c2 <_printf_i+0xc6>
 800a1ba:	0646      	lsls	r6, r0, #25
 800a1bc:	d5fb      	bpl.n	800a1b6 <_printf_i+0xba>
 800a1be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a1c2:	2e00      	cmp	r6, #0
 800a1c4:	da03      	bge.n	800a1ce <_printf_i+0xd2>
 800a1c6:	232d      	movs	r3, #45	; 0x2d
 800a1c8:	4276      	negs	r6, r6
 800a1ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ce:	485a      	ldr	r0, [pc, #360]	; (800a338 <_printf_i+0x23c>)
 800a1d0:	230a      	movs	r3, #10
 800a1d2:	e012      	b.n	800a1fa <_printf_i+0xfe>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	6820      	ldr	r0, [r4, #0]
 800a1d8:	1d19      	adds	r1, r3, #4
 800a1da:	6029      	str	r1, [r5, #0]
 800a1dc:	0605      	lsls	r5, r0, #24
 800a1de:	d501      	bpl.n	800a1e4 <_printf_i+0xe8>
 800a1e0:	681e      	ldr	r6, [r3, #0]
 800a1e2:	e002      	b.n	800a1ea <_printf_i+0xee>
 800a1e4:	0641      	lsls	r1, r0, #25
 800a1e6:	d5fb      	bpl.n	800a1e0 <_printf_i+0xe4>
 800a1e8:	881e      	ldrh	r6, [r3, #0]
 800a1ea:	4853      	ldr	r0, [pc, #332]	; (800a338 <_printf_i+0x23c>)
 800a1ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2308      	moveq	r3, #8
 800a1f2:	230a      	movne	r3, #10
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1fa:	6865      	ldr	r5, [r4, #4]
 800a1fc:	60a5      	str	r5, [r4, #8]
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	bfa2      	ittt	ge
 800a202:	6821      	ldrge	r1, [r4, #0]
 800a204:	f021 0104 	bicge.w	r1, r1, #4
 800a208:	6021      	strge	r1, [r4, #0]
 800a20a:	b90e      	cbnz	r6, 800a210 <_printf_i+0x114>
 800a20c:	2d00      	cmp	r5, #0
 800a20e:	d04b      	beq.n	800a2a8 <_printf_i+0x1ac>
 800a210:	4615      	mov	r5, r2
 800a212:	fbb6 f1f3 	udiv	r1, r6, r3
 800a216:	fb03 6711 	mls	r7, r3, r1, r6
 800a21a:	5dc7      	ldrb	r7, [r0, r7]
 800a21c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a220:	4637      	mov	r7, r6
 800a222:	42bb      	cmp	r3, r7
 800a224:	460e      	mov	r6, r1
 800a226:	d9f4      	bls.n	800a212 <_printf_i+0x116>
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d10b      	bne.n	800a244 <_printf_i+0x148>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	07de      	lsls	r6, r3, #31
 800a230:	d508      	bpl.n	800a244 <_printf_i+0x148>
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	6861      	ldr	r1, [r4, #4]
 800a236:	4299      	cmp	r1, r3
 800a238:	bfde      	ittt	le
 800a23a:	2330      	movle	r3, #48	; 0x30
 800a23c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a240:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a244:	1b52      	subs	r2, r2, r5
 800a246:	6122      	str	r2, [r4, #16]
 800a248:	f8cd a000 	str.w	sl, [sp]
 800a24c:	464b      	mov	r3, r9
 800a24e:	aa03      	add	r2, sp, #12
 800a250:	4621      	mov	r1, r4
 800a252:	4640      	mov	r0, r8
 800a254:	f7ff fee4 	bl	800a020 <_printf_common>
 800a258:	3001      	adds	r0, #1
 800a25a:	d14a      	bne.n	800a2f2 <_printf_i+0x1f6>
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295
 800a260:	b004      	add	sp, #16
 800a262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	f043 0320 	orr.w	r3, r3, #32
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	4833      	ldr	r0, [pc, #204]	; (800a33c <_printf_i+0x240>)
 800a270:	2778      	movs	r7, #120	; 0x78
 800a272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	6829      	ldr	r1, [r5, #0]
 800a27a:	061f      	lsls	r7, r3, #24
 800a27c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a280:	d402      	bmi.n	800a288 <_printf_i+0x18c>
 800a282:	065f      	lsls	r7, r3, #25
 800a284:	bf48      	it	mi
 800a286:	b2b6      	uxthmi	r6, r6
 800a288:	07df      	lsls	r7, r3, #31
 800a28a:	bf48      	it	mi
 800a28c:	f043 0320 	orrmi.w	r3, r3, #32
 800a290:	6029      	str	r1, [r5, #0]
 800a292:	bf48      	it	mi
 800a294:	6023      	strmi	r3, [r4, #0]
 800a296:	b91e      	cbnz	r6, 800a2a0 <_printf_i+0x1a4>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	f023 0320 	bic.w	r3, r3, #32
 800a29e:	6023      	str	r3, [r4, #0]
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	e7a7      	b.n	800a1f4 <_printf_i+0xf8>
 800a2a4:	4824      	ldr	r0, [pc, #144]	; (800a338 <_printf_i+0x23c>)
 800a2a6:	e7e4      	b.n	800a272 <_printf_i+0x176>
 800a2a8:	4615      	mov	r5, r2
 800a2aa:	e7bd      	b.n	800a228 <_printf_i+0x12c>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	6826      	ldr	r6, [r4, #0]
 800a2b0:	6961      	ldr	r1, [r4, #20]
 800a2b2:	1d18      	adds	r0, r3, #4
 800a2b4:	6028      	str	r0, [r5, #0]
 800a2b6:	0635      	lsls	r5, r6, #24
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	d501      	bpl.n	800a2c0 <_printf_i+0x1c4>
 800a2bc:	6019      	str	r1, [r3, #0]
 800a2be:	e002      	b.n	800a2c6 <_printf_i+0x1ca>
 800a2c0:	0670      	lsls	r0, r6, #25
 800a2c2:	d5fb      	bpl.n	800a2bc <_printf_i+0x1c0>
 800a2c4:	8019      	strh	r1, [r3, #0]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	6123      	str	r3, [r4, #16]
 800a2ca:	4615      	mov	r5, r2
 800a2cc:	e7bc      	b.n	800a248 <_printf_i+0x14c>
 800a2ce:	682b      	ldr	r3, [r5, #0]
 800a2d0:	1d1a      	adds	r2, r3, #4
 800a2d2:	602a      	str	r2, [r5, #0]
 800a2d4:	681d      	ldr	r5, [r3, #0]
 800a2d6:	6862      	ldr	r2, [r4, #4]
 800a2d8:	2100      	movs	r1, #0
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f7f5 ff78 	bl	80001d0 <memchr>
 800a2e0:	b108      	cbz	r0, 800a2e6 <_printf_i+0x1ea>
 800a2e2:	1b40      	subs	r0, r0, r5
 800a2e4:	6060      	str	r0, [r4, #4]
 800a2e6:	6863      	ldr	r3, [r4, #4]
 800a2e8:	6123      	str	r3, [r4, #16]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f0:	e7aa      	b.n	800a248 <_printf_i+0x14c>
 800a2f2:	6923      	ldr	r3, [r4, #16]
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	47d0      	blx	sl
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d0ad      	beq.n	800a25c <_printf_i+0x160>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	079b      	lsls	r3, r3, #30
 800a304:	d413      	bmi.n	800a32e <_printf_i+0x232>
 800a306:	68e0      	ldr	r0, [r4, #12]
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	4298      	cmp	r0, r3
 800a30c:	bfb8      	it	lt
 800a30e:	4618      	movlt	r0, r3
 800a310:	e7a6      	b.n	800a260 <_printf_i+0x164>
 800a312:	2301      	movs	r3, #1
 800a314:	4632      	mov	r2, r6
 800a316:	4649      	mov	r1, r9
 800a318:	4640      	mov	r0, r8
 800a31a:	47d0      	blx	sl
 800a31c:	3001      	adds	r0, #1
 800a31e:	d09d      	beq.n	800a25c <_printf_i+0x160>
 800a320:	3501      	adds	r5, #1
 800a322:	68e3      	ldr	r3, [r4, #12]
 800a324:	9903      	ldr	r1, [sp, #12]
 800a326:	1a5b      	subs	r3, r3, r1
 800a328:	42ab      	cmp	r3, r5
 800a32a:	dcf2      	bgt.n	800a312 <_printf_i+0x216>
 800a32c:	e7eb      	b.n	800a306 <_printf_i+0x20a>
 800a32e:	2500      	movs	r5, #0
 800a330:	f104 0619 	add.w	r6, r4, #25
 800a334:	e7f5      	b.n	800a322 <_printf_i+0x226>
 800a336:	bf00      	nop
 800a338:	0800c846 	.word	0x0800c846
 800a33c:	0800c857 	.word	0x0800c857

0800a340 <std>:
 800a340:	2300      	movs	r3, #0
 800a342:	b510      	push	{r4, lr}
 800a344:	4604      	mov	r4, r0
 800a346:	e9c0 3300 	strd	r3, r3, [r0]
 800a34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a34e:	6083      	str	r3, [r0, #8]
 800a350:	8181      	strh	r1, [r0, #12]
 800a352:	6643      	str	r3, [r0, #100]	; 0x64
 800a354:	81c2      	strh	r2, [r0, #14]
 800a356:	6183      	str	r3, [r0, #24]
 800a358:	4619      	mov	r1, r3
 800a35a:	2208      	movs	r2, #8
 800a35c:	305c      	adds	r0, #92	; 0x5c
 800a35e:	f000 f914 	bl	800a58a <memset>
 800a362:	4b0d      	ldr	r3, [pc, #52]	; (800a398 <std+0x58>)
 800a364:	6263      	str	r3, [r4, #36]	; 0x24
 800a366:	4b0d      	ldr	r3, [pc, #52]	; (800a39c <std+0x5c>)
 800a368:	62a3      	str	r3, [r4, #40]	; 0x28
 800a36a:	4b0d      	ldr	r3, [pc, #52]	; (800a3a0 <std+0x60>)
 800a36c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a36e:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <std+0x64>)
 800a370:	6323      	str	r3, [r4, #48]	; 0x30
 800a372:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <std+0x68>)
 800a374:	6224      	str	r4, [r4, #32]
 800a376:	429c      	cmp	r4, r3
 800a378:	d006      	beq.n	800a388 <std+0x48>
 800a37a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a37e:	4294      	cmp	r4, r2
 800a380:	d002      	beq.n	800a388 <std+0x48>
 800a382:	33d0      	adds	r3, #208	; 0xd0
 800a384:	429c      	cmp	r4, r3
 800a386:	d105      	bne.n	800a394 <std+0x54>
 800a388:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a390:	f000 b978 	b.w	800a684 <__retarget_lock_init_recursive>
 800a394:	bd10      	pop	{r4, pc}
 800a396:	bf00      	nop
 800a398:	0800a505 	.word	0x0800a505
 800a39c:	0800a527 	.word	0x0800a527
 800a3a0:	0800a55f 	.word	0x0800a55f
 800a3a4:	0800a583 	.word	0x0800a583
 800a3a8:	200015dc 	.word	0x200015dc

0800a3ac <stdio_exit_handler>:
 800a3ac:	4a02      	ldr	r2, [pc, #8]	; (800a3b8 <stdio_exit_handler+0xc>)
 800a3ae:	4903      	ldr	r1, [pc, #12]	; (800a3bc <stdio_exit_handler+0x10>)
 800a3b0:	4803      	ldr	r0, [pc, #12]	; (800a3c0 <stdio_exit_handler+0x14>)
 800a3b2:	f000 b869 	b.w	800a488 <_fwalk_sglue>
 800a3b6:	bf00      	nop
 800a3b8:	2000017c 	.word	0x2000017c
 800a3bc:	0800c039 	.word	0x0800c039
 800a3c0:	20000188 	.word	0x20000188

0800a3c4 <cleanup_stdio>:
 800a3c4:	6841      	ldr	r1, [r0, #4]
 800a3c6:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <cleanup_stdio+0x34>)
 800a3c8:	4299      	cmp	r1, r3
 800a3ca:	b510      	push	{r4, lr}
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	d001      	beq.n	800a3d4 <cleanup_stdio+0x10>
 800a3d0:	f001 fe32 	bl	800c038 <_fflush_r>
 800a3d4:	68a1      	ldr	r1, [r4, #8]
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <cleanup_stdio+0x38>)
 800a3d8:	4299      	cmp	r1, r3
 800a3da:	d002      	beq.n	800a3e2 <cleanup_stdio+0x1e>
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f001 fe2b 	bl	800c038 <_fflush_r>
 800a3e2:	68e1      	ldr	r1, [r4, #12]
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <cleanup_stdio+0x3c>)
 800a3e6:	4299      	cmp	r1, r3
 800a3e8:	d004      	beq.n	800a3f4 <cleanup_stdio+0x30>
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f0:	f001 be22 	b.w	800c038 <_fflush_r>
 800a3f4:	bd10      	pop	{r4, pc}
 800a3f6:	bf00      	nop
 800a3f8:	200015dc 	.word	0x200015dc
 800a3fc:	20001644 	.word	0x20001644
 800a400:	200016ac 	.word	0x200016ac

0800a404 <global_stdio_init.part.0>:
 800a404:	b510      	push	{r4, lr}
 800a406:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <global_stdio_init.part.0+0x30>)
 800a408:	4c0b      	ldr	r4, [pc, #44]	; (800a438 <global_stdio_init.part.0+0x34>)
 800a40a:	4a0c      	ldr	r2, [pc, #48]	; (800a43c <global_stdio_init.part.0+0x38>)
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	4620      	mov	r0, r4
 800a410:	2200      	movs	r2, #0
 800a412:	2104      	movs	r1, #4
 800a414:	f7ff ff94 	bl	800a340 <std>
 800a418:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a41c:	2201      	movs	r2, #1
 800a41e:	2109      	movs	r1, #9
 800a420:	f7ff ff8e 	bl	800a340 <std>
 800a424:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a428:	2202      	movs	r2, #2
 800a42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a42e:	2112      	movs	r1, #18
 800a430:	f7ff bf86 	b.w	800a340 <std>
 800a434:	20001714 	.word	0x20001714
 800a438:	200015dc 	.word	0x200015dc
 800a43c:	0800a3ad 	.word	0x0800a3ad

0800a440 <__sfp_lock_acquire>:
 800a440:	4801      	ldr	r0, [pc, #4]	; (800a448 <__sfp_lock_acquire+0x8>)
 800a442:	f000 b920 	b.w	800a686 <__retarget_lock_acquire_recursive>
 800a446:	bf00      	nop
 800a448:	2000171d 	.word	0x2000171d

0800a44c <__sfp_lock_release>:
 800a44c:	4801      	ldr	r0, [pc, #4]	; (800a454 <__sfp_lock_release+0x8>)
 800a44e:	f000 b91b 	b.w	800a688 <__retarget_lock_release_recursive>
 800a452:	bf00      	nop
 800a454:	2000171d 	.word	0x2000171d

0800a458 <__sinit>:
 800a458:	b510      	push	{r4, lr}
 800a45a:	4604      	mov	r4, r0
 800a45c:	f7ff fff0 	bl	800a440 <__sfp_lock_acquire>
 800a460:	6a23      	ldr	r3, [r4, #32]
 800a462:	b11b      	cbz	r3, 800a46c <__sinit+0x14>
 800a464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a468:	f7ff bff0 	b.w	800a44c <__sfp_lock_release>
 800a46c:	4b04      	ldr	r3, [pc, #16]	; (800a480 <__sinit+0x28>)
 800a46e:	6223      	str	r3, [r4, #32]
 800a470:	4b04      	ldr	r3, [pc, #16]	; (800a484 <__sinit+0x2c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1f5      	bne.n	800a464 <__sinit+0xc>
 800a478:	f7ff ffc4 	bl	800a404 <global_stdio_init.part.0>
 800a47c:	e7f2      	b.n	800a464 <__sinit+0xc>
 800a47e:	bf00      	nop
 800a480:	0800a3c5 	.word	0x0800a3c5
 800a484:	20001714 	.word	0x20001714

0800a488 <_fwalk_sglue>:
 800a488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a48c:	4607      	mov	r7, r0
 800a48e:	4688      	mov	r8, r1
 800a490:	4614      	mov	r4, r2
 800a492:	2600      	movs	r6, #0
 800a494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a498:	f1b9 0901 	subs.w	r9, r9, #1
 800a49c:	d505      	bpl.n	800a4aa <_fwalk_sglue+0x22>
 800a49e:	6824      	ldr	r4, [r4, #0]
 800a4a0:	2c00      	cmp	r4, #0
 800a4a2:	d1f7      	bne.n	800a494 <_fwalk_sglue+0xc>
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4aa:	89ab      	ldrh	r3, [r5, #12]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d907      	bls.n	800a4c0 <_fwalk_sglue+0x38>
 800a4b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	d003      	beq.n	800a4c0 <_fwalk_sglue+0x38>
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	47c0      	blx	r8
 800a4be:	4306      	orrs	r6, r0
 800a4c0:	3568      	adds	r5, #104	; 0x68
 800a4c2:	e7e9      	b.n	800a498 <_fwalk_sglue+0x10>

0800a4c4 <siprintf>:
 800a4c4:	b40e      	push	{r1, r2, r3}
 800a4c6:	b500      	push	{lr}
 800a4c8:	b09c      	sub	sp, #112	; 0x70
 800a4ca:	ab1d      	add	r3, sp, #116	; 0x74
 800a4cc:	9002      	str	r0, [sp, #8]
 800a4ce:	9006      	str	r0, [sp, #24]
 800a4d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4d4:	4809      	ldr	r0, [pc, #36]	; (800a4fc <siprintf+0x38>)
 800a4d6:	9107      	str	r1, [sp, #28]
 800a4d8:	9104      	str	r1, [sp, #16]
 800a4da:	4909      	ldr	r1, [pc, #36]	; (800a500 <siprintf+0x3c>)
 800a4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e0:	9105      	str	r1, [sp, #20]
 800a4e2:	6800      	ldr	r0, [r0, #0]
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	a902      	add	r1, sp, #8
 800a4e8:	f001 fc22 	bl	800bd30 <_svfiprintf_r>
 800a4ec:	9b02      	ldr	r3, [sp, #8]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]
 800a4f2:	b01c      	add	sp, #112	; 0x70
 800a4f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4f8:	b003      	add	sp, #12
 800a4fa:	4770      	bx	lr
 800a4fc:	200001d4 	.word	0x200001d4
 800a500:	ffff0208 	.word	0xffff0208

0800a504 <__sread>:
 800a504:	b510      	push	{r4, lr}
 800a506:	460c      	mov	r4, r1
 800a508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a50c:	f000 f86c 	bl	800a5e8 <_read_r>
 800a510:	2800      	cmp	r0, #0
 800a512:	bfab      	itete	ge
 800a514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a516:	89a3      	ldrhlt	r3, [r4, #12]
 800a518:	181b      	addge	r3, r3, r0
 800a51a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a51e:	bfac      	ite	ge
 800a520:	6563      	strge	r3, [r4, #84]	; 0x54
 800a522:	81a3      	strhlt	r3, [r4, #12]
 800a524:	bd10      	pop	{r4, pc}

0800a526 <__swrite>:
 800a526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52a:	461f      	mov	r7, r3
 800a52c:	898b      	ldrh	r3, [r1, #12]
 800a52e:	05db      	lsls	r3, r3, #23
 800a530:	4605      	mov	r5, r0
 800a532:	460c      	mov	r4, r1
 800a534:	4616      	mov	r6, r2
 800a536:	d505      	bpl.n	800a544 <__swrite+0x1e>
 800a538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53c:	2302      	movs	r3, #2
 800a53e:	2200      	movs	r2, #0
 800a540:	f000 f840 	bl	800a5c4 <_lseek_r>
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a54a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a54e:	81a3      	strh	r3, [r4, #12]
 800a550:	4632      	mov	r2, r6
 800a552:	463b      	mov	r3, r7
 800a554:	4628      	mov	r0, r5
 800a556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a55a:	f000 b857 	b.w	800a60c <_write_r>

0800a55e <__sseek>:
 800a55e:	b510      	push	{r4, lr}
 800a560:	460c      	mov	r4, r1
 800a562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a566:	f000 f82d 	bl	800a5c4 <_lseek_r>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	bf15      	itete	ne
 800a570:	6560      	strne	r0, [r4, #84]	; 0x54
 800a572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a57a:	81a3      	strheq	r3, [r4, #12]
 800a57c:	bf18      	it	ne
 800a57e:	81a3      	strhne	r3, [r4, #12]
 800a580:	bd10      	pop	{r4, pc}

0800a582 <__sclose>:
 800a582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a586:	f000 b80d 	b.w	800a5a4 <_close_r>

0800a58a <memset>:
 800a58a:	4402      	add	r2, r0
 800a58c:	4603      	mov	r3, r0
 800a58e:	4293      	cmp	r3, r2
 800a590:	d100      	bne.n	800a594 <memset+0xa>
 800a592:	4770      	bx	lr
 800a594:	f803 1b01 	strb.w	r1, [r3], #1
 800a598:	e7f9      	b.n	800a58e <memset+0x4>
	...

0800a59c <_localeconv_r>:
 800a59c:	4800      	ldr	r0, [pc, #0]	; (800a5a0 <_localeconv_r+0x4>)
 800a59e:	4770      	bx	lr
 800a5a0:	200002c8 	.word	0x200002c8

0800a5a4 <_close_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d06      	ldr	r5, [pc, #24]	; (800a5c0 <_close_r+0x1c>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	f7f6 ff29 	bl	8001406 <_close>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_close_r+0x1a>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_close_r+0x1a>
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	20001718 	.word	0x20001718

0800a5c4 <_lseek_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4d07      	ldr	r5, [pc, #28]	; (800a5e4 <_lseek_r+0x20>)
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	602a      	str	r2, [r5, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f7f6 ff3e 	bl	8001454 <_lseek>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_lseek_r+0x1e>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_lseek_r+0x1e>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20001718 	.word	0x20001718

0800a5e8 <_read_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d07      	ldr	r5, [pc, #28]	; (800a608 <_read_r+0x20>)
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	4608      	mov	r0, r1
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	602a      	str	r2, [r5, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f7f6 fecc 	bl	8001394 <_read>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d102      	bne.n	800a606 <_read_r+0x1e>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	b103      	cbz	r3, 800a606 <_read_r+0x1e>
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	20001718 	.word	0x20001718

0800a60c <_write_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d07      	ldr	r5, [pc, #28]	; (800a62c <_write_r+0x20>)
 800a610:	4604      	mov	r4, r0
 800a612:	4608      	mov	r0, r1
 800a614:	4611      	mov	r1, r2
 800a616:	2200      	movs	r2, #0
 800a618:	602a      	str	r2, [r5, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	f7f6 fed7 	bl	80013ce <_write>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_write_r+0x1e>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_write_r+0x1e>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	20001718 	.word	0x20001718

0800a630 <__errno>:
 800a630:	4b01      	ldr	r3, [pc, #4]	; (800a638 <__errno+0x8>)
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	200001d4 	.word	0x200001d4

0800a63c <__libc_init_array>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4d0d      	ldr	r5, [pc, #52]	; (800a674 <__libc_init_array+0x38>)
 800a640:	4c0d      	ldr	r4, [pc, #52]	; (800a678 <__libc_init_array+0x3c>)
 800a642:	1b64      	subs	r4, r4, r5
 800a644:	10a4      	asrs	r4, r4, #2
 800a646:	2600      	movs	r6, #0
 800a648:	42a6      	cmp	r6, r4
 800a64a:	d109      	bne.n	800a660 <__libc_init_array+0x24>
 800a64c:	4d0b      	ldr	r5, [pc, #44]	; (800a67c <__libc_init_array+0x40>)
 800a64e:	4c0c      	ldr	r4, [pc, #48]	; (800a680 <__libc_init_array+0x44>)
 800a650:	f002 f896 	bl	800c780 <_init>
 800a654:	1b64      	subs	r4, r4, r5
 800a656:	10a4      	asrs	r4, r4, #2
 800a658:	2600      	movs	r6, #0
 800a65a:	42a6      	cmp	r6, r4
 800a65c:	d105      	bne.n	800a66a <__libc_init_array+0x2e>
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	f855 3b04 	ldr.w	r3, [r5], #4
 800a664:	4798      	blx	r3
 800a666:	3601      	adds	r6, #1
 800a668:	e7ee      	b.n	800a648 <__libc_init_array+0xc>
 800a66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a66e:	4798      	blx	r3
 800a670:	3601      	adds	r6, #1
 800a672:	e7f2      	b.n	800a65a <__libc_init_array+0x1e>
 800a674:	0800cba4 	.word	0x0800cba4
 800a678:	0800cba4 	.word	0x0800cba4
 800a67c:	0800cba4 	.word	0x0800cba4
 800a680:	0800cba8 	.word	0x0800cba8

0800a684 <__retarget_lock_init_recursive>:
 800a684:	4770      	bx	lr

0800a686 <__retarget_lock_acquire_recursive>:
 800a686:	4770      	bx	lr

0800a688 <__retarget_lock_release_recursive>:
 800a688:	4770      	bx	lr

0800a68a <quorem>:
 800a68a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68e:	6903      	ldr	r3, [r0, #16]
 800a690:	690c      	ldr	r4, [r1, #16]
 800a692:	42a3      	cmp	r3, r4
 800a694:	4607      	mov	r7, r0
 800a696:	db7e      	blt.n	800a796 <quorem+0x10c>
 800a698:	3c01      	subs	r4, #1
 800a69a:	f101 0814 	add.w	r8, r1, #20
 800a69e:	f100 0514 	add.w	r5, r0, #20
 800a6a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6c0:	d331      	bcc.n	800a726 <quorem+0x9c>
 800a6c2:	f04f 0e00 	mov.w	lr, #0
 800a6c6:	4640      	mov	r0, r8
 800a6c8:	46ac      	mov	ip, r5
 800a6ca:	46f2      	mov	sl, lr
 800a6cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6d0:	b293      	uxth	r3, r2
 800a6d2:	fb06 e303 	mla	r3, r6, r3, lr
 800a6d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6da:	0c1a      	lsrs	r2, r3, #16
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	ebaa 0303 	sub.w	r3, sl, r3
 800a6e2:	f8dc a000 	ldr.w	sl, [ip]
 800a6e6:	fa13 f38a 	uxtah	r3, r3, sl
 800a6ea:	fb06 220e 	mla	r2, r6, lr, r2
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6f6:	b292      	uxth	r2, r2
 800a6f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a700:	f8bd 3000 	ldrh.w	r3, [sp]
 800a704:	4581      	cmp	r9, r0
 800a706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a70a:	f84c 3b04 	str.w	r3, [ip], #4
 800a70e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a712:	d2db      	bcs.n	800a6cc <quorem+0x42>
 800a714:	f855 300b 	ldr.w	r3, [r5, fp]
 800a718:	b92b      	cbnz	r3, 800a726 <quorem+0x9c>
 800a71a:	9b01      	ldr	r3, [sp, #4]
 800a71c:	3b04      	subs	r3, #4
 800a71e:	429d      	cmp	r5, r3
 800a720:	461a      	mov	r2, r3
 800a722:	d32c      	bcc.n	800a77e <quorem+0xf4>
 800a724:	613c      	str	r4, [r7, #16]
 800a726:	4638      	mov	r0, r7
 800a728:	f001 f9a8 	bl	800ba7c <__mcmp>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	db22      	blt.n	800a776 <quorem+0xec>
 800a730:	3601      	adds	r6, #1
 800a732:	4629      	mov	r1, r5
 800a734:	2000      	movs	r0, #0
 800a736:	f858 2b04 	ldr.w	r2, [r8], #4
 800a73a:	f8d1 c000 	ldr.w	ip, [r1]
 800a73e:	b293      	uxth	r3, r2
 800a740:	1ac3      	subs	r3, r0, r3
 800a742:	0c12      	lsrs	r2, r2, #16
 800a744:	fa13 f38c 	uxtah	r3, r3, ip
 800a748:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a74c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a750:	b29b      	uxth	r3, r3
 800a752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a756:	45c1      	cmp	r9, r8
 800a758:	f841 3b04 	str.w	r3, [r1], #4
 800a75c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a760:	d2e9      	bcs.n	800a736 <quorem+0xac>
 800a762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a76a:	b922      	cbnz	r2, 800a776 <quorem+0xec>
 800a76c:	3b04      	subs	r3, #4
 800a76e:	429d      	cmp	r5, r3
 800a770:	461a      	mov	r2, r3
 800a772:	d30a      	bcc.n	800a78a <quorem+0x100>
 800a774:	613c      	str	r4, [r7, #16]
 800a776:	4630      	mov	r0, r6
 800a778:	b003      	add	sp, #12
 800a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77e:	6812      	ldr	r2, [r2, #0]
 800a780:	3b04      	subs	r3, #4
 800a782:	2a00      	cmp	r2, #0
 800a784:	d1ce      	bne.n	800a724 <quorem+0x9a>
 800a786:	3c01      	subs	r4, #1
 800a788:	e7c9      	b.n	800a71e <quorem+0x94>
 800a78a:	6812      	ldr	r2, [r2, #0]
 800a78c:	3b04      	subs	r3, #4
 800a78e:	2a00      	cmp	r2, #0
 800a790:	d1f0      	bne.n	800a774 <quorem+0xea>
 800a792:	3c01      	subs	r4, #1
 800a794:	e7eb      	b.n	800a76e <quorem+0xe4>
 800a796:	2000      	movs	r0, #0
 800a798:	e7ee      	b.n	800a778 <quorem+0xee>
 800a79a:	0000      	movs	r0, r0
 800a79c:	0000      	movs	r0, r0
	...

0800a7a0 <_dtoa_r>:
 800a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a4:	ed2d 8b04 	vpush	{d8-d9}
 800a7a8:	69c5      	ldr	r5, [r0, #28]
 800a7aa:	b093      	sub	sp, #76	; 0x4c
 800a7ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7b0:	ec57 6b10 	vmov	r6, r7, d0
 800a7b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a7b8:	9107      	str	r1, [sp, #28]
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a7be:	930d      	str	r3, [sp, #52]	; 0x34
 800a7c0:	b975      	cbnz	r5, 800a7e0 <_dtoa_r+0x40>
 800a7c2:	2010      	movs	r0, #16
 800a7c4:	f000 fe2a 	bl	800b41c <malloc>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	61e0      	str	r0, [r4, #28]
 800a7cc:	b920      	cbnz	r0, 800a7d8 <_dtoa_r+0x38>
 800a7ce:	4bae      	ldr	r3, [pc, #696]	; (800aa88 <_dtoa_r+0x2e8>)
 800a7d0:	21ef      	movs	r1, #239	; 0xef
 800a7d2:	48ae      	ldr	r0, [pc, #696]	; (800aa8c <_dtoa_r+0x2ec>)
 800a7d4:	f001 fc90 	bl	800c0f8 <__assert_func>
 800a7d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7dc:	6005      	str	r5, [r0, #0]
 800a7de:	60c5      	str	r5, [r0, #12]
 800a7e0:	69e3      	ldr	r3, [r4, #28]
 800a7e2:	6819      	ldr	r1, [r3, #0]
 800a7e4:	b151      	cbz	r1, 800a7fc <_dtoa_r+0x5c>
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	604a      	str	r2, [r1, #4]
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	4093      	lsls	r3, r2
 800a7ee:	608b      	str	r3, [r1, #8]
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 ff07 	bl	800b604 <_Bfree>
 800a7f6:	69e3      	ldr	r3, [r4, #28]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	1e3b      	subs	r3, r7, #0
 800a7fe:	bfbb      	ittet	lt
 800a800:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a804:	9303      	strlt	r3, [sp, #12]
 800a806:	2300      	movge	r3, #0
 800a808:	2201      	movlt	r2, #1
 800a80a:	bfac      	ite	ge
 800a80c:	f8c8 3000 	strge.w	r3, [r8]
 800a810:	f8c8 2000 	strlt.w	r2, [r8]
 800a814:	4b9e      	ldr	r3, [pc, #632]	; (800aa90 <_dtoa_r+0x2f0>)
 800a816:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a81a:	ea33 0308 	bics.w	r3, r3, r8
 800a81e:	d11b      	bne.n	800a858 <_dtoa_r+0xb8>
 800a820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a822:	f242 730f 	movw	r3, #9999	; 0x270f
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a82c:	4333      	orrs	r3, r6
 800a82e:	f000 8593 	beq.w	800b358 <_dtoa_r+0xbb8>
 800a832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a834:	b963      	cbnz	r3, 800a850 <_dtoa_r+0xb0>
 800a836:	4b97      	ldr	r3, [pc, #604]	; (800aa94 <_dtoa_r+0x2f4>)
 800a838:	e027      	b.n	800a88a <_dtoa_r+0xea>
 800a83a:	4b97      	ldr	r3, [pc, #604]	; (800aa98 <_dtoa_r+0x2f8>)
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	3308      	adds	r3, #8
 800a840:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	9800      	ldr	r0, [sp, #0]
 800a846:	b013      	add	sp, #76	; 0x4c
 800a848:	ecbd 8b04 	vpop	{d8-d9}
 800a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a850:	4b90      	ldr	r3, [pc, #576]	; (800aa94 <_dtoa_r+0x2f4>)
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	3303      	adds	r3, #3
 800a856:	e7f3      	b.n	800a840 <_dtoa_r+0xa0>
 800a858:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a85c:	2200      	movs	r2, #0
 800a85e:	ec51 0b17 	vmov	r0, r1, d7
 800a862:	eeb0 8a47 	vmov.f32	s16, s14
 800a866:	eef0 8a67 	vmov.f32	s17, s15
 800a86a:	2300      	movs	r3, #0
 800a86c:	f7f6 f92c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a870:	4681      	mov	r9, r0
 800a872:	b160      	cbz	r0, 800a88e <_dtoa_r+0xee>
 800a874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a876:	2301      	movs	r3, #1
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 8568 	beq.w	800b352 <_dtoa_r+0xbb2>
 800a882:	4b86      	ldr	r3, [pc, #536]	; (800aa9c <_dtoa_r+0x2fc>)
 800a884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	3b01      	subs	r3, #1
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	e7da      	b.n	800a844 <_dtoa_r+0xa4>
 800a88e:	aa10      	add	r2, sp, #64	; 0x40
 800a890:	a911      	add	r1, sp, #68	; 0x44
 800a892:	4620      	mov	r0, r4
 800a894:	eeb0 0a48 	vmov.f32	s0, s16
 800a898:	eef0 0a68 	vmov.f32	s1, s17
 800a89c:	f001 f994 	bl	800bbc8 <__d2b>
 800a8a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a8a4:	4682      	mov	sl, r0
 800a8a6:	2d00      	cmp	r5, #0
 800a8a8:	d07f      	beq.n	800a9aa <_dtoa_r+0x20a>
 800a8aa:	ee18 3a90 	vmov	r3, s17
 800a8ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a8b6:	ec51 0b18 	vmov	r0, r1, d8
 800a8ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a8be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a8c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4b75      	ldr	r3, [pc, #468]	; (800aaa0 <_dtoa_r+0x300>)
 800a8cc:	f7f5 fcdc 	bl	8000288 <__aeabi_dsub>
 800a8d0:	a367      	add	r3, pc, #412	; (adr r3, 800aa70 <_dtoa_r+0x2d0>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	f7f5 fe8f 	bl	80005f8 <__aeabi_dmul>
 800a8da:	a367      	add	r3, pc, #412	; (adr r3, 800aa78 <_dtoa_r+0x2d8>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f7f5 fcd4 	bl	800028c <__adddf3>
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	f7f5 fe1b 	bl	8000524 <__aeabi_i2d>
 800a8ee:	a364      	add	r3, pc, #400	; (adr r3, 800aa80 <_dtoa_r+0x2e0>)
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	f7f5 fe80 	bl	80005f8 <__aeabi_dmul>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	4639      	mov	r1, r7
 800a900:	f7f5 fcc4 	bl	800028c <__adddf3>
 800a904:	4606      	mov	r6, r0
 800a906:	460f      	mov	r7, r1
 800a908:	f7f6 f926 	bl	8000b58 <__aeabi_d2iz>
 800a90c:	2200      	movs	r2, #0
 800a90e:	4683      	mov	fp, r0
 800a910:	2300      	movs	r3, #0
 800a912:	4630      	mov	r0, r6
 800a914:	4639      	mov	r1, r7
 800a916:	f7f6 f8e1 	bl	8000adc <__aeabi_dcmplt>
 800a91a:	b148      	cbz	r0, 800a930 <_dtoa_r+0x190>
 800a91c:	4658      	mov	r0, fp
 800a91e:	f7f5 fe01 	bl	8000524 <__aeabi_i2d>
 800a922:	4632      	mov	r2, r6
 800a924:	463b      	mov	r3, r7
 800a926:	f7f6 f8cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a92a:	b908      	cbnz	r0, 800a930 <_dtoa_r+0x190>
 800a92c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a930:	f1bb 0f16 	cmp.w	fp, #22
 800a934:	d857      	bhi.n	800a9e6 <_dtoa_r+0x246>
 800a936:	4b5b      	ldr	r3, [pc, #364]	; (800aaa4 <_dtoa_r+0x304>)
 800a938:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	ec51 0b18 	vmov	r0, r1, d8
 800a944:	f7f6 f8ca 	bl	8000adc <__aeabi_dcmplt>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d04e      	beq.n	800a9ea <_dtoa_r+0x24a>
 800a94c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a950:	2300      	movs	r3, #0
 800a952:	930c      	str	r3, [sp, #48]	; 0x30
 800a954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a956:	1b5b      	subs	r3, r3, r5
 800a958:	1e5a      	subs	r2, r3, #1
 800a95a:	bf45      	ittet	mi
 800a95c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a960:	9305      	strmi	r3, [sp, #20]
 800a962:	2300      	movpl	r3, #0
 800a964:	2300      	movmi	r3, #0
 800a966:	9206      	str	r2, [sp, #24]
 800a968:	bf54      	ite	pl
 800a96a:	9305      	strpl	r3, [sp, #20]
 800a96c:	9306      	strmi	r3, [sp, #24]
 800a96e:	f1bb 0f00 	cmp.w	fp, #0
 800a972:	db3c      	blt.n	800a9ee <_dtoa_r+0x24e>
 800a974:	9b06      	ldr	r3, [sp, #24]
 800a976:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a97a:	445b      	add	r3, fp
 800a97c:	9306      	str	r3, [sp, #24]
 800a97e:	2300      	movs	r3, #0
 800a980:	9308      	str	r3, [sp, #32]
 800a982:	9b07      	ldr	r3, [sp, #28]
 800a984:	2b09      	cmp	r3, #9
 800a986:	d868      	bhi.n	800aa5a <_dtoa_r+0x2ba>
 800a988:	2b05      	cmp	r3, #5
 800a98a:	bfc4      	itt	gt
 800a98c:	3b04      	subgt	r3, #4
 800a98e:	9307      	strgt	r3, [sp, #28]
 800a990:	9b07      	ldr	r3, [sp, #28]
 800a992:	f1a3 0302 	sub.w	r3, r3, #2
 800a996:	bfcc      	ite	gt
 800a998:	2500      	movgt	r5, #0
 800a99a:	2501      	movle	r5, #1
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	f200 8085 	bhi.w	800aaac <_dtoa_r+0x30c>
 800a9a2:	e8df f003 	tbb	[pc, r3]
 800a9a6:	3b2e      	.short	0x3b2e
 800a9a8:	5839      	.short	0x5839
 800a9aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a9ae:	441d      	add	r5, r3
 800a9b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	bfc1      	itttt	gt
 800a9b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a9bc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a9c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a9c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a9c8:	bfd6      	itet	le
 800a9ca:	f1c3 0320 	rsble	r3, r3, #32
 800a9ce:	ea48 0003 	orrgt.w	r0, r8, r3
 800a9d2:	fa06 f003 	lslle.w	r0, r6, r3
 800a9d6:	f7f5 fd95 	bl	8000504 <__aeabi_ui2d>
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a9e0:	3d01      	subs	r5, #1
 800a9e2:	920e      	str	r2, [sp, #56]	; 0x38
 800a9e4:	e76f      	b.n	800a8c6 <_dtoa_r+0x126>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e7b3      	b.n	800a952 <_dtoa_r+0x1b2>
 800a9ea:	900c      	str	r0, [sp, #48]	; 0x30
 800a9ec:	e7b2      	b.n	800a954 <_dtoa_r+0x1b4>
 800a9ee:	9b05      	ldr	r3, [sp, #20]
 800a9f0:	eba3 030b 	sub.w	r3, r3, fp
 800a9f4:	9305      	str	r3, [sp, #20]
 800a9f6:	f1cb 0300 	rsb	r3, fp, #0
 800a9fa:	9308      	str	r3, [sp, #32]
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa00:	e7bf      	b.n	800a982 <_dtoa_r+0x1e2>
 800aa02:	2300      	movs	r3, #0
 800aa04:	9309      	str	r3, [sp, #36]	; 0x24
 800aa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	dc52      	bgt.n	800aab2 <_dtoa_r+0x312>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	9301      	str	r3, [sp, #4]
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	461a      	mov	r2, r3
 800aa14:	920a      	str	r2, [sp, #40]	; 0x28
 800aa16:	e00b      	b.n	800aa30 <_dtoa_r+0x290>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e7f3      	b.n	800aa04 <_dtoa_r+0x264>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa22:	445b      	add	r3, fp
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	3301      	adds	r3, #1
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	9304      	str	r3, [sp, #16]
 800aa2c:	bfb8      	it	lt
 800aa2e:	2301      	movlt	r3, #1
 800aa30:	69e0      	ldr	r0, [r4, #28]
 800aa32:	2100      	movs	r1, #0
 800aa34:	2204      	movs	r2, #4
 800aa36:	f102 0614 	add.w	r6, r2, #20
 800aa3a:	429e      	cmp	r6, r3
 800aa3c:	d93d      	bls.n	800aaba <_dtoa_r+0x31a>
 800aa3e:	6041      	str	r1, [r0, #4]
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 fd9f 	bl	800b584 <_Balloc>
 800aa46:	9000      	str	r0, [sp, #0]
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d139      	bne.n	800aac0 <_dtoa_r+0x320>
 800aa4c:	4b16      	ldr	r3, [pc, #88]	; (800aaa8 <_dtoa_r+0x308>)
 800aa4e:	4602      	mov	r2, r0
 800aa50:	f240 11af 	movw	r1, #431	; 0x1af
 800aa54:	e6bd      	b.n	800a7d2 <_dtoa_r+0x32>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e7e1      	b.n	800aa1e <_dtoa_r+0x27e>
 800aa5a:	2501      	movs	r5, #1
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9307      	str	r3, [sp, #28]
 800aa60:	9509      	str	r5, [sp, #36]	; 0x24
 800aa62:	f04f 33ff 	mov.w	r3, #4294967295
 800aa66:	9301      	str	r3, [sp, #4]
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2312      	movs	r3, #18
 800aa6e:	e7d1      	b.n	800aa14 <_dtoa_r+0x274>
 800aa70:	636f4361 	.word	0x636f4361
 800aa74:	3fd287a7 	.word	0x3fd287a7
 800aa78:	8b60c8b3 	.word	0x8b60c8b3
 800aa7c:	3fc68a28 	.word	0x3fc68a28
 800aa80:	509f79fb 	.word	0x509f79fb
 800aa84:	3fd34413 	.word	0x3fd34413
 800aa88:	0800c875 	.word	0x0800c875
 800aa8c:	0800c88c 	.word	0x0800c88c
 800aa90:	7ff00000 	.word	0x7ff00000
 800aa94:	0800c871 	.word	0x0800c871
 800aa98:	0800c868 	.word	0x0800c868
 800aa9c:	0800c845 	.word	0x0800c845
 800aaa0:	3ff80000 	.word	0x3ff80000
 800aaa4:	0800c978 	.word	0x0800c978
 800aaa8:	0800c8e4 	.word	0x0800c8e4
 800aaac:	2301      	movs	r3, #1
 800aaae:	9309      	str	r3, [sp, #36]	; 0x24
 800aab0:	e7d7      	b.n	800aa62 <_dtoa_r+0x2c2>
 800aab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	9304      	str	r3, [sp, #16]
 800aab8:	e7ba      	b.n	800aa30 <_dtoa_r+0x290>
 800aaba:	3101      	adds	r1, #1
 800aabc:	0052      	lsls	r2, r2, #1
 800aabe:	e7ba      	b.n	800aa36 <_dtoa_r+0x296>
 800aac0:	69e3      	ldr	r3, [r4, #28]
 800aac2:	9a00      	ldr	r2, [sp, #0]
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	9b04      	ldr	r3, [sp, #16]
 800aac8:	2b0e      	cmp	r3, #14
 800aaca:	f200 80a8 	bhi.w	800ac1e <_dtoa_r+0x47e>
 800aace:	2d00      	cmp	r5, #0
 800aad0:	f000 80a5 	beq.w	800ac1e <_dtoa_r+0x47e>
 800aad4:	f1bb 0f00 	cmp.w	fp, #0
 800aad8:	dd38      	ble.n	800ab4c <_dtoa_r+0x3ac>
 800aada:	4bc0      	ldr	r3, [pc, #768]	; (800addc <_dtoa_r+0x63c>)
 800aadc:	f00b 020f 	and.w	r2, fp, #15
 800aae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aae4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aae8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aaec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aaf0:	d019      	beq.n	800ab26 <_dtoa_r+0x386>
 800aaf2:	4bbb      	ldr	r3, [pc, #748]	; (800ade0 <_dtoa_r+0x640>)
 800aaf4:	ec51 0b18 	vmov	r0, r1, d8
 800aaf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aafc:	f7f5 fea6 	bl	800084c <__aeabi_ddiv>
 800ab00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab04:	f008 080f 	and.w	r8, r8, #15
 800ab08:	2503      	movs	r5, #3
 800ab0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ade0 <_dtoa_r+0x640>
 800ab0e:	f1b8 0f00 	cmp.w	r8, #0
 800ab12:	d10a      	bne.n	800ab2a <_dtoa_r+0x38a>
 800ab14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab18:	4632      	mov	r2, r6
 800ab1a:	463b      	mov	r3, r7
 800ab1c:	f7f5 fe96 	bl	800084c <__aeabi_ddiv>
 800ab20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab24:	e02b      	b.n	800ab7e <_dtoa_r+0x3de>
 800ab26:	2502      	movs	r5, #2
 800ab28:	e7ef      	b.n	800ab0a <_dtoa_r+0x36a>
 800ab2a:	f018 0f01 	tst.w	r8, #1
 800ab2e:	d008      	beq.n	800ab42 <_dtoa_r+0x3a2>
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab38:	f7f5 fd5e 	bl	80005f8 <__aeabi_dmul>
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	4606      	mov	r6, r0
 800ab40:	460f      	mov	r7, r1
 800ab42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab46:	f109 0908 	add.w	r9, r9, #8
 800ab4a:	e7e0      	b.n	800ab0e <_dtoa_r+0x36e>
 800ab4c:	f000 809f 	beq.w	800ac8e <_dtoa_r+0x4ee>
 800ab50:	f1cb 0600 	rsb	r6, fp, #0
 800ab54:	4ba1      	ldr	r3, [pc, #644]	; (800addc <_dtoa_r+0x63c>)
 800ab56:	4fa2      	ldr	r7, [pc, #648]	; (800ade0 <_dtoa_r+0x640>)
 800ab58:	f006 020f 	and.w	r2, r6, #15
 800ab5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	ec51 0b18 	vmov	r0, r1, d8
 800ab68:	f7f5 fd46 	bl	80005f8 <__aeabi_dmul>
 800ab6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab70:	1136      	asrs	r6, r6, #4
 800ab72:	2300      	movs	r3, #0
 800ab74:	2502      	movs	r5, #2
 800ab76:	2e00      	cmp	r6, #0
 800ab78:	d17e      	bne.n	800ac78 <_dtoa_r+0x4d8>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1d0      	bne.n	800ab20 <_dtoa_r+0x380>
 800ab7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8084 	beq.w	800ac92 <_dtoa_r+0x4f2>
 800ab8a:	4b96      	ldr	r3, [pc, #600]	; (800ade4 <_dtoa_r+0x644>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	4640      	mov	r0, r8
 800ab90:	4649      	mov	r1, r9
 800ab92:	f7f5 ffa3 	bl	8000adc <__aeabi_dcmplt>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d07b      	beq.n	800ac92 <_dtoa_r+0x4f2>
 800ab9a:	9b04      	ldr	r3, [sp, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d078      	beq.n	800ac92 <_dtoa_r+0x4f2>
 800aba0:	9b01      	ldr	r3, [sp, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dd39      	ble.n	800ac1a <_dtoa_r+0x47a>
 800aba6:	4b90      	ldr	r3, [pc, #576]	; (800ade8 <_dtoa_r+0x648>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	4640      	mov	r0, r8
 800abac:	4649      	mov	r1, r9
 800abae:	f7f5 fd23 	bl	80005f8 <__aeabi_dmul>
 800abb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abb6:	9e01      	ldr	r6, [sp, #4]
 800abb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800abbc:	3501      	adds	r5, #1
 800abbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800abc2:	4628      	mov	r0, r5
 800abc4:	f7f5 fcae 	bl	8000524 <__aeabi_i2d>
 800abc8:	4642      	mov	r2, r8
 800abca:	464b      	mov	r3, r9
 800abcc:	f7f5 fd14 	bl	80005f8 <__aeabi_dmul>
 800abd0:	4b86      	ldr	r3, [pc, #536]	; (800adec <_dtoa_r+0x64c>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	f7f5 fb5a 	bl	800028c <__adddf3>
 800abd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800abdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abe0:	9303      	str	r3, [sp, #12]
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	d158      	bne.n	800ac98 <_dtoa_r+0x4f8>
 800abe6:	4b82      	ldr	r3, [pc, #520]	; (800adf0 <_dtoa_r+0x650>)
 800abe8:	2200      	movs	r2, #0
 800abea:	4640      	mov	r0, r8
 800abec:	4649      	mov	r1, r9
 800abee:	f7f5 fb4b 	bl	8000288 <__aeabi_dsub>
 800abf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abf6:	4680      	mov	r8, r0
 800abf8:	4689      	mov	r9, r1
 800abfa:	f7f5 ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f040 8296 	bne.w	800b130 <_dtoa_r+0x990>
 800ac04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ac08:	4640      	mov	r0, r8
 800ac0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac0e:	4649      	mov	r1, r9
 800ac10:	f7f5 ff64 	bl	8000adc <__aeabi_dcmplt>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f040 8289 	bne.w	800b12c <_dtoa_r+0x98c>
 800ac1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f2c0 814e 	blt.w	800aec2 <_dtoa_r+0x722>
 800ac26:	f1bb 0f0e 	cmp.w	fp, #14
 800ac2a:	f300 814a 	bgt.w	800aec2 <_dtoa_r+0x722>
 800ac2e:	4b6b      	ldr	r3, [pc, #428]	; (800addc <_dtoa_r+0x63c>)
 800ac30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f280 80dc 	bge.w	800adf8 <_dtoa_r+0x658>
 800ac40:	9b04      	ldr	r3, [sp, #16]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f300 80d8 	bgt.w	800adf8 <_dtoa_r+0x658>
 800ac48:	f040 826f 	bne.w	800b12a <_dtoa_r+0x98a>
 800ac4c:	4b68      	ldr	r3, [pc, #416]	; (800adf0 <_dtoa_r+0x650>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	4640      	mov	r0, r8
 800ac52:	4649      	mov	r1, r9
 800ac54:	f7f5 fcd0 	bl	80005f8 <__aeabi_dmul>
 800ac58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac5c:	f7f5 ff52 	bl	8000b04 <__aeabi_dcmpge>
 800ac60:	9e04      	ldr	r6, [sp, #16]
 800ac62:	4637      	mov	r7, r6
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f040 8245 	bne.w	800b0f4 <_dtoa_r+0x954>
 800ac6a:	9d00      	ldr	r5, [sp, #0]
 800ac6c:	2331      	movs	r3, #49	; 0x31
 800ac6e:	f805 3b01 	strb.w	r3, [r5], #1
 800ac72:	f10b 0b01 	add.w	fp, fp, #1
 800ac76:	e241      	b.n	800b0fc <_dtoa_r+0x95c>
 800ac78:	07f2      	lsls	r2, r6, #31
 800ac7a:	d505      	bpl.n	800ac88 <_dtoa_r+0x4e8>
 800ac7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac80:	f7f5 fcba 	bl	80005f8 <__aeabi_dmul>
 800ac84:	3501      	adds	r5, #1
 800ac86:	2301      	movs	r3, #1
 800ac88:	1076      	asrs	r6, r6, #1
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	e773      	b.n	800ab76 <_dtoa_r+0x3d6>
 800ac8e:	2502      	movs	r5, #2
 800ac90:	e775      	b.n	800ab7e <_dtoa_r+0x3de>
 800ac92:	9e04      	ldr	r6, [sp, #16]
 800ac94:	465f      	mov	r7, fp
 800ac96:	e792      	b.n	800abbe <_dtoa_r+0x41e>
 800ac98:	9900      	ldr	r1, [sp, #0]
 800ac9a:	4b50      	ldr	r3, [pc, #320]	; (800addc <_dtoa_r+0x63c>)
 800ac9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aca0:	4431      	add	r1, r6
 800aca2:	9102      	str	r1, [sp, #8]
 800aca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aca6:	eeb0 9a47 	vmov.f32	s18, s14
 800acaa:	eef0 9a67 	vmov.f32	s19, s15
 800acae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800acb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acb6:	2900      	cmp	r1, #0
 800acb8:	d044      	beq.n	800ad44 <_dtoa_r+0x5a4>
 800acba:	494e      	ldr	r1, [pc, #312]	; (800adf4 <_dtoa_r+0x654>)
 800acbc:	2000      	movs	r0, #0
 800acbe:	f7f5 fdc5 	bl	800084c <__aeabi_ddiv>
 800acc2:	ec53 2b19 	vmov	r2, r3, d9
 800acc6:	f7f5 fadf 	bl	8000288 <__aeabi_dsub>
 800acca:	9d00      	ldr	r5, [sp, #0]
 800accc:	ec41 0b19 	vmov	d9, r0, r1
 800acd0:	4649      	mov	r1, r9
 800acd2:	4640      	mov	r0, r8
 800acd4:	f7f5 ff40 	bl	8000b58 <__aeabi_d2iz>
 800acd8:	4606      	mov	r6, r0
 800acda:	f7f5 fc23 	bl	8000524 <__aeabi_i2d>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4640      	mov	r0, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	f7f5 facf 	bl	8000288 <__aeabi_dsub>
 800acea:	3630      	adds	r6, #48	; 0x30
 800acec:	f805 6b01 	strb.w	r6, [r5], #1
 800acf0:	ec53 2b19 	vmov	r2, r3, d9
 800acf4:	4680      	mov	r8, r0
 800acf6:	4689      	mov	r9, r1
 800acf8:	f7f5 fef0 	bl	8000adc <__aeabi_dcmplt>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d164      	bne.n	800adca <_dtoa_r+0x62a>
 800ad00:	4642      	mov	r2, r8
 800ad02:	464b      	mov	r3, r9
 800ad04:	4937      	ldr	r1, [pc, #220]	; (800ade4 <_dtoa_r+0x644>)
 800ad06:	2000      	movs	r0, #0
 800ad08:	f7f5 fabe 	bl	8000288 <__aeabi_dsub>
 800ad0c:	ec53 2b19 	vmov	r2, r3, d9
 800ad10:	f7f5 fee4 	bl	8000adc <__aeabi_dcmplt>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f040 80b6 	bne.w	800ae86 <_dtoa_r+0x6e6>
 800ad1a:	9b02      	ldr	r3, [sp, #8]
 800ad1c:	429d      	cmp	r5, r3
 800ad1e:	f43f af7c 	beq.w	800ac1a <_dtoa_r+0x47a>
 800ad22:	4b31      	ldr	r3, [pc, #196]	; (800ade8 <_dtoa_r+0x648>)
 800ad24:	ec51 0b19 	vmov	r0, r1, d9
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f7f5 fc65 	bl	80005f8 <__aeabi_dmul>
 800ad2e:	4b2e      	ldr	r3, [pc, #184]	; (800ade8 <_dtoa_r+0x648>)
 800ad30:	ec41 0b19 	vmov	d9, r0, r1
 800ad34:	2200      	movs	r2, #0
 800ad36:	4640      	mov	r0, r8
 800ad38:	4649      	mov	r1, r9
 800ad3a:	f7f5 fc5d 	bl	80005f8 <__aeabi_dmul>
 800ad3e:	4680      	mov	r8, r0
 800ad40:	4689      	mov	r9, r1
 800ad42:	e7c5      	b.n	800acd0 <_dtoa_r+0x530>
 800ad44:	ec51 0b17 	vmov	r0, r1, d7
 800ad48:	f7f5 fc56 	bl	80005f8 <__aeabi_dmul>
 800ad4c:	9b02      	ldr	r3, [sp, #8]
 800ad4e:	9d00      	ldr	r5, [sp, #0]
 800ad50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad52:	ec41 0b19 	vmov	d9, r0, r1
 800ad56:	4649      	mov	r1, r9
 800ad58:	4640      	mov	r0, r8
 800ad5a:	f7f5 fefd 	bl	8000b58 <__aeabi_d2iz>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	f7f5 fbe0 	bl	8000524 <__aeabi_i2d>
 800ad64:	3630      	adds	r6, #48	; 0x30
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	4649      	mov	r1, r9
 800ad6e:	f7f5 fa8b 	bl	8000288 <__aeabi_dsub>
 800ad72:	f805 6b01 	strb.w	r6, [r5], #1
 800ad76:	9b02      	ldr	r3, [sp, #8]
 800ad78:	429d      	cmp	r5, r3
 800ad7a:	4680      	mov	r8, r0
 800ad7c:	4689      	mov	r9, r1
 800ad7e:	f04f 0200 	mov.w	r2, #0
 800ad82:	d124      	bne.n	800adce <_dtoa_r+0x62e>
 800ad84:	4b1b      	ldr	r3, [pc, #108]	; (800adf4 <_dtoa_r+0x654>)
 800ad86:	ec51 0b19 	vmov	r0, r1, d9
 800ad8a:	f7f5 fa7f 	bl	800028c <__adddf3>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4640      	mov	r0, r8
 800ad94:	4649      	mov	r1, r9
 800ad96:	f7f5 febf 	bl	8000b18 <__aeabi_dcmpgt>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d173      	bne.n	800ae86 <_dtoa_r+0x6e6>
 800ad9e:	ec53 2b19 	vmov	r2, r3, d9
 800ada2:	4914      	ldr	r1, [pc, #80]	; (800adf4 <_dtoa_r+0x654>)
 800ada4:	2000      	movs	r0, #0
 800ada6:	f7f5 fa6f 	bl	8000288 <__aeabi_dsub>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4640      	mov	r0, r8
 800adb0:	4649      	mov	r1, r9
 800adb2:	f7f5 fe93 	bl	8000adc <__aeabi_dcmplt>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	f43f af2f 	beq.w	800ac1a <_dtoa_r+0x47a>
 800adbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800adbe:	1e6b      	subs	r3, r5, #1
 800adc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800adc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adc6:	2b30      	cmp	r3, #48	; 0x30
 800adc8:	d0f8      	beq.n	800adbc <_dtoa_r+0x61c>
 800adca:	46bb      	mov	fp, r7
 800adcc:	e04a      	b.n	800ae64 <_dtoa_r+0x6c4>
 800adce:	4b06      	ldr	r3, [pc, #24]	; (800ade8 <_dtoa_r+0x648>)
 800add0:	f7f5 fc12 	bl	80005f8 <__aeabi_dmul>
 800add4:	4680      	mov	r8, r0
 800add6:	4689      	mov	r9, r1
 800add8:	e7bd      	b.n	800ad56 <_dtoa_r+0x5b6>
 800adda:	bf00      	nop
 800addc:	0800c978 	.word	0x0800c978
 800ade0:	0800c950 	.word	0x0800c950
 800ade4:	3ff00000 	.word	0x3ff00000
 800ade8:	40240000 	.word	0x40240000
 800adec:	401c0000 	.word	0x401c0000
 800adf0:	40140000 	.word	0x40140000
 800adf4:	3fe00000 	.word	0x3fe00000
 800adf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adfc:	9d00      	ldr	r5, [sp, #0]
 800adfe:	4642      	mov	r2, r8
 800ae00:	464b      	mov	r3, r9
 800ae02:	4630      	mov	r0, r6
 800ae04:	4639      	mov	r1, r7
 800ae06:	f7f5 fd21 	bl	800084c <__aeabi_ddiv>
 800ae0a:	f7f5 fea5 	bl	8000b58 <__aeabi_d2iz>
 800ae0e:	9001      	str	r0, [sp, #4]
 800ae10:	f7f5 fb88 	bl	8000524 <__aeabi_i2d>
 800ae14:	4642      	mov	r2, r8
 800ae16:	464b      	mov	r3, r9
 800ae18:	f7f5 fbee 	bl	80005f8 <__aeabi_dmul>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4630      	mov	r0, r6
 800ae22:	4639      	mov	r1, r7
 800ae24:	f7f5 fa30 	bl	8000288 <__aeabi_dsub>
 800ae28:	9e01      	ldr	r6, [sp, #4]
 800ae2a:	9f04      	ldr	r7, [sp, #16]
 800ae2c:	3630      	adds	r6, #48	; 0x30
 800ae2e:	f805 6b01 	strb.w	r6, [r5], #1
 800ae32:	9e00      	ldr	r6, [sp, #0]
 800ae34:	1bae      	subs	r6, r5, r6
 800ae36:	42b7      	cmp	r7, r6
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	d134      	bne.n	800aea8 <_dtoa_r+0x708>
 800ae3e:	f7f5 fa25 	bl	800028c <__adddf3>
 800ae42:	4642      	mov	r2, r8
 800ae44:	464b      	mov	r3, r9
 800ae46:	4606      	mov	r6, r0
 800ae48:	460f      	mov	r7, r1
 800ae4a:	f7f5 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 800ae4e:	b9c8      	cbnz	r0, 800ae84 <_dtoa_r+0x6e4>
 800ae50:	4642      	mov	r2, r8
 800ae52:	464b      	mov	r3, r9
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae5c:	b110      	cbz	r0, 800ae64 <_dtoa_r+0x6c4>
 800ae5e:	9b01      	ldr	r3, [sp, #4]
 800ae60:	07db      	lsls	r3, r3, #31
 800ae62:	d40f      	bmi.n	800ae84 <_dtoa_r+0x6e4>
 800ae64:	4651      	mov	r1, sl
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 fbcc 	bl	800b604 <_Bfree>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae70:	702b      	strb	r3, [r5, #0]
 800ae72:	f10b 0301 	add.w	r3, fp, #1
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f43f ace2 	beq.w	800a844 <_dtoa_r+0xa4>
 800ae80:	601d      	str	r5, [r3, #0]
 800ae82:	e4df      	b.n	800a844 <_dtoa_r+0xa4>
 800ae84:	465f      	mov	r7, fp
 800ae86:	462b      	mov	r3, r5
 800ae88:	461d      	mov	r5, r3
 800ae8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae8e:	2a39      	cmp	r2, #57	; 0x39
 800ae90:	d106      	bne.n	800aea0 <_dtoa_r+0x700>
 800ae92:	9a00      	ldr	r2, [sp, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d1f7      	bne.n	800ae88 <_dtoa_r+0x6e8>
 800ae98:	9900      	ldr	r1, [sp, #0]
 800ae9a:	2230      	movs	r2, #48	; 0x30
 800ae9c:	3701      	adds	r7, #1
 800ae9e:	700a      	strb	r2, [r1, #0]
 800aea0:	781a      	ldrb	r2, [r3, #0]
 800aea2:	3201      	adds	r2, #1
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	e790      	b.n	800adca <_dtoa_r+0x62a>
 800aea8:	4ba3      	ldr	r3, [pc, #652]	; (800b138 <_dtoa_r+0x998>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f7f5 fba4 	bl	80005f8 <__aeabi_dmul>
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	460f      	mov	r7, r1
 800aeb8:	f7f5 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d09e      	beq.n	800adfe <_dtoa_r+0x65e>
 800aec0:	e7d0      	b.n	800ae64 <_dtoa_r+0x6c4>
 800aec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec4:	2a00      	cmp	r2, #0
 800aec6:	f000 80ca 	beq.w	800b05e <_dtoa_r+0x8be>
 800aeca:	9a07      	ldr	r2, [sp, #28]
 800aecc:	2a01      	cmp	r2, #1
 800aece:	f300 80ad 	bgt.w	800b02c <_dtoa_r+0x88c>
 800aed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	f000 80a5 	beq.w	800b024 <_dtoa_r+0x884>
 800aeda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aede:	9e08      	ldr	r6, [sp, #32]
 800aee0:	9d05      	ldr	r5, [sp, #20]
 800aee2:	9a05      	ldr	r2, [sp, #20]
 800aee4:	441a      	add	r2, r3
 800aee6:	9205      	str	r2, [sp, #20]
 800aee8:	9a06      	ldr	r2, [sp, #24]
 800aeea:	2101      	movs	r1, #1
 800aeec:	441a      	add	r2, r3
 800aeee:	4620      	mov	r0, r4
 800aef0:	9206      	str	r2, [sp, #24]
 800aef2:	f000 fc3d 	bl	800b770 <__i2b>
 800aef6:	4607      	mov	r7, r0
 800aef8:	b165      	cbz	r5, 800af14 <_dtoa_r+0x774>
 800aefa:	9b06      	ldr	r3, [sp, #24]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dd09      	ble.n	800af14 <_dtoa_r+0x774>
 800af00:	42ab      	cmp	r3, r5
 800af02:	9a05      	ldr	r2, [sp, #20]
 800af04:	bfa8      	it	ge
 800af06:	462b      	movge	r3, r5
 800af08:	1ad2      	subs	r2, r2, r3
 800af0a:	9205      	str	r2, [sp, #20]
 800af0c:	9a06      	ldr	r2, [sp, #24]
 800af0e:	1aed      	subs	r5, r5, r3
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	9306      	str	r3, [sp, #24]
 800af14:	9b08      	ldr	r3, [sp, #32]
 800af16:	b1f3      	cbz	r3, 800af56 <_dtoa_r+0x7b6>
 800af18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 80a3 	beq.w	800b066 <_dtoa_r+0x8c6>
 800af20:	2e00      	cmp	r6, #0
 800af22:	dd10      	ble.n	800af46 <_dtoa_r+0x7a6>
 800af24:	4639      	mov	r1, r7
 800af26:	4632      	mov	r2, r6
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 fce1 	bl	800b8f0 <__pow5mult>
 800af2e:	4652      	mov	r2, sl
 800af30:	4601      	mov	r1, r0
 800af32:	4607      	mov	r7, r0
 800af34:	4620      	mov	r0, r4
 800af36:	f000 fc31 	bl	800b79c <__multiply>
 800af3a:	4651      	mov	r1, sl
 800af3c:	4680      	mov	r8, r0
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 fb60 	bl	800b604 <_Bfree>
 800af44:	46c2      	mov	sl, r8
 800af46:	9b08      	ldr	r3, [sp, #32]
 800af48:	1b9a      	subs	r2, r3, r6
 800af4a:	d004      	beq.n	800af56 <_dtoa_r+0x7b6>
 800af4c:	4651      	mov	r1, sl
 800af4e:	4620      	mov	r0, r4
 800af50:	f000 fcce 	bl	800b8f0 <__pow5mult>
 800af54:	4682      	mov	sl, r0
 800af56:	2101      	movs	r1, #1
 800af58:	4620      	mov	r0, r4
 800af5a:	f000 fc09 	bl	800b770 <__i2b>
 800af5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af60:	2b00      	cmp	r3, #0
 800af62:	4606      	mov	r6, r0
 800af64:	f340 8081 	ble.w	800b06a <_dtoa_r+0x8ca>
 800af68:	461a      	mov	r2, r3
 800af6a:	4601      	mov	r1, r0
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 fcbf 	bl	800b8f0 <__pow5mult>
 800af72:	9b07      	ldr	r3, [sp, #28]
 800af74:	2b01      	cmp	r3, #1
 800af76:	4606      	mov	r6, r0
 800af78:	dd7a      	ble.n	800b070 <_dtoa_r+0x8d0>
 800af7a:	f04f 0800 	mov.w	r8, #0
 800af7e:	6933      	ldr	r3, [r6, #16]
 800af80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af84:	6918      	ldr	r0, [r3, #16]
 800af86:	f000 fba5 	bl	800b6d4 <__hi0bits>
 800af8a:	f1c0 0020 	rsb	r0, r0, #32
 800af8e:	9b06      	ldr	r3, [sp, #24]
 800af90:	4418      	add	r0, r3
 800af92:	f010 001f 	ands.w	r0, r0, #31
 800af96:	f000 8094 	beq.w	800b0c2 <_dtoa_r+0x922>
 800af9a:	f1c0 0320 	rsb	r3, r0, #32
 800af9e:	2b04      	cmp	r3, #4
 800afa0:	f340 8085 	ble.w	800b0ae <_dtoa_r+0x90e>
 800afa4:	9b05      	ldr	r3, [sp, #20]
 800afa6:	f1c0 001c 	rsb	r0, r0, #28
 800afaa:	4403      	add	r3, r0
 800afac:	9305      	str	r3, [sp, #20]
 800afae:	9b06      	ldr	r3, [sp, #24]
 800afb0:	4403      	add	r3, r0
 800afb2:	4405      	add	r5, r0
 800afb4:	9306      	str	r3, [sp, #24]
 800afb6:	9b05      	ldr	r3, [sp, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	dd05      	ble.n	800afc8 <_dtoa_r+0x828>
 800afbc:	4651      	mov	r1, sl
 800afbe:	461a      	mov	r2, r3
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 fcef 	bl	800b9a4 <__lshift>
 800afc6:	4682      	mov	sl, r0
 800afc8:	9b06      	ldr	r3, [sp, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	dd05      	ble.n	800afda <_dtoa_r+0x83a>
 800afce:	4631      	mov	r1, r6
 800afd0:	461a      	mov	r2, r3
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 fce6 	bl	800b9a4 <__lshift>
 800afd8:	4606      	mov	r6, r0
 800afda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d072      	beq.n	800b0c6 <_dtoa_r+0x926>
 800afe0:	4631      	mov	r1, r6
 800afe2:	4650      	mov	r0, sl
 800afe4:	f000 fd4a 	bl	800ba7c <__mcmp>
 800afe8:	2800      	cmp	r0, #0
 800afea:	da6c      	bge.n	800b0c6 <_dtoa_r+0x926>
 800afec:	2300      	movs	r3, #0
 800afee:	4651      	mov	r1, sl
 800aff0:	220a      	movs	r2, #10
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 fb28 	bl	800b648 <__multadd>
 800aff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800affe:	4682      	mov	sl, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 81b0 	beq.w	800b366 <_dtoa_r+0xbc6>
 800b006:	2300      	movs	r3, #0
 800b008:	4639      	mov	r1, r7
 800b00a:	220a      	movs	r2, #10
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 fb1b 	bl	800b648 <__multadd>
 800b012:	9b01      	ldr	r3, [sp, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	4607      	mov	r7, r0
 800b018:	f300 8096 	bgt.w	800b148 <_dtoa_r+0x9a8>
 800b01c:	9b07      	ldr	r3, [sp, #28]
 800b01e:	2b02      	cmp	r3, #2
 800b020:	dc59      	bgt.n	800b0d6 <_dtoa_r+0x936>
 800b022:	e091      	b.n	800b148 <_dtoa_r+0x9a8>
 800b024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b026:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b02a:	e758      	b.n	800aede <_dtoa_r+0x73e>
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	1e5e      	subs	r6, r3, #1
 800b030:	9b08      	ldr	r3, [sp, #32]
 800b032:	42b3      	cmp	r3, r6
 800b034:	bfbf      	itttt	lt
 800b036:	9b08      	ldrlt	r3, [sp, #32]
 800b038:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b03a:	9608      	strlt	r6, [sp, #32]
 800b03c:	1af3      	sublt	r3, r6, r3
 800b03e:	bfb4      	ite	lt
 800b040:	18d2      	addlt	r2, r2, r3
 800b042:	1b9e      	subge	r6, r3, r6
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	bfbc      	itt	lt
 800b048:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b04a:	2600      	movlt	r6, #0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	bfb7      	itett	lt
 800b050:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b054:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b058:	1a9d      	sublt	r5, r3, r2
 800b05a:	2300      	movlt	r3, #0
 800b05c:	e741      	b.n	800aee2 <_dtoa_r+0x742>
 800b05e:	9e08      	ldr	r6, [sp, #32]
 800b060:	9d05      	ldr	r5, [sp, #20]
 800b062:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b064:	e748      	b.n	800aef8 <_dtoa_r+0x758>
 800b066:	9a08      	ldr	r2, [sp, #32]
 800b068:	e770      	b.n	800af4c <_dtoa_r+0x7ac>
 800b06a:	9b07      	ldr	r3, [sp, #28]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	dc19      	bgt.n	800b0a4 <_dtoa_r+0x904>
 800b070:	9b02      	ldr	r3, [sp, #8]
 800b072:	b9bb      	cbnz	r3, 800b0a4 <_dtoa_r+0x904>
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b07a:	b99b      	cbnz	r3, 800b0a4 <_dtoa_r+0x904>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b082:	0d1b      	lsrs	r3, r3, #20
 800b084:	051b      	lsls	r3, r3, #20
 800b086:	b183      	cbz	r3, 800b0aa <_dtoa_r+0x90a>
 800b088:	9b05      	ldr	r3, [sp, #20]
 800b08a:	3301      	adds	r3, #1
 800b08c:	9305      	str	r3, [sp, #20]
 800b08e:	9b06      	ldr	r3, [sp, #24]
 800b090:	3301      	adds	r3, #1
 800b092:	9306      	str	r3, [sp, #24]
 800b094:	f04f 0801 	mov.w	r8, #1
 800b098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f47f af6f 	bne.w	800af7e <_dtoa_r+0x7de>
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	e774      	b.n	800af8e <_dtoa_r+0x7ee>
 800b0a4:	f04f 0800 	mov.w	r8, #0
 800b0a8:	e7f6      	b.n	800b098 <_dtoa_r+0x8f8>
 800b0aa:	4698      	mov	r8, r3
 800b0ac:	e7f4      	b.n	800b098 <_dtoa_r+0x8f8>
 800b0ae:	d082      	beq.n	800afb6 <_dtoa_r+0x816>
 800b0b0:	9a05      	ldr	r2, [sp, #20]
 800b0b2:	331c      	adds	r3, #28
 800b0b4:	441a      	add	r2, r3
 800b0b6:	9205      	str	r2, [sp, #20]
 800b0b8:	9a06      	ldr	r2, [sp, #24]
 800b0ba:	441a      	add	r2, r3
 800b0bc:	441d      	add	r5, r3
 800b0be:	9206      	str	r2, [sp, #24]
 800b0c0:	e779      	b.n	800afb6 <_dtoa_r+0x816>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	e7f4      	b.n	800b0b0 <_dtoa_r+0x910>
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dc37      	bgt.n	800b13c <_dtoa_r+0x99c>
 800b0cc:	9b07      	ldr	r3, [sp, #28]
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	dd34      	ble.n	800b13c <_dtoa_r+0x99c>
 800b0d2:	9b04      	ldr	r3, [sp, #16]
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	b963      	cbnz	r3, 800b0f4 <_dtoa_r+0x954>
 800b0da:	4631      	mov	r1, r6
 800b0dc:	2205      	movs	r2, #5
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 fab2 	bl	800b648 <__multadd>
 800b0e4:	4601      	mov	r1, r0
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	4650      	mov	r0, sl
 800b0ea:	f000 fcc7 	bl	800ba7c <__mcmp>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f73f adbb 	bgt.w	800ac6a <_dtoa_r+0x4ca>
 800b0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f6:	9d00      	ldr	r5, [sp, #0]
 800b0f8:	ea6f 0b03 	mvn.w	fp, r3
 800b0fc:	f04f 0800 	mov.w	r8, #0
 800b100:	4631      	mov	r1, r6
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fa7e 	bl	800b604 <_Bfree>
 800b108:	2f00      	cmp	r7, #0
 800b10a:	f43f aeab 	beq.w	800ae64 <_dtoa_r+0x6c4>
 800b10e:	f1b8 0f00 	cmp.w	r8, #0
 800b112:	d005      	beq.n	800b120 <_dtoa_r+0x980>
 800b114:	45b8      	cmp	r8, r7
 800b116:	d003      	beq.n	800b120 <_dtoa_r+0x980>
 800b118:	4641      	mov	r1, r8
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fa72 	bl	800b604 <_Bfree>
 800b120:	4639      	mov	r1, r7
 800b122:	4620      	mov	r0, r4
 800b124:	f000 fa6e 	bl	800b604 <_Bfree>
 800b128:	e69c      	b.n	800ae64 <_dtoa_r+0x6c4>
 800b12a:	2600      	movs	r6, #0
 800b12c:	4637      	mov	r7, r6
 800b12e:	e7e1      	b.n	800b0f4 <_dtoa_r+0x954>
 800b130:	46bb      	mov	fp, r7
 800b132:	4637      	mov	r7, r6
 800b134:	e599      	b.n	800ac6a <_dtoa_r+0x4ca>
 800b136:	bf00      	nop
 800b138:	40240000 	.word	0x40240000
 800b13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 80c8 	beq.w	800b2d4 <_dtoa_r+0xb34>
 800b144:	9b04      	ldr	r3, [sp, #16]
 800b146:	9301      	str	r3, [sp, #4]
 800b148:	2d00      	cmp	r5, #0
 800b14a:	dd05      	ble.n	800b158 <_dtoa_r+0x9b8>
 800b14c:	4639      	mov	r1, r7
 800b14e:	462a      	mov	r2, r5
 800b150:	4620      	mov	r0, r4
 800b152:	f000 fc27 	bl	800b9a4 <__lshift>
 800b156:	4607      	mov	r7, r0
 800b158:	f1b8 0f00 	cmp.w	r8, #0
 800b15c:	d05b      	beq.n	800b216 <_dtoa_r+0xa76>
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	4620      	mov	r0, r4
 800b162:	f000 fa0f 	bl	800b584 <_Balloc>
 800b166:	4605      	mov	r5, r0
 800b168:	b928      	cbnz	r0, 800b176 <_dtoa_r+0x9d6>
 800b16a:	4b83      	ldr	r3, [pc, #524]	; (800b378 <_dtoa_r+0xbd8>)
 800b16c:	4602      	mov	r2, r0
 800b16e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b172:	f7ff bb2e 	b.w	800a7d2 <_dtoa_r+0x32>
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	3202      	adds	r2, #2
 800b17a:	0092      	lsls	r2, r2, #2
 800b17c:	f107 010c 	add.w	r1, r7, #12
 800b180:	300c      	adds	r0, #12
 800b182:	f000 ffab 	bl	800c0dc <memcpy>
 800b186:	2201      	movs	r2, #1
 800b188:	4629      	mov	r1, r5
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 fc0a 	bl	800b9a4 <__lshift>
 800b190:	9b00      	ldr	r3, [sp, #0]
 800b192:	3301      	adds	r3, #1
 800b194:	9304      	str	r3, [sp, #16]
 800b196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b19a:	4413      	add	r3, r2
 800b19c:	9308      	str	r3, [sp, #32]
 800b19e:	9b02      	ldr	r3, [sp, #8]
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	46b8      	mov	r8, r7
 800b1a6:	9306      	str	r3, [sp, #24]
 800b1a8:	4607      	mov	r7, r0
 800b1aa:	9b04      	ldr	r3, [sp, #16]
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	4650      	mov	r0, sl
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	f7ff fa69 	bl	800a68a <quorem>
 800b1b8:	4641      	mov	r1, r8
 800b1ba:	9002      	str	r0, [sp, #8]
 800b1bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b1c0:	4650      	mov	r0, sl
 800b1c2:	f000 fc5b 	bl	800ba7c <__mcmp>
 800b1c6:	463a      	mov	r2, r7
 800b1c8:	9005      	str	r0, [sp, #20]
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 fc71 	bl	800bab4 <__mdiff>
 800b1d2:	68c2      	ldr	r2, [r0, #12]
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	bb02      	cbnz	r2, 800b21a <_dtoa_r+0xa7a>
 800b1d8:	4601      	mov	r1, r0
 800b1da:	4650      	mov	r0, sl
 800b1dc:	f000 fc4e 	bl	800ba7c <__mcmp>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e8:	f000 fa0c 	bl	800b604 <_Bfree>
 800b1ec:	9b07      	ldr	r3, [sp, #28]
 800b1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1f0:	9d04      	ldr	r5, [sp, #16]
 800b1f2:	ea43 0102 	orr.w	r1, r3, r2
 800b1f6:	9b06      	ldr	r3, [sp, #24]
 800b1f8:	4319      	orrs	r1, r3
 800b1fa:	d110      	bne.n	800b21e <_dtoa_r+0xa7e>
 800b1fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b200:	d029      	beq.n	800b256 <_dtoa_r+0xab6>
 800b202:	9b05      	ldr	r3, [sp, #20]
 800b204:	2b00      	cmp	r3, #0
 800b206:	dd02      	ble.n	800b20e <_dtoa_r+0xa6e>
 800b208:	9b02      	ldr	r3, [sp, #8]
 800b20a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b20e:	9b01      	ldr	r3, [sp, #4]
 800b210:	f883 9000 	strb.w	r9, [r3]
 800b214:	e774      	b.n	800b100 <_dtoa_r+0x960>
 800b216:	4638      	mov	r0, r7
 800b218:	e7ba      	b.n	800b190 <_dtoa_r+0x9f0>
 800b21a:	2201      	movs	r2, #1
 800b21c:	e7e1      	b.n	800b1e2 <_dtoa_r+0xa42>
 800b21e:	9b05      	ldr	r3, [sp, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	db04      	blt.n	800b22e <_dtoa_r+0xa8e>
 800b224:	9907      	ldr	r1, [sp, #28]
 800b226:	430b      	orrs	r3, r1
 800b228:	9906      	ldr	r1, [sp, #24]
 800b22a:	430b      	orrs	r3, r1
 800b22c:	d120      	bne.n	800b270 <_dtoa_r+0xad0>
 800b22e:	2a00      	cmp	r2, #0
 800b230:	dded      	ble.n	800b20e <_dtoa_r+0xa6e>
 800b232:	4651      	mov	r1, sl
 800b234:	2201      	movs	r2, #1
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fbb4 	bl	800b9a4 <__lshift>
 800b23c:	4631      	mov	r1, r6
 800b23e:	4682      	mov	sl, r0
 800b240:	f000 fc1c 	bl	800ba7c <__mcmp>
 800b244:	2800      	cmp	r0, #0
 800b246:	dc03      	bgt.n	800b250 <_dtoa_r+0xab0>
 800b248:	d1e1      	bne.n	800b20e <_dtoa_r+0xa6e>
 800b24a:	f019 0f01 	tst.w	r9, #1
 800b24e:	d0de      	beq.n	800b20e <_dtoa_r+0xa6e>
 800b250:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b254:	d1d8      	bne.n	800b208 <_dtoa_r+0xa68>
 800b256:	9a01      	ldr	r2, [sp, #4]
 800b258:	2339      	movs	r3, #57	; 0x39
 800b25a:	7013      	strb	r3, [r2, #0]
 800b25c:	462b      	mov	r3, r5
 800b25e:	461d      	mov	r5, r3
 800b260:	3b01      	subs	r3, #1
 800b262:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b266:	2a39      	cmp	r2, #57	; 0x39
 800b268:	d06c      	beq.n	800b344 <_dtoa_r+0xba4>
 800b26a:	3201      	adds	r2, #1
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	e747      	b.n	800b100 <_dtoa_r+0x960>
 800b270:	2a00      	cmp	r2, #0
 800b272:	dd07      	ble.n	800b284 <_dtoa_r+0xae4>
 800b274:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b278:	d0ed      	beq.n	800b256 <_dtoa_r+0xab6>
 800b27a:	9a01      	ldr	r2, [sp, #4]
 800b27c:	f109 0301 	add.w	r3, r9, #1
 800b280:	7013      	strb	r3, [r2, #0]
 800b282:	e73d      	b.n	800b100 <_dtoa_r+0x960>
 800b284:	9b04      	ldr	r3, [sp, #16]
 800b286:	9a08      	ldr	r2, [sp, #32]
 800b288:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d043      	beq.n	800b318 <_dtoa_r+0xb78>
 800b290:	4651      	mov	r1, sl
 800b292:	2300      	movs	r3, #0
 800b294:	220a      	movs	r2, #10
 800b296:	4620      	mov	r0, r4
 800b298:	f000 f9d6 	bl	800b648 <__multadd>
 800b29c:	45b8      	cmp	r8, r7
 800b29e:	4682      	mov	sl, r0
 800b2a0:	f04f 0300 	mov.w	r3, #0
 800b2a4:	f04f 020a 	mov.w	r2, #10
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	d107      	bne.n	800b2be <_dtoa_r+0xb1e>
 800b2ae:	f000 f9cb 	bl	800b648 <__multadd>
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	9b04      	ldr	r3, [sp, #16]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	e775      	b.n	800b1aa <_dtoa_r+0xa0a>
 800b2be:	f000 f9c3 	bl	800b648 <__multadd>
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	220a      	movs	r2, #10
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f000 f9bc 	bl	800b648 <__multadd>
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	e7f0      	b.n	800b2b6 <_dtoa_r+0xb16>
 800b2d4:	9b04      	ldr	r3, [sp, #16]
 800b2d6:	9301      	str	r3, [sp, #4]
 800b2d8:	9d00      	ldr	r5, [sp, #0]
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4650      	mov	r0, sl
 800b2de:	f7ff f9d4 	bl	800a68a <quorem>
 800b2e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2e6:	9b00      	ldr	r3, [sp, #0]
 800b2e8:	f805 9b01 	strb.w	r9, [r5], #1
 800b2ec:	1aea      	subs	r2, r5, r3
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	dd07      	ble.n	800b304 <_dtoa_r+0xb64>
 800b2f4:	4651      	mov	r1, sl
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	220a      	movs	r2, #10
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f000 f9a4 	bl	800b648 <__multadd>
 800b300:	4682      	mov	sl, r0
 800b302:	e7ea      	b.n	800b2da <_dtoa_r+0xb3a>
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	bfc8      	it	gt
 800b30a:	461d      	movgt	r5, r3
 800b30c:	9b00      	ldr	r3, [sp, #0]
 800b30e:	bfd8      	it	le
 800b310:	2501      	movle	r5, #1
 800b312:	441d      	add	r5, r3
 800b314:	f04f 0800 	mov.w	r8, #0
 800b318:	4651      	mov	r1, sl
 800b31a:	2201      	movs	r2, #1
 800b31c:	4620      	mov	r0, r4
 800b31e:	f000 fb41 	bl	800b9a4 <__lshift>
 800b322:	4631      	mov	r1, r6
 800b324:	4682      	mov	sl, r0
 800b326:	f000 fba9 	bl	800ba7c <__mcmp>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	dc96      	bgt.n	800b25c <_dtoa_r+0xabc>
 800b32e:	d102      	bne.n	800b336 <_dtoa_r+0xb96>
 800b330:	f019 0f01 	tst.w	r9, #1
 800b334:	d192      	bne.n	800b25c <_dtoa_r+0xabc>
 800b336:	462b      	mov	r3, r5
 800b338:	461d      	mov	r5, r3
 800b33a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b33e:	2a30      	cmp	r2, #48	; 0x30
 800b340:	d0fa      	beq.n	800b338 <_dtoa_r+0xb98>
 800b342:	e6dd      	b.n	800b100 <_dtoa_r+0x960>
 800b344:	9a00      	ldr	r2, [sp, #0]
 800b346:	429a      	cmp	r2, r3
 800b348:	d189      	bne.n	800b25e <_dtoa_r+0xabe>
 800b34a:	f10b 0b01 	add.w	fp, fp, #1
 800b34e:	2331      	movs	r3, #49	; 0x31
 800b350:	e796      	b.n	800b280 <_dtoa_r+0xae0>
 800b352:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <_dtoa_r+0xbdc>)
 800b354:	f7ff ba99 	b.w	800a88a <_dtoa_r+0xea>
 800b358:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f47f aa6d 	bne.w	800a83a <_dtoa_r+0x9a>
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <_dtoa_r+0xbe0>)
 800b362:	f7ff ba92 	b.w	800a88a <_dtoa_r+0xea>
 800b366:	9b01      	ldr	r3, [sp, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	dcb5      	bgt.n	800b2d8 <_dtoa_r+0xb38>
 800b36c:	9b07      	ldr	r3, [sp, #28]
 800b36e:	2b02      	cmp	r3, #2
 800b370:	f73f aeb1 	bgt.w	800b0d6 <_dtoa_r+0x936>
 800b374:	e7b0      	b.n	800b2d8 <_dtoa_r+0xb38>
 800b376:	bf00      	nop
 800b378:	0800c8e4 	.word	0x0800c8e4
 800b37c:	0800c844 	.word	0x0800c844
 800b380:	0800c868 	.word	0x0800c868

0800b384 <_free_r>:
 800b384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b386:	2900      	cmp	r1, #0
 800b388:	d044      	beq.n	800b414 <_free_r+0x90>
 800b38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38e:	9001      	str	r0, [sp, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	f1a1 0404 	sub.w	r4, r1, #4
 800b396:	bfb8      	it	lt
 800b398:	18e4      	addlt	r4, r4, r3
 800b39a:	f000 f8e7 	bl	800b56c <__malloc_lock>
 800b39e:	4a1e      	ldr	r2, [pc, #120]	; (800b418 <_free_r+0x94>)
 800b3a0:	9801      	ldr	r0, [sp, #4]
 800b3a2:	6813      	ldr	r3, [r2, #0]
 800b3a4:	b933      	cbnz	r3, 800b3b4 <_free_r+0x30>
 800b3a6:	6063      	str	r3, [r4, #4]
 800b3a8:	6014      	str	r4, [r2, #0]
 800b3aa:	b003      	add	sp, #12
 800b3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3b0:	f000 b8e2 	b.w	800b578 <__malloc_unlock>
 800b3b4:	42a3      	cmp	r3, r4
 800b3b6:	d908      	bls.n	800b3ca <_free_r+0x46>
 800b3b8:	6825      	ldr	r5, [r4, #0]
 800b3ba:	1961      	adds	r1, r4, r5
 800b3bc:	428b      	cmp	r3, r1
 800b3be:	bf01      	itttt	eq
 800b3c0:	6819      	ldreq	r1, [r3, #0]
 800b3c2:	685b      	ldreq	r3, [r3, #4]
 800b3c4:	1949      	addeq	r1, r1, r5
 800b3c6:	6021      	streq	r1, [r4, #0]
 800b3c8:	e7ed      	b.n	800b3a6 <_free_r+0x22>
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	b10b      	cbz	r3, 800b3d4 <_free_r+0x50>
 800b3d0:	42a3      	cmp	r3, r4
 800b3d2:	d9fa      	bls.n	800b3ca <_free_r+0x46>
 800b3d4:	6811      	ldr	r1, [r2, #0]
 800b3d6:	1855      	adds	r5, r2, r1
 800b3d8:	42a5      	cmp	r5, r4
 800b3da:	d10b      	bne.n	800b3f4 <_free_r+0x70>
 800b3dc:	6824      	ldr	r4, [r4, #0]
 800b3de:	4421      	add	r1, r4
 800b3e0:	1854      	adds	r4, r2, r1
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	6011      	str	r1, [r2, #0]
 800b3e6:	d1e0      	bne.n	800b3aa <_free_r+0x26>
 800b3e8:	681c      	ldr	r4, [r3, #0]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	6053      	str	r3, [r2, #4]
 800b3ee:	440c      	add	r4, r1
 800b3f0:	6014      	str	r4, [r2, #0]
 800b3f2:	e7da      	b.n	800b3aa <_free_r+0x26>
 800b3f4:	d902      	bls.n	800b3fc <_free_r+0x78>
 800b3f6:	230c      	movs	r3, #12
 800b3f8:	6003      	str	r3, [r0, #0]
 800b3fa:	e7d6      	b.n	800b3aa <_free_r+0x26>
 800b3fc:	6825      	ldr	r5, [r4, #0]
 800b3fe:	1961      	adds	r1, r4, r5
 800b400:	428b      	cmp	r3, r1
 800b402:	bf04      	itt	eq
 800b404:	6819      	ldreq	r1, [r3, #0]
 800b406:	685b      	ldreq	r3, [r3, #4]
 800b408:	6063      	str	r3, [r4, #4]
 800b40a:	bf04      	itt	eq
 800b40c:	1949      	addeq	r1, r1, r5
 800b40e:	6021      	streq	r1, [r4, #0]
 800b410:	6054      	str	r4, [r2, #4]
 800b412:	e7ca      	b.n	800b3aa <_free_r+0x26>
 800b414:	b003      	add	sp, #12
 800b416:	bd30      	pop	{r4, r5, pc}
 800b418:	20001720 	.word	0x20001720

0800b41c <malloc>:
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <malloc+0xc>)
 800b41e:	4601      	mov	r1, r0
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	f000 b823 	b.w	800b46c <_malloc_r>
 800b426:	bf00      	nop
 800b428:	200001d4 	.word	0x200001d4

0800b42c <sbrk_aligned>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	4e0e      	ldr	r6, [pc, #56]	; (800b468 <sbrk_aligned+0x3c>)
 800b430:	460c      	mov	r4, r1
 800b432:	6831      	ldr	r1, [r6, #0]
 800b434:	4605      	mov	r5, r0
 800b436:	b911      	cbnz	r1, 800b43e <sbrk_aligned+0x12>
 800b438:	f000 fe40 	bl	800c0bc <_sbrk_r>
 800b43c:	6030      	str	r0, [r6, #0]
 800b43e:	4621      	mov	r1, r4
 800b440:	4628      	mov	r0, r5
 800b442:	f000 fe3b 	bl	800c0bc <_sbrk_r>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d00a      	beq.n	800b460 <sbrk_aligned+0x34>
 800b44a:	1cc4      	adds	r4, r0, #3
 800b44c:	f024 0403 	bic.w	r4, r4, #3
 800b450:	42a0      	cmp	r0, r4
 800b452:	d007      	beq.n	800b464 <sbrk_aligned+0x38>
 800b454:	1a21      	subs	r1, r4, r0
 800b456:	4628      	mov	r0, r5
 800b458:	f000 fe30 	bl	800c0bc <_sbrk_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d101      	bne.n	800b464 <sbrk_aligned+0x38>
 800b460:	f04f 34ff 	mov.w	r4, #4294967295
 800b464:	4620      	mov	r0, r4
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	20001724 	.word	0x20001724

0800b46c <_malloc_r>:
 800b46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b470:	1ccd      	adds	r5, r1, #3
 800b472:	f025 0503 	bic.w	r5, r5, #3
 800b476:	3508      	adds	r5, #8
 800b478:	2d0c      	cmp	r5, #12
 800b47a:	bf38      	it	cc
 800b47c:	250c      	movcc	r5, #12
 800b47e:	2d00      	cmp	r5, #0
 800b480:	4607      	mov	r7, r0
 800b482:	db01      	blt.n	800b488 <_malloc_r+0x1c>
 800b484:	42a9      	cmp	r1, r5
 800b486:	d905      	bls.n	800b494 <_malloc_r+0x28>
 800b488:	230c      	movs	r3, #12
 800b48a:	603b      	str	r3, [r7, #0]
 800b48c:	2600      	movs	r6, #0
 800b48e:	4630      	mov	r0, r6
 800b490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b494:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b568 <_malloc_r+0xfc>
 800b498:	f000 f868 	bl	800b56c <__malloc_lock>
 800b49c:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a0:	461c      	mov	r4, r3
 800b4a2:	bb5c      	cbnz	r4, 800b4fc <_malloc_r+0x90>
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	f7ff ffc0 	bl	800b42c <sbrk_aligned>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	d155      	bne.n	800b55e <_malloc_r+0xf2>
 800b4b2:	f8d8 4000 	ldr.w	r4, [r8]
 800b4b6:	4626      	mov	r6, r4
 800b4b8:	2e00      	cmp	r6, #0
 800b4ba:	d145      	bne.n	800b548 <_malloc_r+0xdc>
 800b4bc:	2c00      	cmp	r4, #0
 800b4be:	d048      	beq.n	800b552 <_malloc_r+0xe6>
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	eb04 0903 	add.w	r9, r4, r3
 800b4ca:	f000 fdf7 	bl	800c0bc <_sbrk_r>
 800b4ce:	4581      	cmp	r9, r0
 800b4d0:	d13f      	bne.n	800b552 <_malloc_r+0xe6>
 800b4d2:	6821      	ldr	r1, [r4, #0]
 800b4d4:	1a6d      	subs	r5, r5, r1
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f7ff ffa7 	bl	800b42c <sbrk_aligned>
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d037      	beq.n	800b552 <_malloc_r+0xe6>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	442b      	add	r3, r5
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d038      	beq.n	800b562 <_malloc_r+0xf6>
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	42a2      	cmp	r2, r4
 800b4f4:	d12b      	bne.n	800b54e <_malloc_r+0xe2>
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	605a      	str	r2, [r3, #4]
 800b4fa:	e00f      	b.n	800b51c <_malloc_r+0xb0>
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	1b52      	subs	r2, r2, r5
 800b500:	d41f      	bmi.n	800b542 <_malloc_r+0xd6>
 800b502:	2a0b      	cmp	r2, #11
 800b504:	d917      	bls.n	800b536 <_malloc_r+0xca>
 800b506:	1961      	adds	r1, r4, r5
 800b508:	42a3      	cmp	r3, r4
 800b50a:	6025      	str	r5, [r4, #0]
 800b50c:	bf18      	it	ne
 800b50e:	6059      	strne	r1, [r3, #4]
 800b510:	6863      	ldr	r3, [r4, #4]
 800b512:	bf08      	it	eq
 800b514:	f8c8 1000 	streq.w	r1, [r8]
 800b518:	5162      	str	r2, [r4, r5]
 800b51a:	604b      	str	r3, [r1, #4]
 800b51c:	4638      	mov	r0, r7
 800b51e:	f104 060b 	add.w	r6, r4, #11
 800b522:	f000 f829 	bl	800b578 <__malloc_unlock>
 800b526:	f026 0607 	bic.w	r6, r6, #7
 800b52a:	1d23      	adds	r3, r4, #4
 800b52c:	1af2      	subs	r2, r6, r3
 800b52e:	d0ae      	beq.n	800b48e <_malloc_r+0x22>
 800b530:	1b9b      	subs	r3, r3, r6
 800b532:	50a3      	str	r3, [r4, r2]
 800b534:	e7ab      	b.n	800b48e <_malloc_r+0x22>
 800b536:	42a3      	cmp	r3, r4
 800b538:	6862      	ldr	r2, [r4, #4]
 800b53a:	d1dd      	bne.n	800b4f8 <_malloc_r+0x8c>
 800b53c:	f8c8 2000 	str.w	r2, [r8]
 800b540:	e7ec      	b.n	800b51c <_malloc_r+0xb0>
 800b542:	4623      	mov	r3, r4
 800b544:	6864      	ldr	r4, [r4, #4]
 800b546:	e7ac      	b.n	800b4a2 <_malloc_r+0x36>
 800b548:	4634      	mov	r4, r6
 800b54a:	6876      	ldr	r6, [r6, #4]
 800b54c:	e7b4      	b.n	800b4b8 <_malloc_r+0x4c>
 800b54e:	4613      	mov	r3, r2
 800b550:	e7cc      	b.n	800b4ec <_malloc_r+0x80>
 800b552:	230c      	movs	r3, #12
 800b554:	603b      	str	r3, [r7, #0]
 800b556:	4638      	mov	r0, r7
 800b558:	f000 f80e 	bl	800b578 <__malloc_unlock>
 800b55c:	e797      	b.n	800b48e <_malloc_r+0x22>
 800b55e:	6025      	str	r5, [r4, #0]
 800b560:	e7dc      	b.n	800b51c <_malloc_r+0xb0>
 800b562:	605b      	str	r3, [r3, #4]
 800b564:	deff      	udf	#255	; 0xff
 800b566:	bf00      	nop
 800b568:	20001720 	.word	0x20001720

0800b56c <__malloc_lock>:
 800b56c:	4801      	ldr	r0, [pc, #4]	; (800b574 <__malloc_lock+0x8>)
 800b56e:	f7ff b88a 	b.w	800a686 <__retarget_lock_acquire_recursive>
 800b572:	bf00      	nop
 800b574:	2000171c 	.word	0x2000171c

0800b578 <__malloc_unlock>:
 800b578:	4801      	ldr	r0, [pc, #4]	; (800b580 <__malloc_unlock+0x8>)
 800b57a:	f7ff b885 	b.w	800a688 <__retarget_lock_release_recursive>
 800b57e:	bf00      	nop
 800b580:	2000171c 	.word	0x2000171c

0800b584 <_Balloc>:
 800b584:	b570      	push	{r4, r5, r6, lr}
 800b586:	69c6      	ldr	r6, [r0, #28]
 800b588:	4604      	mov	r4, r0
 800b58a:	460d      	mov	r5, r1
 800b58c:	b976      	cbnz	r6, 800b5ac <_Balloc+0x28>
 800b58e:	2010      	movs	r0, #16
 800b590:	f7ff ff44 	bl	800b41c <malloc>
 800b594:	4602      	mov	r2, r0
 800b596:	61e0      	str	r0, [r4, #28]
 800b598:	b920      	cbnz	r0, 800b5a4 <_Balloc+0x20>
 800b59a:	4b18      	ldr	r3, [pc, #96]	; (800b5fc <_Balloc+0x78>)
 800b59c:	4818      	ldr	r0, [pc, #96]	; (800b600 <_Balloc+0x7c>)
 800b59e:	216b      	movs	r1, #107	; 0x6b
 800b5a0:	f000 fdaa 	bl	800c0f8 <__assert_func>
 800b5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5a8:	6006      	str	r6, [r0, #0]
 800b5aa:	60c6      	str	r6, [r0, #12]
 800b5ac:	69e6      	ldr	r6, [r4, #28]
 800b5ae:	68f3      	ldr	r3, [r6, #12]
 800b5b0:	b183      	cbz	r3, 800b5d4 <_Balloc+0x50>
 800b5b2:	69e3      	ldr	r3, [r4, #28]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ba:	b9b8      	cbnz	r0, 800b5ec <_Balloc+0x68>
 800b5bc:	2101      	movs	r1, #1
 800b5be:	fa01 f605 	lsl.w	r6, r1, r5
 800b5c2:	1d72      	adds	r2, r6, #5
 800b5c4:	0092      	lsls	r2, r2, #2
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 fdb4 	bl	800c134 <_calloc_r>
 800b5cc:	b160      	cbz	r0, 800b5e8 <_Balloc+0x64>
 800b5ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5d2:	e00e      	b.n	800b5f2 <_Balloc+0x6e>
 800b5d4:	2221      	movs	r2, #33	; 0x21
 800b5d6:	2104      	movs	r1, #4
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 fdab 	bl	800c134 <_calloc_r>
 800b5de:	69e3      	ldr	r3, [r4, #28]
 800b5e0:	60f0      	str	r0, [r6, #12]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e4      	bne.n	800b5b2 <_Balloc+0x2e>
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	bd70      	pop	{r4, r5, r6, pc}
 800b5ec:	6802      	ldr	r2, [r0, #0]
 800b5ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5f8:	e7f7      	b.n	800b5ea <_Balloc+0x66>
 800b5fa:	bf00      	nop
 800b5fc:	0800c875 	.word	0x0800c875
 800b600:	0800c8f5 	.word	0x0800c8f5

0800b604 <_Bfree>:
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	69c6      	ldr	r6, [r0, #28]
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	b976      	cbnz	r6, 800b62c <_Bfree+0x28>
 800b60e:	2010      	movs	r0, #16
 800b610:	f7ff ff04 	bl	800b41c <malloc>
 800b614:	4602      	mov	r2, r0
 800b616:	61e8      	str	r0, [r5, #28]
 800b618:	b920      	cbnz	r0, 800b624 <_Bfree+0x20>
 800b61a:	4b09      	ldr	r3, [pc, #36]	; (800b640 <_Bfree+0x3c>)
 800b61c:	4809      	ldr	r0, [pc, #36]	; (800b644 <_Bfree+0x40>)
 800b61e:	218f      	movs	r1, #143	; 0x8f
 800b620:	f000 fd6a 	bl	800c0f8 <__assert_func>
 800b624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b628:	6006      	str	r6, [r0, #0]
 800b62a:	60c6      	str	r6, [r0, #12]
 800b62c:	b13c      	cbz	r4, 800b63e <_Bfree+0x3a>
 800b62e:	69eb      	ldr	r3, [r5, #28]
 800b630:	6862      	ldr	r2, [r4, #4]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b638:	6021      	str	r1, [r4, #0]
 800b63a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b63e:	bd70      	pop	{r4, r5, r6, pc}
 800b640:	0800c875 	.word	0x0800c875
 800b644:	0800c8f5 	.word	0x0800c8f5

0800b648 <__multadd>:
 800b648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b64c:	690d      	ldr	r5, [r1, #16]
 800b64e:	4607      	mov	r7, r0
 800b650:	460c      	mov	r4, r1
 800b652:	461e      	mov	r6, r3
 800b654:	f101 0c14 	add.w	ip, r1, #20
 800b658:	2000      	movs	r0, #0
 800b65a:	f8dc 3000 	ldr.w	r3, [ip]
 800b65e:	b299      	uxth	r1, r3
 800b660:	fb02 6101 	mla	r1, r2, r1, r6
 800b664:	0c1e      	lsrs	r6, r3, #16
 800b666:	0c0b      	lsrs	r3, r1, #16
 800b668:	fb02 3306 	mla	r3, r2, r6, r3
 800b66c:	b289      	uxth	r1, r1
 800b66e:	3001      	adds	r0, #1
 800b670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b674:	4285      	cmp	r5, r0
 800b676:	f84c 1b04 	str.w	r1, [ip], #4
 800b67a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b67e:	dcec      	bgt.n	800b65a <__multadd+0x12>
 800b680:	b30e      	cbz	r6, 800b6c6 <__multadd+0x7e>
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	42ab      	cmp	r3, r5
 800b686:	dc19      	bgt.n	800b6bc <__multadd+0x74>
 800b688:	6861      	ldr	r1, [r4, #4]
 800b68a:	4638      	mov	r0, r7
 800b68c:	3101      	adds	r1, #1
 800b68e:	f7ff ff79 	bl	800b584 <_Balloc>
 800b692:	4680      	mov	r8, r0
 800b694:	b928      	cbnz	r0, 800b6a2 <__multadd+0x5a>
 800b696:	4602      	mov	r2, r0
 800b698:	4b0c      	ldr	r3, [pc, #48]	; (800b6cc <__multadd+0x84>)
 800b69a:	480d      	ldr	r0, [pc, #52]	; (800b6d0 <__multadd+0x88>)
 800b69c:	21ba      	movs	r1, #186	; 0xba
 800b69e:	f000 fd2b 	bl	800c0f8 <__assert_func>
 800b6a2:	6922      	ldr	r2, [r4, #16]
 800b6a4:	3202      	adds	r2, #2
 800b6a6:	f104 010c 	add.w	r1, r4, #12
 800b6aa:	0092      	lsls	r2, r2, #2
 800b6ac:	300c      	adds	r0, #12
 800b6ae:	f000 fd15 	bl	800c0dc <memcpy>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4638      	mov	r0, r7
 800b6b6:	f7ff ffa5 	bl	800b604 <_Bfree>
 800b6ba:	4644      	mov	r4, r8
 800b6bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6c0:	3501      	adds	r5, #1
 800b6c2:	615e      	str	r6, [r3, #20]
 800b6c4:	6125      	str	r5, [r4, #16]
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6cc:	0800c8e4 	.word	0x0800c8e4
 800b6d0:	0800c8f5 	.word	0x0800c8f5

0800b6d4 <__hi0bits>:
 800b6d4:	0c03      	lsrs	r3, r0, #16
 800b6d6:	041b      	lsls	r3, r3, #16
 800b6d8:	b9d3      	cbnz	r3, 800b710 <__hi0bits+0x3c>
 800b6da:	0400      	lsls	r0, r0, #16
 800b6dc:	2310      	movs	r3, #16
 800b6de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6e2:	bf04      	itt	eq
 800b6e4:	0200      	lsleq	r0, r0, #8
 800b6e6:	3308      	addeq	r3, #8
 800b6e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6ec:	bf04      	itt	eq
 800b6ee:	0100      	lsleq	r0, r0, #4
 800b6f0:	3304      	addeq	r3, #4
 800b6f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b6f6:	bf04      	itt	eq
 800b6f8:	0080      	lsleq	r0, r0, #2
 800b6fa:	3302      	addeq	r3, #2
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	db05      	blt.n	800b70c <__hi0bits+0x38>
 800b700:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b704:	f103 0301 	add.w	r3, r3, #1
 800b708:	bf08      	it	eq
 800b70a:	2320      	moveq	r3, #32
 800b70c:	4618      	mov	r0, r3
 800b70e:	4770      	bx	lr
 800b710:	2300      	movs	r3, #0
 800b712:	e7e4      	b.n	800b6de <__hi0bits+0xa>

0800b714 <__lo0bits>:
 800b714:	6803      	ldr	r3, [r0, #0]
 800b716:	f013 0207 	ands.w	r2, r3, #7
 800b71a:	d00c      	beq.n	800b736 <__lo0bits+0x22>
 800b71c:	07d9      	lsls	r1, r3, #31
 800b71e:	d422      	bmi.n	800b766 <__lo0bits+0x52>
 800b720:	079a      	lsls	r2, r3, #30
 800b722:	bf49      	itett	mi
 800b724:	085b      	lsrmi	r3, r3, #1
 800b726:	089b      	lsrpl	r3, r3, #2
 800b728:	6003      	strmi	r3, [r0, #0]
 800b72a:	2201      	movmi	r2, #1
 800b72c:	bf5c      	itt	pl
 800b72e:	6003      	strpl	r3, [r0, #0]
 800b730:	2202      	movpl	r2, #2
 800b732:	4610      	mov	r0, r2
 800b734:	4770      	bx	lr
 800b736:	b299      	uxth	r1, r3
 800b738:	b909      	cbnz	r1, 800b73e <__lo0bits+0x2a>
 800b73a:	0c1b      	lsrs	r3, r3, #16
 800b73c:	2210      	movs	r2, #16
 800b73e:	b2d9      	uxtb	r1, r3
 800b740:	b909      	cbnz	r1, 800b746 <__lo0bits+0x32>
 800b742:	3208      	adds	r2, #8
 800b744:	0a1b      	lsrs	r3, r3, #8
 800b746:	0719      	lsls	r1, r3, #28
 800b748:	bf04      	itt	eq
 800b74a:	091b      	lsreq	r3, r3, #4
 800b74c:	3204      	addeq	r2, #4
 800b74e:	0799      	lsls	r1, r3, #30
 800b750:	bf04      	itt	eq
 800b752:	089b      	lsreq	r3, r3, #2
 800b754:	3202      	addeq	r2, #2
 800b756:	07d9      	lsls	r1, r3, #31
 800b758:	d403      	bmi.n	800b762 <__lo0bits+0x4e>
 800b75a:	085b      	lsrs	r3, r3, #1
 800b75c:	f102 0201 	add.w	r2, r2, #1
 800b760:	d003      	beq.n	800b76a <__lo0bits+0x56>
 800b762:	6003      	str	r3, [r0, #0]
 800b764:	e7e5      	b.n	800b732 <__lo0bits+0x1e>
 800b766:	2200      	movs	r2, #0
 800b768:	e7e3      	b.n	800b732 <__lo0bits+0x1e>
 800b76a:	2220      	movs	r2, #32
 800b76c:	e7e1      	b.n	800b732 <__lo0bits+0x1e>
	...

0800b770 <__i2b>:
 800b770:	b510      	push	{r4, lr}
 800b772:	460c      	mov	r4, r1
 800b774:	2101      	movs	r1, #1
 800b776:	f7ff ff05 	bl	800b584 <_Balloc>
 800b77a:	4602      	mov	r2, r0
 800b77c:	b928      	cbnz	r0, 800b78a <__i2b+0x1a>
 800b77e:	4b05      	ldr	r3, [pc, #20]	; (800b794 <__i2b+0x24>)
 800b780:	4805      	ldr	r0, [pc, #20]	; (800b798 <__i2b+0x28>)
 800b782:	f240 1145 	movw	r1, #325	; 0x145
 800b786:	f000 fcb7 	bl	800c0f8 <__assert_func>
 800b78a:	2301      	movs	r3, #1
 800b78c:	6144      	str	r4, [r0, #20]
 800b78e:	6103      	str	r3, [r0, #16]
 800b790:	bd10      	pop	{r4, pc}
 800b792:	bf00      	nop
 800b794:	0800c8e4 	.word	0x0800c8e4
 800b798:	0800c8f5 	.word	0x0800c8f5

0800b79c <__multiply>:
 800b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	4691      	mov	r9, r2
 800b7a2:	690a      	ldr	r2, [r1, #16]
 800b7a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	bfb8      	it	lt
 800b7ac:	460b      	movlt	r3, r1
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	bfbc      	itt	lt
 800b7b2:	464c      	movlt	r4, r9
 800b7b4:	4699      	movlt	r9, r3
 800b7b6:	6927      	ldr	r7, [r4, #16]
 800b7b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7bc:	68a3      	ldr	r3, [r4, #8]
 800b7be:	6861      	ldr	r1, [r4, #4]
 800b7c0:	eb07 060a 	add.w	r6, r7, sl
 800b7c4:	42b3      	cmp	r3, r6
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	bfb8      	it	lt
 800b7ca:	3101      	addlt	r1, #1
 800b7cc:	f7ff feda 	bl	800b584 <_Balloc>
 800b7d0:	b930      	cbnz	r0, 800b7e0 <__multiply+0x44>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	4b44      	ldr	r3, [pc, #272]	; (800b8e8 <__multiply+0x14c>)
 800b7d6:	4845      	ldr	r0, [pc, #276]	; (800b8ec <__multiply+0x150>)
 800b7d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b7dc:	f000 fc8c 	bl	800c0f8 <__assert_func>
 800b7e0:	f100 0514 	add.w	r5, r0, #20
 800b7e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7e8:	462b      	mov	r3, r5
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4543      	cmp	r3, r8
 800b7ee:	d321      	bcc.n	800b834 <__multiply+0x98>
 800b7f0:	f104 0314 	add.w	r3, r4, #20
 800b7f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7f8:	f109 0314 	add.w	r3, r9, #20
 800b7fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b800:	9202      	str	r2, [sp, #8]
 800b802:	1b3a      	subs	r2, r7, r4
 800b804:	3a15      	subs	r2, #21
 800b806:	f022 0203 	bic.w	r2, r2, #3
 800b80a:	3204      	adds	r2, #4
 800b80c:	f104 0115 	add.w	r1, r4, #21
 800b810:	428f      	cmp	r7, r1
 800b812:	bf38      	it	cc
 800b814:	2204      	movcc	r2, #4
 800b816:	9201      	str	r2, [sp, #4]
 800b818:	9a02      	ldr	r2, [sp, #8]
 800b81a:	9303      	str	r3, [sp, #12]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d80c      	bhi.n	800b83a <__multiply+0x9e>
 800b820:	2e00      	cmp	r6, #0
 800b822:	dd03      	ble.n	800b82c <__multiply+0x90>
 800b824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d05b      	beq.n	800b8e4 <__multiply+0x148>
 800b82c:	6106      	str	r6, [r0, #16]
 800b82e:	b005      	add	sp, #20
 800b830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b834:	f843 2b04 	str.w	r2, [r3], #4
 800b838:	e7d8      	b.n	800b7ec <__multiply+0x50>
 800b83a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b83e:	f1ba 0f00 	cmp.w	sl, #0
 800b842:	d024      	beq.n	800b88e <__multiply+0xf2>
 800b844:	f104 0e14 	add.w	lr, r4, #20
 800b848:	46a9      	mov	r9, r5
 800b84a:	f04f 0c00 	mov.w	ip, #0
 800b84e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b852:	f8d9 1000 	ldr.w	r1, [r9]
 800b856:	fa1f fb82 	uxth.w	fp, r2
 800b85a:	b289      	uxth	r1, r1
 800b85c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b860:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b864:	f8d9 2000 	ldr.w	r2, [r9]
 800b868:	4461      	add	r1, ip
 800b86a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b86e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b872:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b876:	b289      	uxth	r1, r1
 800b878:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b87c:	4577      	cmp	r7, lr
 800b87e:	f849 1b04 	str.w	r1, [r9], #4
 800b882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b886:	d8e2      	bhi.n	800b84e <__multiply+0xb2>
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	f845 c002 	str.w	ip, [r5, r2]
 800b88e:	9a03      	ldr	r2, [sp, #12]
 800b890:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b894:	3304      	adds	r3, #4
 800b896:	f1b9 0f00 	cmp.w	r9, #0
 800b89a:	d021      	beq.n	800b8e0 <__multiply+0x144>
 800b89c:	6829      	ldr	r1, [r5, #0]
 800b89e:	f104 0c14 	add.w	ip, r4, #20
 800b8a2:	46ae      	mov	lr, r5
 800b8a4:	f04f 0a00 	mov.w	sl, #0
 800b8a8:	f8bc b000 	ldrh.w	fp, [ip]
 800b8ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b8b4:	4452      	add	r2, sl
 800b8b6:	b289      	uxth	r1, r1
 800b8b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8bc:	f84e 1b04 	str.w	r1, [lr], #4
 800b8c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b8cc:	fb09 110a 	mla	r1, r9, sl, r1
 800b8d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b8d4:	4567      	cmp	r7, ip
 800b8d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8da:	d8e5      	bhi.n	800b8a8 <__multiply+0x10c>
 800b8dc:	9a01      	ldr	r2, [sp, #4]
 800b8de:	50a9      	str	r1, [r5, r2]
 800b8e0:	3504      	adds	r5, #4
 800b8e2:	e799      	b.n	800b818 <__multiply+0x7c>
 800b8e4:	3e01      	subs	r6, #1
 800b8e6:	e79b      	b.n	800b820 <__multiply+0x84>
 800b8e8:	0800c8e4 	.word	0x0800c8e4
 800b8ec:	0800c8f5 	.word	0x0800c8f5

0800b8f0 <__pow5mult>:
 800b8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f4:	4615      	mov	r5, r2
 800b8f6:	f012 0203 	ands.w	r2, r2, #3
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460f      	mov	r7, r1
 800b8fe:	d007      	beq.n	800b910 <__pow5mult+0x20>
 800b900:	4c25      	ldr	r4, [pc, #148]	; (800b998 <__pow5mult+0xa8>)
 800b902:	3a01      	subs	r2, #1
 800b904:	2300      	movs	r3, #0
 800b906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b90a:	f7ff fe9d 	bl	800b648 <__multadd>
 800b90e:	4607      	mov	r7, r0
 800b910:	10ad      	asrs	r5, r5, #2
 800b912:	d03d      	beq.n	800b990 <__pow5mult+0xa0>
 800b914:	69f4      	ldr	r4, [r6, #28]
 800b916:	b97c      	cbnz	r4, 800b938 <__pow5mult+0x48>
 800b918:	2010      	movs	r0, #16
 800b91a:	f7ff fd7f 	bl	800b41c <malloc>
 800b91e:	4602      	mov	r2, r0
 800b920:	61f0      	str	r0, [r6, #28]
 800b922:	b928      	cbnz	r0, 800b930 <__pow5mult+0x40>
 800b924:	4b1d      	ldr	r3, [pc, #116]	; (800b99c <__pow5mult+0xac>)
 800b926:	481e      	ldr	r0, [pc, #120]	; (800b9a0 <__pow5mult+0xb0>)
 800b928:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b92c:	f000 fbe4 	bl	800c0f8 <__assert_func>
 800b930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b934:	6004      	str	r4, [r0, #0]
 800b936:	60c4      	str	r4, [r0, #12]
 800b938:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b93c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b940:	b94c      	cbnz	r4, 800b956 <__pow5mult+0x66>
 800b942:	f240 2171 	movw	r1, #625	; 0x271
 800b946:	4630      	mov	r0, r6
 800b948:	f7ff ff12 	bl	800b770 <__i2b>
 800b94c:	2300      	movs	r3, #0
 800b94e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b952:	4604      	mov	r4, r0
 800b954:	6003      	str	r3, [r0, #0]
 800b956:	f04f 0900 	mov.w	r9, #0
 800b95a:	07eb      	lsls	r3, r5, #31
 800b95c:	d50a      	bpl.n	800b974 <__pow5mult+0x84>
 800b95e:	4639      	mov	r1, r7
 800b960:	4622      	mov	r2, r4
 800b962:	4630      	mov	r0, r6
 800b964:	f7ff ff1a 	bl	800b79c <__multiply>
 800b968:	4639      	mov	r1, r7
 800b96a:	4680      	mov	r8, r0
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff fe49 	bl	800b604 <_Bfree>
 800b972:	4647      	mov	r7, r8
 800b974:	106d      	asrs	r5, r5, #1
 800b976:	d00b      	beq.n	800b990 <__pow5mult+0xa0>
 800b978:	6820      	ldr	r0, [r4, #0]
 800b97a:	b938      	cbnz	r0, 800b98c <__pow5mult+0x9c>
 800b97c:	4622      	mov	r2, r4
 800b97e:	4621      	mov	r1, r4
 800b980:	4630      	mov	r0, r6
 800b982:	f7ff ff0b 	bl	800b79c <__multiply>
 800b986:	6020      	str	r0, [r4, #0]
 800b988:	f8c0 9000 	str.w	r9, [r0]
 800b98c:	4604      	mov	r4, r0
 800b98e:	e7e4      	b.n	800b95a <__pow5mult+0x6a>
 800b990:	4638      	mov	r0, r7
 800b992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b996:	bf00      	nop
 800b998:	0800ca40 	.word	0x0800ca40
 800b99c:	0800c875 	.word	0x0800c875
 800b9a0:	0800c8f5 	.word	0x0800c8f5

0800b9a4 <__lshift>:
 800b9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	6849      	ldr	r1, [r1, #4]
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	4607      	mov	r7, r0
 800b9b6:	4691      	mov	r9, r2
 800b9b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9bc:	f108 0601 	add.w	r6, r8, #1
 800b9c0:	42b3      	cmp	r3, r6
 800b9c2:	db0b      	blt.n	800b9dc <__lshift+0x38>
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f7ff fddd 	bl	800b584 <_Balloc>
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	b948      	cbnz	r0, 800b9e2 <__lshift+0x3e>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	4b28      	ldr	r3, [pc, #160]	; (800ba74 <__lshift+0xd0>)
 800b9d2:	4829      	ldr	r0, [pc, #164]	; (800ba78 <__lshift+0xd4>)
 800b9d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9d8:	f000 fb8e 	bl	800c0f8 <__assert_func>
 800b9dc:	3101      	adds	r1, #1
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	e7ee      	b.n	800b9c0 <__lshift+0x1c>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f100 0114 	add.w	r1, r0, #20
 800b9e8:	f100 0210 	add.w	r2, r0, #16
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	4553      	cmp	r3, sl
 800b9f0:	db33      	blt.n	800ba5a <__lshift+0xb6>
 800b9f2:	6920      	ldr	r0, [r4, #16]
 800b9f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9f8:	f104 0314 	add.w	r3, r4, #20
 800b9fc:	f019 091f 	ands.w	r9, r9, #31
 800ba00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba08:	d02b      	beq.n	800ba62 <__lshift+0xbe>
 800ba0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba0e:	468a      	mov	sl, r1
 800ba10:	2200      	movs	r2, #0
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	fa00 f009 	lsl.w	r0, r0, r9
 800ba18:	4310      	orrs	r0, r2
 800ba1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ba1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba22:	459c      	cmp	ip, r3
 800ba24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba28:	d8f3      	bhi.n	800ba12 <__lshift+0x6e>
 800ba2a:	ebac 0304 	sub.w	r3, ip, r4
 800ba2e:	3b15      	subs	r3, #21
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	3304      	adds	r3, #4
 800ba36:	f104 0015 	add.w	r0, r4, #21
 800ba3a:	4584      	cmp	ip, r0
 800ba3c:	bf38      	it	cc
 800ba3e:	2304      	movcc	r3, #4
 800ba40:	50ca      	str	r2, [r1, r3]
 800ba42:	b10a      	cbz	r2, 800ba48 <__lshift+0xa4>
 800ba44:	f108 0602 	add.w	r6, r8, #2
 800ba48:	3e01      	subs	r6, #1
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	612e      	str	r6, [r5, #16]
 800ba4e:	4621      	mov	r1, r4
 800ba50:	f7ff fdd8 	bl	800b604 <_Bfree>
 800ba54:	4628      	mov	r0, r5
 800ba56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba5e:	3301      	adds	r3, #1
 800ba60:	e7c5      	b.n	800b9ee <__lshift+0x4a>
 800ba62:	3904      	subs	r1, #4
 800ba64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba6c:	459c      	cmp	ip, r3
 800ba6e:	d8f9      	bhi.n	800ba64 <__lshift+0xc0>
 800ba70:	e7ea      	b.n	800ba48 <__lshift+0xa4>
 800ba72:	bf00      	nop
 800ba74:	0800c8e4 	.word	0x0800c8e4
 800ba78:	0800c8f5 	.word	0x0800c8f5

0800ba7c <__mcmp>:
 800ba7c:	b530      	push	{r4, r5, lr}
 800ba7e:	6902      	ldr	r2, [r0, #16]
 800ba80:	690c      	ldr	r4, [r1, #16]
 800ba82:	1b12      	subs	r2, r2, r4
 800ba84:	d10e      	bne.n	800baa4 <__mcmp+0x28>
 800ba86:	f100 0314 	add.w	r3, r0, #20
 800ba8a:	3114      	adds	r1, #20
 800ba8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba9c:	42a5      	cmp	r5, r4
 800ba9e:	d003      	beq.n	800baa8 <__mcmp+0x2c>
 800baa0:	d305      	bcc.n	800baae <__mcmp+0x32>
 800baa2:	2201      	movs	r2, #1
 800baa4:	4610      	mov	r0, r2
 800baa6:	bd30      	pop	{r4, r5, pc}
 800baa8:	4283      	cmp	r3, r0
 800baaa:	d3f3      	bcc.n	800ba94 <__mcmp+0x18>
 800baac:	e7fa      	b.n	800baa4 <__mcmp+0x28>
 800baae:	f04f 32ff 	mov.w	r2, #4294967295
 800bab2:	e7f7      	b.n	800baa4 <__mcmp+0x28>

0800bab4 <__mdiff>:
 800bab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	460c      	mov	r4, r1
 800baba:	4606      	mov	r6, r0
 800babc:	4611      	mov	r1, r2
 800babe:	4620      	mov	r0, r4
 800bac0:	4690      	mov	r8, r2
 800bac2:	f7ff ffdb 	bl	800ba7c <__mcmp>
 800bac6:	1e05      	subs	r5, r0, #0
 800bac8:	d110      	bne.n	800baec <__mdiff+0x38>
 800baca:	4629      	mov	r1, r5
 800bacc:	4630      	mov	r0, r6
 800bace:	f7ff fd59 	bl	800b584 <_Balloc>
 800bad2:	b930      	cbnz	r0, 800bae2 <__mdiff+0x2e>
 800bad4:	4b3a      	ldr	r3, [pc, #232]	; (800bbc0 <__mdiff+0x10c>)
 800bad6:	4602      	mov	r2, r0
 800bad8:	f240 2137 	movw	r1, #567	; 0x237
 800badc:	4839      	ldr	r0, [pc, #228]	; (800bbc4 <__mdiff+0x110>)
 800bade:	f000 fb0b 	bl	800c0f8 <__assert_func>
 800bae2:	2301      	movs	r3, #1
 800bae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baec:	bfa4      	itt	ge
 800baee:	4643      	movge	r3, r8
 800baf0:	46a0      	movge	r8, r4
 800baf2:	4630      	mov	r0, r6
 800baf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800baf8:	bfa6      	itte	ge
 800bafa:	461c      	movge	r4, r3
 800bafc:	2500      	movge	r5, #0
 800bafe:	2501      	movlt	r5, #1
 800bb00:	f7ff fd40 	bl	800b584 <_Balloc>
 800bb04:	b920      	cbnz	r0, 800bb10 <__mdiff+0x5c>
 800bb06:	4b2e      	ldr	r3, [pc, #184]	; (800bbc0 <__mdiff+0x10c>)
 800bb08:	4602      	mov	r2, r0
 800bb0a:	f240 2145 	movw	r1, #581	; 0x245
 800bb0e:	e7e5      	b.n	800badc <__mdiff+0x28>
 800bb10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb14:	6926      	ldr	r6, [r4, #16]
 800bb16:	60c5      	str	r5, [r0, #12]
 800bb18:	f104 0914 	add.w	r9, r4, #20
 800bb1c:	f108 0514 	add.w	r5, r8, #20
 800bb20:	f100 0e14 	add.w	lr, r0, #20
 800bb24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb2c:	f108 0210 	add.w	r2, r8, #16
 800bb30:	46f2      	mov	sl, lr
 800bb32:	2100      	movs	r1, #0
 800bb34:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb3c:	fa11 f88b 	uxtah	r8, r1, fp
 800bb40:	b299      	uxth	r1, r3
 800bb42:	0c1b      	lsrs	r3, r3, #16
 800bb44:	eba8 0801 	sub.w	r8, r8, r1
 800bb48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb50:	fa1f f888 	uxth.w	r8, r8
 800bb54:	1419      	asrs	r1, r3, #16
 800bb56:	454e      	cmp	r6, r9
 800bb58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb5c:	f84a 3b04 	str.w	r3, [sl], #4
 800bb60:	d8e8      	bhi.n	800bb34 <__mdiff+0x80>
 800bb62:	1b33      	subs	r3, r6, r4
 800bb64:	3b15      	subs	r3, #21
 800bb66:	f023 0303 	bic.w	r3, r3, #3
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	3415      	adds	r4, #21
 800bb6e:	42a6      	cmp	r6, r4
 800bb70:	bf38      	it	cc
 800bb72:	2304      	movcc	r3, #4
 800bb74:	441d      	add	r5, r3
 800bb76:	4473      	add	r3, lr
 800bb78:	469e      	mov	lr, r3
 800bb7a:	462e      	mov	r6, r5
 800bb7c:	4566      	cmp	r6, ip
 800bb7e:	d30e      	bcc.n	800bb9e <__mdiff+0xea>
 800bb80:	f10c 0203 	add.w	r2, ip, #3
 800bb84:	1b52      	subs	r2, r2, r5
 800bb86:	f022 0203 	bic.w	r2, r2, #3
 800bb8a:	3d03      	subs	r5, #3
 800bb8c:	45ac      	cmp	ip, r5
 800bb8e:	bf38      	it	cc
 800bb90:	2200      	movcc	r2, #0
 800bb92:	4413      	add	r3, r2
 800bb94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb98:	b17a      	cbz	r2, 800bbba <__mdiff+0x106>
 800bb9a:	6107      	str	r7, [r0, #16]
 800bb9c:	e7a4      	b.n	800bae8 <__mdiff+0x34>
 800bb9e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bba2:	fa11 f288 	uxtah	r2, r1, r8
 800bba6:	1414      	asrs	r4, r2, #16
 800bba8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbac:	b292      	uxth	r2, r2
 800bbae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bbb2:	f84e 2b04 	str.w	r2, [lr], #4
 800bbb6:	1421      	asrs	r1, r4, #16
 800bbb8:	e7e0      	b.n	800bb7c <__mdiff+0xc8>
 800bbba:	3f01      	subs	r7, #1
 800bbbc:	e7ea      	b.n	800bb94 <__mdiff+0xe0>
 800bbbe:	bf00      	nop
 800bbc0:	0800c8e4 	.word	0x0800c8e4
 800bbc4:	0800c8f5 	.word	0x0800c8f5

0800bbc8 <__d2b>:
 800bbc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	460f      	mov	r7, r1
 800bbce:	2101      	movs	r1, #1
 800bbd0:	ec59 8b10 	vmov	r8, r9, d0
 800bbd4:	4616      	mov	r6, r2
 800bbd6:	f7ff fcd5 	bl	800b584 <_Balloc>
 800bbda:	4604      	mov	r4, r0
 800bbdc:	b930      	cbnz	r0, 800bbec <__d2b+0x24>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	4b24      	ldr	r3, [pc, #144]	; (800bc74 <__d2b+0xac>)
 800bbe2:	4825      	ldr	r0, [pc, #148]	; (800bc78 <__d2b+0xb0>)
 800bbe4:	f240 310f 	movw	r1, #783	; 0x30f
 800bbe8:	f000 fa86 	bl	800c0f8 <__assert_func>
 800bbec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbf4:	bb2d      	cbnz	r5, 800bc42 <__d2b+0x7a>
 800bbf6:	9301      	str	r3, [sp, #4]
 800bbf8:	f1b8 0300 	subs.w	r3, r8, #0
 800bbfc:	d026      	beq.n	800bc4c <__d2b+0x84>
 800bbfe:	4668      	mov	r0, sp
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	f7ff fd87 	bl	800b714 <__lo0bits>
 800bc06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc0a:	b1e8      	cbz	r0, 800bc48 <__d2b+0x80>
 800bc0c:	f1c0 0320 	rsb	r3, r0, #32
 800bc10:	fa02 f303 	lsl.w	r3, r2, r3
 800bc14:	430b      	orrs	r3, r1
 800bc16:	40c2      	lsrs	r2, r0
 800bc18:	6163      	str	r3, [r4, #20]
 800bc1a:	9201      	str	r2, [sp, #4]
 800bc1c:	9b01      	ldr	r3, [sp, #4]
 800bc1e:	61a3      	str	r3, [r4, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	bf14      	ite	ne
 800bc24:	2202      	movne	r2, #2
 800bc26:	2201      	moveq	r2, #1
 800bc28:	6122      	str	r2, [r4, #16]
 800bc2a:	b1bd      	cbz	r5, 800bc5c <__d2b+0x94>
 800bc2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc30:	4405      	add	r5, r0
 800bc32:	603d      	str	r5, [r7, #0]
 800bc34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc38:	6030      	str	r0, [r6, #0]
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	b003      	add	sp, #12
 800bc3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc46:	e7d6      	b.n	800bbf6 <__d2b+0x2e>
 800bc48:	6161      	str	r1, [r4, #20]
 800bc4a:	e7e7      	b.n	800bc1c <__d2b+0x54>
 800bc4c:	a801      	add	r0, sp, #4
 800bc4e:	f7ff fd61 	bl	800b714 <__lo0bits>
 800bc52:	9b01      	ldr	r3, [sp, #4]
 800bc54:	6163      	str	r3, [r4, #20]
 800bc56:	3020      	adds	r0, #32
 800bc58:	2201      	movs	r2, #1
 800bc5a:	e7e5      	b.n	800bc28 <__d2b+0x60>
 800bc5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc64:	6038      	str	r0, [r7, #0]
 800bc66:	6918      	ldr	r0, [r3, #16]
 800bc68:	f7ff fd34 	bl	800b6d4 <__hi0bits>
 800bc6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc70:	e7e2      	b.n	800bc38 <__d2b+0x70>
 800bc72:	bf00      	nop
 800bc74:	0800c8e4 	.word	0x0800c8e4
 800bc78:	0800c8f5 	.word	0x0800c8f5

0800bc7c <__ssputs_r>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	688e      	ldr	r6, [r1, #8]
 800bc82:	461f      	mov	r7, r3
 800bc84:	42be      	cmp	r6, r7
 800bc86:	680b      	ldr	r3, [r1, #0]
 800bc88:	4682      	mov	sl, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	4690      	mov	r8, r2
 800bc8e:	d82c      	bhi.n	800bcea <__ssputs_r+0x6e>
 800bc90:	898a      	ldrh	r2, [r1, #12]
 800bc92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc96:	d026      	beq.n	800bce6 <__ssputs_r+0x6a>
 800bc98:	6965      	ldr	r5, [r4, #20]
 800bc9a:	6909      	ldr	r1, [r1, #16]
 800bc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bca0:	eba3 0901 	sub.w	r9, r3, r1
 800bca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bca8:	1c7b      	adds	r3, r7, #1
 800bcaa:	444b      	add	r3, r9
 800bcac:	106d      	asrs	r5, r5, #1
 800bcae:	429d      	cmp	r5, r3
 800bcb0:	bf38      	it	cc
 800bcb2:	461d      	movcc	r5, r3
 800bcb4:	0553      	lsls	r3, r2, #21
 800bcb6:	d527      	bpl.n	800bd08 <__ssputs_r+0x8c>
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7ff fbd7 	bl	800b46c <_malloc_r>
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	b360      	cbz	r0, 800bd1c <__ssputs_r+0xa0>
 800bcc2:	6921      	ldr	r1, [r4, #16]
 800bcc4:	464a      	mov	r2, r9
 800bcc6:	f000 fa09 	bl	800c0dc <memcpy>
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd4:	81a3      	strh	r3, [r4, #12]
 800bcd6:	6126      	str	r6, [r4, #16]
 800bcd8:	6165      	str	r5, [r4, #20]
 800bcda:	444e      	add	r6, r9
 800bcdc:	eba5 0509 	sub.w	r5, r5, r9
 800bce0:	6026      	str	r6, [r4, #0]
 800bce2:	60a5      	str	r5, [r4, #8]
 800bce4:	463e      	mov	r6, r7
 800bce6:	42be      	cmp	r6, r7
 800bce8:	d900      	bls.n	800bcec <__ssputs_r+0x70>
 800bcea:	463e      	mov	r6, r7
 800bcec:	6820      	ldr	r0, [r4, #0]
 800bcee:	4632      	mov	r2, r6
 800bcf0:	4641      	mov	r1, r8
 800bcf2:	f000 f9c9 	bl	800c088 <memmove>
 800bcf6:	68a3      	ldr	r3, [r4, #8]
 800bcf8:	1b9b      	subs	r3, r3, r6
 800bcfa:	60a3      	str	r3, [r4, #8]
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	4433      	add	r3, r6
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	2000      	movs	r0, #0
 800bd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd08:	462a      	mov	r2, r5
 800bd0a:	f000 fa3b 	bl	800c184 <_realloc_r>
 800bd0e:	4606      	mov	r6, r0
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d1e0      	bne.n	800bcd6 <__ssputs_r+0x5a>
 800bd14:	6921      	ldr	r1, [r4, #16]
 800bd16:	4650      	mov	r0, sl
 800bd18:	f7ff fb34 	bl	800b384 <_free_r>
 800bd1c:	230c      	movs	r3, #12
 800bd1e:	f8ca 3000 	str.w	r3, [sl]
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2e:	e7e9      	b.n	800bd04 <__ssputs_r+0x88>

0800bd30 <_svfiprintf_r>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	4698      	mov	r8, r3
 800bd36:	898b      	ldrh	r3, [r1, #12]
 800bd38:	061b      	lsls	r3, r3, #24
 800bd3a:	b09d      	sub	sp, #116	; 0x74
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	460d      	mov	r5, r1
 800bd40:	4614      	mov	r4, r2
 800bd42:	d50e      	bpl.n	800bd62 <_svfiprintf_r+0x32>
 800bd44:	690b      	ldr	r3, [r1, #16]
 800bd46:	b963      	cbnz	r3, 800bd62 <_svfiprintf_r+0x32>
 800bd48:	2140      	movs	r1, #64	; 0x40
 800bd4a:	f7ff fb8f 	bl	800b46c <_malloc_r>
 800bd4e:	6028      	str	r0, [r5, #0]
 800bd50:	6128      	str	r0, [r5, #16]
 800bd52:	b920      	cbnz	r0, 800bd5e <_svfiprintf_r+0x2e>
 800bd54:	230c      	movs	r3, #12
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	e0d0      	b.n	800bf00 <_svfiprintf_r+0x1d0>
 800bd5e:	2340      	movs	r3, #64	; 0x40
 800bd60:	616b      	str	r3, [r5, #20]
 800bd62:	2300      	movs	r3, #0
 800bd64:	9309      	str	r3, [sp, #36]	; 0x24
 800bd66:	2320      	movs	r3, #32
 800bd68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd70:	2330      	movs	r3, #48	; 0x30
 800bd72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf18 <_svfiprintf_r+0x1e8>
 800bd76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd7a:	f04f 0901 	mov.w	r9, #1
 800bd7e:	4623      	mov	r3, r4
 800bd80:	469a      	mov	sl, r3
 800bd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd86:	b10a      	cbz	r2, 800bd8c <_svfiprintf_r+0x5c>
 800bd88:	2a25      	cmp	r2, #37	; 0x25
 800bd8a:	d1f9      	bne.n	800bd80 <_svfiprintf_r+0x50>
 800bd8c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd90:	d00b      	beq.n	800bdaa <_svfiprintf_r+0x7a>
 800bd92:	465b      	mov	r3, fp
 800bd94:	4622      	mov	r2, r4
 800bd96:	4629      	mov	r1, r5
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f7ff ff6f 	bl	800bc7c <__ssputs_r>
 800bd9e:	3001      	adds	r0, #1
 800bda0:	f000 80a9 	beq.w	800bef6 <_svfiprintf_r+0x1c6>
 800bda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda6:	445a      	add	r2, fp
 800bda8:	9209      	str	r2, [sp, #36]	; 0x24
 800bdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f000 80a1 	beq.w	800bef6 <_svfiprintf_r+0x1c6>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdbe:	f10a 0a01 	add.w	sl, sl, #1
 800bdc2:	9304      	str	r3, [sp, #16]
 800bdc4:	9307      	str	r3, [sp, #28]
 800bdc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdca:	931a      	str	r3, [sp, #104]	; 0x68
 800bdcc:	4654      	mov	r4, sl
 800bdce:	2205      	movs	r2, #5
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	4850      	ldr	r0, [pc, #320]	; (800bf18 <_svfiprintf_r+0x1e8>)
 800bdd6:	f7f4 f9fb 	bl	80001d0 <memchr>
 800bdda:	9a04      	ldr	r2, [sp, #16]
 800bddc:	b9d8      	cbnz	r0, 800be16 <_svfiprintf_r+0xe6>
 800bdde:	06d0      	lsls	r0, r2, #27
 800bde0:	bf44      	itt	mi
 800bde2:	2320      	movmi	r3, #32
 800bde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bde8:	0711      	lsls	r1, r2, #28
 800bdea:	bf44      	itt	mi
 800bdec:	232b      	movmi	r3, #43	; 0x2b
 800bdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdf2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf8:	d015      	beq.n	800be26 <_svfiprintf_r+0xf6>
 800bdfa:	9a07      	ldr	r2, [sp, #28]
 800bdfc:	4654      	mov	r4, sl
 800bdfe:	2000      	movs	r0, #0
 800be00:	f04f 0c0a 	mov.w	ip, #10
 800be04:	4621      	mov	r1, r4
 800be06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be0a:	3b30      	subs	r3, #48	; 0x30
 800be0c:	2b09      	cmp	r3, #9
 800be0e:	d94d      	bls.n	800beac <_svfiprintf_r+0x17c>
 800be10:	b1b0      	cbz	r0, 800be40 <_svfiprintf_r+0x110>
 800be12:	9207      	str	r2, [sp, #28]
 800be14:	e014      	b.n	800be40 <_svfiprintf_r+0x110>
 800be16:	eba0 0308 	sub.w	r3, r0, r8
 800be1a:	fa09 f303 	lsl.w	r3, r9, r3
 800be1e:	4313      	orrs	r3, r2
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	46a2      	mov	sl, r4
 800be24:	e7d2      	b.n	800bdcc <_svfiprintf_r+0x9c>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	1d19      	adds	r1, r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	9103      	str	r1, [sp, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	bfbb      	ittet	lt
 800be32:	425b      	neglt	r3, r3
 800be34:	f042 0202 	orrlt.w	r2, r2, #2
 800be38:	9307      	strge	r3, [sp, #28]
 800be3a:	9307      	strlt	r3, [sp, #28]
 800be3c:	bfb8      	it	lt
 800be3e:	9204      	strlt	r2, [sp, #16]
 800be40:	7823      	ldrb	r3, [r4, #0]
 800be42:	2b2e      	cmp	r3, #46	; 0x2e
 800be44:	d10c      	bne.n	800be60 <_svfiprintf_r+0x130>
 800be46:	7863      	ldrb	r3, [r4, #1]
 800be48:	2b2a      	cmp	r3, #42	; 0x2a
 800be4a:	d134      	bne.n	800beb6 <_svfiprintf_r+0x186>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	1d1a      	adds	r2, r3, #4
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	9203      	str	r2, [sp, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	bfb8      	it	lt
 800be58:	f04f 33ff 	movlt.w	r3, #4294967295
 800be5c:	3402      	adds	r4, #2
 800be5e:	9305      	str	r3, [sp, #20]
 800be60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bf28 <_svfiprintf_r+0x1f8>
 800be64:	7821      	ldrb	r1, [r4, #0]
 800be66:	2203      	movs	r2, #3
 800be68:	4650      	mov	r0, sl
 800be6a:	f7f4 f9b1 	bl	80001d0 <memchr>
 800be6e:	b138      	cbz	r0, 800be80 <_svfiprintf_r+0x150>
 800be70:	9b04      	ldr	r3, [sp, #16]
 800be72:	eba0 000a 	sub.w	r0, r0, sl
 800be76:	2240      	movs	r2, #64	; 0x40
 800be78:	4082      	lsls	r2, r0
 800be7a:	4313      	orrs	r3, r2
 800be7c:	3401      	adds	r4, #1
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be84:	4825      	ldr	r0, [pc, #148]	; (800bf1c <_svfiprintf_r+0x1ec>)
 800be86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be8a:	2206      	movs	r2, #6
 800be8c:	f7f4 f9a0 	bl	80001d0 <memchr>
 800be90:	2800      	cmp	r0, #0
 800be92:	d038      	beq.n	800bf06 <_svfiprintf_r+0x1d6>
 800be94:	4b22      	ldr	r3, [pc, #136]	; (800bf20 <_svfiprintf_r+0x1f0>)
 800be96:	bb1b      	cbnz	r3, 800bee0 <_svfiprintf_r+0x1b0>
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	3307      	adds	r3, #7
 800be9c:	f023 0307 	bic.w	r3, r3, #7
 800bea0:	3308      	adds	r3, #8
 800bea2:	9303      	str	r3, [sp, #12]
 800bea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea6:	4433      	add	r3, r6
 800bea8:	9309      	str	r3, [sp, #36]	; 0x24
 800beaa:	e768      	b.n	800bd7e <_svfiprintf_r+0x4e>
 800beac:	fb0c 3202 	mla	r2, ip, r2, r3
 800beb0:	460c      	mov	r4, r1
 800beb2:	2001      	movs	r0, #1
 800beb4:	e7a6      	b.n	800be04 <_svfiprintf_r+0xd4>
 800beb6:	2300      	movs	r3, #0
 800beb8:	3401      	adds	r4, #1
 800beba:	9305      	str	r3, [sp, #20]
 800bebc:	4619      	mov	r1, r3
 800bebe:	f04f 0c0a 	mov.w	ip, #10
 800bec2:	4620      	mov	r0, r4
 800bec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bec8:	3a30      	subs	r2, #48	; 0x30
 800beca:	2a09      	cmp	r2, #9
 800becc:	d903      	bls.n	800bed6 <_svfiprintf_r+0x1a6>
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0c6      	beq.n	800be60 <_svfiprintf_r+0x130>
 800bed2:	9105      	str	r1, [sp, #20]
 800bed4:	e7c4      	b.n	800be60 <_svfiprintf_r+0x130>
 800bed6:	fb0c 2101 	mla	r1, ip, r1, r2
 800beda:	4604      	mov	r4, r0
 800bedc:	2301      	movs	r3, #1
 800bede:	e7f0      	b.n	800bec2 <_svfiprintf_r+0x192>
 800bee0:	ab03      	add	r3, sp, #12
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	462a      	mov	r2, r5
 800bee6:	4b0f      	ldr	r3, [pc, #60]	; (800bf24 <_svfiprintf_r+0x1f4>)
 800bee8:	a904      	add	r1, sp, #16
 800beea:	4638      	mov	r0, r7
 800beec:	f7fd fe62 	bl	8009bb4 <_printf_float>
 800bef0:	1c42      	adds	r2, r0, #1
 800bef2:	4606      	mov	r6, r0
 800bef4:	d1d6      	bne.n	800bea4 <_svfiprintf_r+0x174>
 800bef6:	89ab      	ldrh	r3, [r5, #12]
 800bef8:	065b      	lsls	r3, r3, #25
 800befa:	f53f af2d 	bmi.w	800bd58 <_svfiprintf_r+0x28>
 800befe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf00:	b01d      	add	sp, #116	; 0x74
 800bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	ab03      	add	r3, sp, #12
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	4b05      	ldr	r3, [pc, #20]	; (800bf24 <_svfiprintf_r+0x1f4>)
 800bf0e:	a904      	add	r1, sp, #16
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7fe f8f3 	bl	800a0fc <_printf_i>
 800bf16:	e7eb      	b.n	800bef0 <_svfiprintf_r+0x1c0>
 800bf18:	0800ca4c 	.word	0x0800ca4c
 800bf1c:	0800ca56 	.word	0x0800ca56
 800bf20:	08009bb5 	.word	0x08009bb5
 800bf24:	0800bc7d 	.word	0x0800bc7d
 800bf28:	0800ca52 	.word	0x0800ca52

0800bf2c <__sflush_r>:
 800bf2c:	898a      	ldrh	r2, [r1, #12]
 800bf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf32:	4605      	mov	r5, r0
 800bf34:	0710      	lsls	r0, r2, #28
 800bf36:	460c      	mov	r4, r1
 800bf38:	d458      	bmi.n	800bfec <__sflush_r+0xc0>
 800bf3a:	684b      	ldr	r3, [r1, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dc05      	bgt.n	800bf4c <__sflush_r+0x20>
 800bf40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dc02      	bgt.n	800bf4c <__sflush_r+0x20>
 800bf46:	2000      	movs	r0, #0
 800bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	d0f9      	beq.n	800bf46 <__sflush_r+0x1a>
 800bf52:	2300      	movs	r3, #0
 800bf54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf58:	682f      	ldr	r7, [r5, #0]
 800bf5a:	6a21      	ldr	r1, [r4, #32]
 800bf5c:	602b      	str	r3, [r5, #0]
 800bf5e:	d032      	beq.n	800bfc6 <__sflush_r+0x9a>
 800bf60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	075a      	lsls	r2, r3, #29
 800bf66:	d505      	bpl.n	800bf74 <__sflush_r+0x48>
 800bf68:	6863      	ldr	r3, [r4, #4]
 800bf6a:	1ac0      	subs	r0, r0, r3
 800bf6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf6e:	b10b      	cbz	r3, 800bf74 <__sflush_r+0x48>
 800bf70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf72:	1ac0      	subs	r0, r0, r3
 800bf74:	2300      	movs	r3, #0
 800bf76:	4602      	mov	r2, r0
 800bf78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf7a:	6a21      	ldr	r1, [r4, #32]
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	47b0      	blx	r6
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	d106      	bne.n	800bf94 <__sflush_r+0x68>
 800bf86:	6829      	ldr	r1, [r5, #0]
 800bf88:	291d      	cmp	r1, #29
 800bf8a:	d82b      	bhi.n	800bfe4 <__sflush_r+0xb8>
 800bf8c:	4a29      	ldr	r2, [pc, #164]	; (800c034 <__sflush_r+0x108>)
 800bf8e:	410a      	asrs	r2, r1
 800bf90:	07d6      	lsls	r6, r2, #31
 800bf92:	d427      	bmi.n	800bfe4 <__sflush_r+0xb8>
 800bf94:	2200      	movs	r2, #0
 800bf96:	6062      	str	r2, [r4, #4]
 800bf98:	04d9      	lsls	r1, r3, #19
 800bf9a:	6922      	ldr	r2, [r4, #16]
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	d504      	bpl.n	800bfaa <__sflush_r+0x7e>
 800bfa0:	1c42      	adds	r2, r0, #1
 800bfa2:	d101      	bne.n	800bfa8 <__sflush_r+0x7c>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b903      	cbnz	r3, 800bfaa <__sflush_r+0x7e>
 800bfa8:	6560      	str	r0, [r4, #84]	; 0x54
 800bfaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfac:	602f      	str	r7, [r5, #0]
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	d0c9      	beq.n	800bf46 <__sflush_r+0x1a>
 800bfb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfb6:	4299      	cmp	r1, r3
 800bfb8:	d002      	beq.n	800bfc0 <__sflush_r+0x94>
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f7ff f9e2 	bl	800b384 <_free_r>
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	6360      	str	r0, [r4, #52]	; 0x34
 800bfc4:	e7c0      	b.n	800bf48 <__sflush_r+0x1c>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	4628      	mov	r0, r5
 800bfca:	47b0      	blx	r6
 800bfcc:	1c41      	adds	r1, r0, #1
 800bfce:	d1c8      	bne.n	800bf62 <__sflush_r+0x36>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0c5      	beq.n	800bf62 <__sflush_r+0x36>
 800bfd6:	2b1d      	cmp	r3, #29
 800bfd8:	d001      	beq.n	800bfde <__sflush_r+0xb2>
 800bfda:	2b16      	cmp	r3, #22
 800bfdc:	d101      	bne.n	800bfe2 <__sflush_r+0xb6>
 800bfde:	602f      	str	r7, [r5, #0]
 800bfe0:	e7b1      	b.n	800bf46 <__sflush_r+0x1a>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	e7ad      	b.n	800bf48 <__sflush_r+0x1c>
 800bfec:	690f      	ldr	r7, [r1, #16]
 800bfee:	2f00      	cmp	r7, #0
 800bff0:	d0a9      	beq.n	800bf46 <__sflush_r+0x1a>
 800bff2:	0793      	lsls	r3, r2, #30
 800bff4:	680e      	ldr	r6, [r1, #0]
 800bff6:	bf08      	it	eq
 800bff8:	694b      	ldreq	r3, [r1, #20]
 800bffa:	600f      	str	r7, [r1, #0]
 800bffc:	bf18      	it	ne
 800bffe:	2300      	movne	r3, #0
 800c000:	eba6 0807 	sub.w	r8, r6, r7
 800c004:	608b      	str	r3, [r1, #8]
 800c006:	f1b8 0f00 	cmp.w	r8, #0
 800c00a:	dd9c      	ble.n	800bf46 <__sflush_r+0x1a>
 800c00c:	6a21      	ldr	r1, [r4, #32]
 800c00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c010:	4643      	mov	r3, r8
 800c012:	463a      	mov	r2, r7
 800c014:	4628      	mov	r0, r5
 800c016:	47b0      	blx	r6
 800c018:	2800      	cmp	r0, #0
 800c01a:	dc06      	bgt.n	800c02a <__sflush_r+0xfe>
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	f04f 30ff 	mov.w	r0, #4294967295
 800c028:	e78e      	b.n	800bf48 <__sflush_r+0x1c>
 800c02a:	4407      	add	r7, r0
 800c02c:	eba8 0800 	sub.w	r8, r8, r0
 800c030:	e7e9      	b.n	800c006 <__sflush_r+0xda>
 800c032:	bf00      	nop
 800c034:	dfbffffe 	.word	0xdfbffffe

0800c038 <_fflush_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	690b      	ldr	r3, [r1, #16]
 800c03c:	4605      	mov	r5, r0
 800c03e:	460c      	mov	r4, r1
 800c040:	b913      	cbnz	r3, 800c048 <_fflush_r+0x10>
 800c042:	2500      	movs	r5, #0
 800c044:	4628      	mov	r0, r5
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	b118      	cbz	r0, 800c052 <_fflush_r+0x1a>
 800c04a:	6a03      	ldr	r3, [r0, #32]
 800c04c:	b90b      	cbnz	r3, 800c052 <_fflush_r+0x1a>
 800c04e:	f7fe fa03 	bl	800a458 <__sinit>
 800c052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0f3      	beq.n	800c042 <_fflush_r+0xa>
 800c05a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c05c:	07d0      	lsls	r0, r2, #31
 800c05e:	d404      	bmi.n	800c06a <_fflush_r+0x32>
 800c060:	0599      	lsls	r1, r3, #22
 800c062:	d402      	bmi.n	800c06a <_fflush_r+0x32>
 800c064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c066:	f7fe fb0e 	bl	800a686 <__retarget_lock_acquire_recursive>
 800c06a:	4628      	mov	r0, r5
 800c06c:	4621      	mov	r1, r4
 800c06e:	f7ff ff5d 	bl	800bf2c <__sflush_r>
 800c072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c074:	07da      	lsls	r2, r3, #31
 800c076:	4605      	mov	r5, r0
 800c078:	d4e4      	bmi.n	800c044 <_fflush_r+0xc>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	059b      	lsls	r3, r3, #22
 800c07e:	d4e1      	bmi.n	800c044 <_fflush_r+0xc>
 800c080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c082:	f7fe fb01 	bl	800a688 <__retarget_lock_release_recursive>
 800c086:	e7dd      	b.n	800c044 <_fflush_r+0xc>

0800c088 <memmove>:
 800c088:	4288      	cmp	r0, r1
 800c08a:	b510      	push	{r4, lr}
 800c08c:	eb01 0402 	add.w	r4, r1, r2
 800c090:	d902      	bls.n	800c098 <memmove+0x10>
 800c092:	4284      	cmp	r4, r0
 800c094:	4623      	mov	r3, r4
 800c096:	d807      	bhi.n	800c0a8 <memmove+0x20>
 800c098:	1e43      	subs	r3, r0, #1
 800c09a:	42a1      	cmp	r1, r4
 800c09c:	d008      	beq.n	800c0b0 <memmove+0x28>
 800c09e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0a6:	e7f8      	b.n	800c09a <memmove+0x12>
 800c0a8:	4402      	add	r2, r0
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	428a      	cmp	r2, r1
 800c0ae:	d100      	bne.n	800c0b2 <memmove+0x2a>
 800c0b0:	bd10      	pop	{r4, pc}
 800c0b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0ba:	e7f7      	b.n	800c0ac <memmove+0x24>

0800c0bc <_sbrk_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d06      	ldr	r5, [pc, #24]	; (800c0d8 <_sbrk_r+0x1c>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	602b      	str	r3, [r5, #0]
 800c0c8:	f7f5 f9d2 	bl	8001470 <_sbrk>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	d102      	bne.n	800c0d6 <_sbrk_r+0x1a>
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	b103      	cbz	r3, 800c0d6 <_sbrk_r+0x1a>
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	bd38      	pop	{r3, r4, r5, pc}
 800c0d8:	20001718 	.word	0x20001718

0800c0dc <memcpy>:
 800c0dc:	440a      	add	r2, r1
 800c0de:	4291      	cmp	r1, r2
 800c0e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0e4:	d100      	bne.n	800c0e8 <memcpy+0xc>
 800c0e6:	4770      	bx	lr
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0f2:	4291      	cmp	r1, r2
 800c0f4:	d1f9      	bne.n	800c0ea <memcpy+0xe>
 800c0f6:	bd10      	pop	{r4, pc}

0800c0f8 <__assert_func>:
 800c0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0fa:	4614      	mov	r4, r2
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	4b09      	ldr	r3, [pc, #36]	; (800c124 <__assert_func+0x2c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4605      	mov	r5, r0
 800c104:	68d8      	ldr	r0, [r3, #12]
 800c106:	b14c      	cbz	r4, 800c11c <__assert_func+0x24>
 800c108:	4b07      	ldr	r3, [pc, #28]	; (800c128 <__assert_func+0x30>)
 800c10a:	9100      	str	r1, [sp, #0]
 800c10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c110:	4906      	ldr	r1, [pc, #24]	; (800c12c <__assert_func+0x34>)
 800c112:	462b      	mov	r3, r5
 800c114:	f000 f872 	bl	800c1fc <fiprintf>
 800c118:	f000 f882 	bl	800c220 <abort>
 800c11c:	4b04      	ldr	r3, [pc, #16]	; (800c130 <__assert_func+0x38>)
 800c11e:	461c      	mov	r4, r3
 800c120:	e7f3      	b.n	800c10a <__assert_func+0x12>
 800c122:	bf00      	nop
 800c124:	200001d4 	.word	0x200001d4
 800c128:	0800ca67 	.word	0x0800ca67
 800c12c:	0800ca74 	.word	0x0800ca74
 800c130:	0800caa2 	.word	0x0800caa2

0800c134 <_calloc_r>:
 800c134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c136:	fba1 2402 	umull	r2, r4, r1, r2
 800c13a:	b94c      	cbnz	r4, 800c150 <_calloc_r+0x1c>
 800c13c:	4611      	mov	r1, r2
 800c13e:	9201      	str	r2, [sp, #4]
 800c140:	f7ff f994 	bl	800b46c <_malloc_r>
 800c144:	9a01      	ldr	r2, [sp, #4]
 800c146:	4605      	mov	r5, r0
 800c148:	b930      	cbnz	r0, 800c158 <_calloc_r+0x24>
 800c14a:	4628      	mov	r0, r5
 800c14c:	b003      	add	sp, #12
 800c14e:	bd30      	pop	{r4, r5, pc}
 800c150:	220c      	movs	r2, #12
 800c152:	6002      	str	r2, [r0, #0]
 800c154:	2500      	movs	r5, #0
 800c156:	e7f8      	b.n	800c14a <_calloc_r+0x16>
 800c158:	4621      	mov	r1, r4
 800c15a:	f7fe fa16 	bl	800a58a <memset>
 800c15e:	e7f4      	b.n	800c14a <_calloc_r+0x16>

0800c160 <__ascii_mbtowc>:
 800c160:	b082      	sub	sp, #8
 800c162:	b901      	cbnz	r1, 800c166 <__ascii_mbtowc+0x6>
 800c164:	a901      	add	r1, sp, #4
 800c166:	b142      	cbz	r2, 800c17a <__ascii_mbtowc+0x1a>
 800c168:	b14b      	cbz	r3, 800c17e <__ascii_mbtowc+0x1e>
 800c16a:	7813      	ldrb	r3, [r2, #0]
 800c16c:	600b      	str	r3, [r1, #0]
 800c16e:	7812      	ldrb	r2, [r2, #0]
 800c170:	1e10      	subs	r0, r2, #0
 800c172:	bf18      	it	ne
 800c174:	2001      	movne	r0, #1
 800c176:	b002      	add	sp, #8
 800c178:	4770      	bx	lr
 800c17a:	4610      	mov	r0, r2
 800c17c:	e7fb      	b.n	800c176 <__ascii_mbtowc+0x16>
 800c17e:	f06f 0001 	mvn.w	r0, #1
 800c182:	e7f8      	b.n	800c176 <__ascii_mbtowc+0x16>

0800c184 <_realloc_r>:
 800c184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c188:	4680      	mov	r8, r0
 800c18a:	4614      	mov	r4, r2
 800c18c:	460e      	mov	r6, r1
 800c18e:	b921      	cbnz	r1, 800c19a <_realloc_r+0x16>
 800c190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c194:	4611      	mov	r1, r2
 800c196:	f7ff b969 	b.w	800b46c <_malloc_r>
 800c19a:	b92a      	cbnz	r2, 800c1a8 <_realloc_r+0x24>
 800c19c:	f7ff f8f2 	bl	800b384 <_free_r>
 800c1a0:	4625      	mov	r5, r4
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	f000 f841 	bl	800c22e <_malloc_usable_size_r>
 800c1ac:	4284      	cmp	r4, r0
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	d802      	bhi.n	800c1b8 <_realloc_r+0x34>
 800c1b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1b6:	d812      	bhi.n	800c1de <_realloc_r+0x5a>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	f7ff f956 	bl	800b46c <_malloc_r>
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d0ed      	beq.n	800c1a2 <_realloc_r+0x1e>
 800c1c6:	42bc      	cmp	r4, r7
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	bf28      	it	cs
 800c1ce:	463a      	movcs	r2, r7
 800c1d0:	f7ff ff84 	bl	800c0dc <memcpy>
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	f7ff f8d4 	bl	800b384 <_free_r>
 800c1dc:	e7e1      	b.n	800c1a2 <_realloc_r+0x1e>
 800c1de:	4635      	mov	r5, r6
 800c1e0:	e7df      	b.n	800c1a2 <_realloc_r+0x1e>

0800c1e2 <__ascii_wctomb>:
 800c1e2:	b149      	cbz	r1, 800c1f8 <__ascii_wctomb+0x16>
 800c1e4:	2aff      	cmp	r2, #255	; 0xff
 800c1e6:	bf85      	ittet	hi
 800c1e8:	238a      	movhi	r3, #138	; 0x8a
 800c1ea:	6003      	strhi	r3, [r0, #0]
 800c1ec:	700a      	strbls	r2, [r1, #0]
 800c1ee:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1f2:	bf98      	it	ls
 800c1f4:	2001      	movls	r0, #1
 800c1f6:	4770      	bx	lr
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	4770      	bx	lr

0800c1fc <fiprintf>:
 800c1fc:	b40e      	push	{r1, r2, r3}
 800c1fe:	b503      	push	{r0, r1, lr}
 800c200:	4601      	mov	r1, r0
 800c202:	ab03      	add	r3, sp, #12
 800c204:	4805      	ldr	r0, [pc, #20]	; (800c21c <fiprintf+0x20>)
 800c206:	f853 2b04 	ldr.w	r2, [r3], #4
 800c20a:	6800      	ldr	r0, [r0, #0]
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	f000 f83f 	bl	800c290 <_vfiprintf_r>
 800c212:	b002      	add	sp, #8
 800c214:	f85d eb04 	ldr.w	lr, [sp], #4
 800c218:	b003      	add	sp, #12
 800c21a:	4770      	bx	lr
 800c21c:	200001d4 	.word	0x200001d4

0800c220 <abort>:
 800c220:	b508      	push	{r3, lr}
 800c222:	2006      	movs	r0, #6
 800c224:	f000 fa0c 	bl	800c640 <raise>
 800c228:	2001      	movs	r0, #1
 800c22a:	f7f5 f8a9 	bl	8001380 <_exit>

0800c22e <_malloc_usable_size_r>:
 800c22e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c232:	1f18      	subs	r0, r3, #4
 800c234:	2b00      	cmp	r3, #0
 800c236:	bfbc      	itt	lt
 800c238:	580b      	ldrlt	r3, [r1, r0]
 800c23a:	18c0      	addlt	r0, r0, r3
 800c23c:	4770      	bx	lr

0800c23e <__sfputc_r>:
 800c23e:	6893      	ldr	r3, [r2, #8]
 800c240:	3b01      	subs	r3, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	b410      	push	{r4}
 800c246:	6093      	str	r3, [r2, #8]
 800c248:	da08      	bge.n	800c25c <__sfputc_r+0x1e>
 800c24a:	6994      	ldr	r4, [r2, #24]
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	db01      	blt.n	800c254 <__sfputc_r+0x16>
 800c250:	290a      	cmp	r1, #10
 800c252:	d103      	bne.n	800c25c <__sfputc_r+0x1e>
 800c254:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c258:	f000 b934 	b.w	800c4c4 <__swbuf_r>
 800c25c:	6813      	ldr	r3, [r2, #0]
 800c25e:	1c58      	adds	r0, r3, #1
 800c260:	6010      	str	r0, [r2, #0]
 800c262:	7019      	strb	r1, [r3, #0]
 800c264:	4608      	mov	r0, r1
 800c266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <__sfputs_r>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	4606      	mov	r6, r0
 800c270:	460f      	mov	r7, r1
 800c272:	4614      	mov	r4, r2
 800c274:	18d5      	adds	r5, r2, r3
 800c276:	42ac      	cmp	r4, r5
 800c278:	d101      	bne.n	800c27e <__sfputs_r+0x12>
 800c27a:	2000      	movs	r0, #0
 800c27c:	e007      	b.n	800c28e <__sfputs_r+0x22>
 800c27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c282:	463a      	mov	r2, r7
 800c284:	4630      	mov	r0, r6
 800c286:	f7ff ffda 	bl	800c23e <__sfputc_r>
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	d1f3      	bne.n	800c276 <__sfputs_r+0xa>
 800c28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c290 <_vfiprintf_r>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	460d      	mov	r5, r1
 800c296:	b09d      	sub	sp, #116	; 0x74
 800c298:	4614      	mov	r4, r2
 800c29a:	4698      	mov	r8, r3
 800c29c:	4606      	mov	r6, r0
 800c29e:	b118      	cbz	r0, 800c2a8 <_vfiprintf_r+0x18>
 800c2a0:	6a03      	ldr	r3, [r0, #32]
 800c2a2:	b90b      	cbnz	r3, 800c2a8 <_vfiprintf_r+0x18>
 800c2a4:	f7fe f8d8 	bl	800a458 <__sinit>
 800c2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2aa:	07d9      	lsls	r1, r3, #31
 800c2ac:	d405      	bmi.n	800c2ba <_vfiprintf_r+0x2a>
 800c2ae:	89ab      	ldrh	r3, [r5, #12]
 800c2b0:	059a      	lsls	r2, r3, #22
 800c2b2:	d402      	bmi.n	800c2ba <_vfiprintf_r+0x2a>
 800c2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2b6:	f7fe f9e6 	bl	800a686 <__retarget_lock_acquire_recursive>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	071b      	lsls	r3, r3, #28
 800c2be:	d501      	bpl.n	800c2c4 <_vfiprintf_r+0x34>
 800c2c0:	692b      	ldr	r3, [r5, #16]
 800c2c2:	b99b      	cbnz	r3, 800c2ec <_vfiprintf_r+0x5c>
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f000 f93a 	bl	800c540 <__swsetup_r>
 800c2cc:	b170      	cbz	r0, 800c2ec <_vfiprintf_r+0x5c>
 800c2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2d0:	07dc      	lsls	r4, r3, #31
 800c2d2:	d504      	bpl.n	800c2de <_vfiprintf_r+0x4e>
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	b01d      	add	sp, #116	; 0x74
 800c2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2de:	89ab      	ldrh	r3, [r5, #12]
 800c2e0:	0598      	lsls	r0, r3, #22
 800c2e2:	d4f7      	bmi.n	800c2d4 <_vfiprintf_r+0x44>
 800c2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2e6:	f7fe f9cf 	bl	800a688 <__retarget_lock_release_recursive>
 800c2ea:	e7f3      	b.n	800c2d4 <_vfiprintf_r+0x44>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c2f0:	2320      	movs	r3, #32
 800c2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2fa:	2330      	movs	r3, #48	; 0x30
 800c2fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c4b0 <_vfiprintf_r+0x220>
 800c300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c304:	f04f 0901 	mov.w	r9, #1
 800c308:	4623      	mov	r3, r4
 800c30a:	469a      	mov	sl, r3
 800c30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c310:	b10a      	cbz	r2, 800c316 <_vfiprintf_r+0x86>
 800c312:	2a25      	cmp	r2, #37	; 0x25
 800c314:	d1f9      	bne.n	800c30a <_vfiprintf_r+0x7a>
 800c316:	ebba 0b04 	subs.w	fp, sl, r4
 800c31a:	d00b      	beq.n	800c334 <_vfiprintf_r+0xa4>
 800c31c:	465b      	mov	r3, fp
 800c31e:	4622      	mov	r2, r4
 800c320:	4629      	mov	r1, r5
 800c322:	4630      	mov	r0, r6
 800c324:	f7ff ffa2 	bl	800c26c <__sfputs_r>
 800c328:	3001      	adds	r0, #1
 800c32a:	f000 80a9 	beq.w	800c480 <_vfiprintf_r+0x1f0>
 800c32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c330:	445a      	add	r2, fp
 800c332:	9209      	str	r2, [sp, #36]	; 0x24
 800c334:	f89a 3000 	ldrb.w	r3, [sl]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f000 80a1 	beq.w	800c480 <_vfiprintf_r+0x1f0>
 800c33e:	2300      	movs	r3, #0
 800c340:	f04f 32ff 	mov.w	r2, #4294967295
 800c344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c348:	f10a 0a01 	add.w	sl, sl, #1
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	9307      	str	r3, [sp, #28]
 800c350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c354:	931a      	str	r3, [sp, #104]	; 0x68
 800c356:	4654      	mov	r4, sl
 800c358:	2205      	movs	r2, #5
 800c35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35e:	4854      	ldr	r0, [pc, #336]	; (800c4b0 <_vfiprintf_r+0x220>)
 800c360:	f7f3 ff36 	bl	80001d0 <memchr>
 800c364:	9a04      	ldr	r2, [sp, #16]
 800c366:	b9d8      	cbnz	r0, 800c3a0 <_vfiprintf_r+0x110>
 800c368:	06d1      	lsls	r1, r2, #27
 800c36a:	bf44      	itt	mi
 800c36c:	2320      	movmi	r3, #32
 800c36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c372:	0713      	lsls	r3, r2, #28
 800c374:	bf44      	itt	mi
 800c376:	232b      	movmi	r3, #43	; 0x2b
 800c378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c37c:	f89a 3000 	ldrb.w	r3, [sl]
 800c380:	2b2a      	cmp	r3, #42	; 0x2a
 800c382:	d015      	beq.n	800c3b0 <_vfiprintf_r+0x120>
 800c384:	9a07      	ldr	r2, [sp, #28]
 800c386:	4654      	mov	r4, sl
 800c388:	2000      	movs	r0, #0
 800c38a:	f04f 0c0a 	mov.w	ip, #10
 800c38e:	4621      	mov	r1, r4
 800c390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c394:	3b30      	subs	r3, #48	; 0x30
 800c396:	2b09      	cmp	r3, #9
 800c398:	d94d      	bls.n	800c436 <_vfiprintf_r+0x1a6>
 800c39a:	b1b0      	cbz	r0, 800c3ca <_vfiprintf_r+0x13a>
 800c39c:	9207      	str	r2, [sp, #28]
 800c39e:	e014      	b.n	800c3ca <_vfiprintf_r+0x13a>
 800c3a0:	eba0 0308 	sub.w	r3, r0, r8
 800c3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	9304      	str	r3, [sp, #16]
 800c3ac:	46a2      	mov	sl, r4
 800c3ae:	e7d2      	b.n	800c356 <_vfiprintf_r+0xc6>
 800c3b0:	9b03      	ldr	r3, [sp, #12]
 800c3b2:	1d19      	adds	r1, r3, #4
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	9103      	str	r1, [sp, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	bfbb      	ittet	lt
 800c3bc:	425b      	neglt	r3, r3
 800c3be:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c2:	9307      	strge	r3, [sp, #28]
 800c3c4:	9307      	strlt	r3, [sp, #28]
 800c3c6:	bfb8      	it	lt
 800c3c8:	9204      	strlt	r2, [sp, #16]
 800c3ca:	7823      	ldrb	r3, [r4, #0]
 800c3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ce:	d10c      	bne.n	800c3ea <_vfiprintf_r+0x15a>
 800c3d0:	7863      	ldrb	r3, [r4, #1]
 800c3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d4:	d134      	bne.n	800c440 <_vfiprintf_r+0x1b0>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	1d1a      	adds	r2, r3, #4
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	9203      	str	r2, [sp, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	bfb8      	it	lt
 800c3e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3e6:	3402      	adds	r4, #2
 800c3e8:	9305      	str	r3, [sp, #20]
 800c3ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c4c0 <_vfiprintf_r+0x230>
 800c3ee:	7821      	ldrb	r1, [r4, #0]
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	4650      	mov	r0, sl
 800c3f4:	f7f3 feec 	bl	80001d0 <memchr>
 800c3f8:	b138      	cbz	r0, 800c40a <_vfiprintf_r+0x17a>
 800c3fa:	9b04      	ldr	r3, [sp, #16]
 800c3fc:	eba0 000a 	sub.w	r0, r0, sl
 800c400:	2240      	movs	r2, #64	; 0x40
 800c402:	4082      	lsls	r2, r0
 800c404:	4313      	orrs	r3, r2
 800c406:	3401      	adds	r4, #1
 800c408:	9304      	str	r3, [sp, #16]
 800c40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40e:	4829      	ldr	r0, [pc, #164]	; (800c4b4 <_vfiprintf_r+0x224>)
 800c410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c414:	2206      	movs	r2, #6
 800c416:	f7f3 fedb 	bl	80001d0 <memchr>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d03f      	beq.n	800c49e <_vfiprintf_r+0x20e>
 800c41e:	4b26      	ldr	r3, [pc, #152]	; (800c4b8 <_vfiprintf_r+0x228>)
 800c420:	bb1b      	cbnz	r3, 800c46a <_vfiprintf_r+0x1da>
 800c422:	9b03      	ldr	r3, [sp, #12]
 800c424:	3307      	adds	r3, #7
 800c426:	f023 0307 	bic.w	r3, r3, #7
 800c42a:	3308      	adds	r3, #8
 800c42c:	9303      	str	r3, [sp, #12]
 800c42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c430:	443b      	add	r3, r7
 800c432:	9309      	str	r3, [sp, #36]	; 0x24
 800c434:	e768      	b.n	800c308 <_vfiprintf_r+0x78>
 800c436:	fb0c 3202 	mla	r2, ip, r2, r3
 800c43a:	460c      	mov	r4, r1
 800c43c:	2001      	movs	r0, #1
 800c43e:	e7a6      	b.n	800c38e <_vfiprintf_r+0xfe>
 800c440:	2300      	movs	r3, #0
 800c442:	3401      	adds	r4, #1
 800c444:	9305      	str	r3, [sp, #20]
 800c446:	4619      	mov	r1, r3
 800c448:	f04f 0c0a 	mov.w	ip, #10
 800c44c:	4620      	mov	r0, r4
 800c44e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c452:	3a30      	subs	r2, #48	; 0x30
 800c454:	2a09      	cmp	r2, #9
 800c456:	d903      	bls.n	800c460 <_vfiprintf_r+0x1d0>
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d0c6      	beq.n	800c3ea <_vfiprintf_r+0x15a>
 800c45c:	9105      	str	r1, [sp, #20]
 800c45e:	e7c4      	b.n	800c3ea <_vfiprintf_r+0x15a>
 800c460:	fb0c 2101 	mla	r1, ip, r1, r2
 800c464:	4604      	mov	r4, r0
 800c466:	2301      	movs	r3, #1
 800c468:	e7f0      	b.n	800c44c <_vfiprintf_r+0x1bc>
 800c46a:	ab03      	add	r3, sp, #12
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	462a      	mov	r2, r5
 800c470:	4b12      	ldr	r3, [pc, #72]	; (800c4bc <_vfiprintf_r+0x22c>)
 800c472:	a904      	add	r1, sp, #16
 800c474:	4630      	mov	r0, r6
 800c476:	f7fd fb9d 	bl	8009bb4 <_printf_float>
 800c47a:	4607      	mov	r7, r0
 800c47c:	1c78      	adds	r0, r7, #1
 800c47e:	d1d6      	bne.n	800c42e <_vfiprintf_r+0x19e>
 800c480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c482:	07d9      	lsls	r1, r3, #31
 800c484:	d405      	bmi.n	800c492 <_vfiprintf_r+0x202>
 800c486:	89ab      	ldrh	r3, [r5, #12]
 800c488:	059a      	lsls	r2, r3, #22
 800c48a:	d402      	bmi.n	800c492 <_vfiprintf_r+0x202>
 800c48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c48e:	f7fe f8fb 	bl	800a688 <__retarget_lock_release_recursive>
 800c492:	89ab      	ldrh	r3, [r5, #12]
 800c494:	065b      	lsls	r3, r3, #25
 800c496:	f53f af1d 	bmi.w	800c2d4 <_vfiprintf_r+0x44>
 800c49a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c49c:	e71c      	b.n	800c2d8 <_vfiprintf_r+0x48>
 800c49e:	ab03      	add	r3, sp, #12
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	462a      	mov	r2, r5
 800c4a4:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <_vfiprintf_r+0x22c>)
 800c4a6:	a904      	add	r1, sp, #16
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f7fd fe27 	bl	800a0fc <_printf_i>
 800c4ae:	e7e4      	b.n	800c47a <_vfiprintf_r+0x1ea>
 800c4b0:	0800ca4c 	.word	0x0800ca4c
 800c4b4:	0800ca56 	.word	0x0800ca56
 800c4b8:	08009bb5 	.word	0x08009bb5
 800c4bc:	0800c26d 	.word	0x0800c26d
 800c4c0:	0800ca52 	.word	0x0800ca52

0800c4c4 <__swbuf_r>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	460e      	mov	r6, r1
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	b118      	cbz	r0, 800c4d6 <__swbuf_r+0x12>
 800c4ce:	6a03      	ldr	r3, [r0, #32]
 800c4d0:	b90b      	cbnz	r3, 800c4d6 <__swbuf_r+0x12>
 800c4d2:	f7fd ffc1 	bl	800a458 <__sinit>
 800c4d6:	69a3      	ldr	r3, [r4, #24]
 800c4d8:	60a3      	str	r3, [r4, #8]
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	071a      	lsls	r2, r3, #28
 800c4de:	d525      	bpl.n	800c52c <__swbuf_r+0x68>
 800c4e0:	6923      	ldr	r3, [r4, #16]
 800c4e2:	b31b      	cbz	r3, 800c52c <__swbuf_r+0x68>
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	6922      	ldr	r2, [r4, #16]
 800c4e8:	1a98      	subs	r0, r3, r2
 800c4ea:	6963      	ldr	r3, [r4, #20]
 800c4ec:	b2f6      	uxtb	r6, r6
 800c4ee:	4283      	cmp	r3, r0
 800c4f0:	4637      	mov	r7, r6
 800c4f2:	dc04      	bgt.n	800c4fe <__swbuf_r+0x3a>
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f7ff fd9e 	bl	800c038 <_fflush_r>
 800c4fc:	b9e0      	cbnz	r0, 800c538 <__swbuf_r+0x74>
 800c4fe:	68a3      	ldr	r3, [r4, #8]
 800c500:	3b01      	subs	r3, #1
 800c502:	60a3      	str	r3, [r4, #8]
 800c504:	6823      	ldr	r3, [r4, #0]
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	6022      	str	r2, [r4, #0]
 800c50a:	701e      	strb	r6, [r3, #0]
 800c50c:	6962      	ldr	r2, [r4, #20]
 800c50e:	1c43      	adds	r3, r0, #1
 800c510:	429a      	cmp	r2, r3
 800c512:	d004      	beq.n	800c51e <__swbuf_r+0x5a>
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	07db      	lsls	r3, r3, #31
 800c518:	d506      	bpl.n	800c528 <__swbuf_r+0x64>
 800c51a:	2e0a      	cmp	r6, #10
 800c51c:	d104      	bne.n	800c528 <__swbuf_r+0x64>
 800c51e:	4621      	mov	r1, r4
 800c520:	4628      	mov	r0, r5
 800c522:	f7ff fd89 	bl	800c038 <_fflush_r>
 800c526:	b938      	cbnz	r0, 800c538 <__swbuf_r+0x74>
 800c528:	4638      	mov	r0, r7
 800c52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c52c:	4621      	mov	r1, r4
 800c52e:	4628      	mov	r0, r5
 800c530:	f000 f806 	bl	800c540 <__swsetup_r>
 800c534:	2800      	cmp	r0, #0
 800c536:	d0d5      	beq.n	800c4e4 <__swbuf_r+0x20>
 800c538:	f04f 37ff 	mov.w	r7, #4294967295
 800c53c:	e7f4      	b.n	800c528 <__swbuf_r+0x64>
	...

0800c540 <__swsetup_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4b2a      	ldr	r3, [pc, #168]	; (800c5ec <__swsetup_r+0xac>)
 800c544:	4605      	mov	r5, r0
 800c546:	6818      	ldr	r0, [r3, #0]
 800c548:	460c      	mov	r4, r1
 800c54a:	b118      	cbz	r0, 800c554 <__swsetup_r+0x14>
 800c54c:	6a03      	ldr	r3, [r0, #32]
 800c54e:	b90b      	cbnz	r3, 800c554 <__swsetup_r+0x14>
 800c550:	f7fd ff82 	bl	800a458 <__sinit>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c55a:	0718      	lsls	r0, r3, #28
 800c55c:	d422      	bmi.n	800c5a4 <__swsetup_r+0x64>
 800c55e:	06d9      	lsls	r1, r3, #27
 800c560:	d407      	bmi.n	800c572 <__swsetup_r+0x32>
 800c562:	2309      	movs	r3, #9
 800c564:	602b      	str	r3, [r5, #0]
 800c566:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c56a:	81a3      	strh	r3, [r4, #12]
 800c56c:	f04f 30ff 	mov.w	r0, #4294967295
 800c570:	e034      	b.n	800c5dc <__swsetup_r+0x9c>
 800c572:	0758      	lsls	r0, r3, #29
 800c574:	d512      	bpl.n	800c59c <__swsetup_r+0x5c>
 800c576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c578:	b141      	cbz	r1, 800c58c <__swsetup_r+0x4c>
 800c57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c57e:	4299      	cmp	r1, r3
 800c580:	d002      	beq.n	800c588 <__swsetup_r+0x48>
 800c582:	4628      	mov	r0, r5
 800c584:	f7fe fefe 	bl	800b384 <_free_r>
 800c588:	2300      	movs	r3, #0
 800c58a:	6363      	str	r3, [r4, #52]	; 0x34
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c592:	81a3      	strh	r3, [r4, #12]
 800c594:	2300      	movs	r3, #0
 800c596:	6063      	str	r3, [r4, #4]
 800c598:	6923      	ldr	r3, [r4, #16]
 800c59a:	6023      	str	r3, [r4, #0]
 800c59c:	89a3      	ldrh	r3, [r4, #12]
 800c59e:	f043 0308 	orr.w	r3, r3, #8
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	6923      	ldr	r3, [r4, #16]
 800c5a6:	b94b      	cbnz	r3, 800c5bc <__swsetup_r+0x7c>
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5b2:	d003      	beq.n	800c5bc <__swsetup_r+0x7c>
 800c5b4:	4621      	mov	r1, r4
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f000 f884 	bl	800c6c4 <__smakebuf_r>
 800c5bc:	89a0      	ldrh	r0, [r4, #12]
 800c5be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5c2:	f010 0301 	ands.w	r3, r0, #1
 800c5c6:	d00a      	beq.n	800c5de <__swsetup_r+0x9e>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	60a3      	str	r3, [r4, #8]
 800c5cc:	6963      	ldr	r3, [r4, #20]
 800c5ce:	425b      	negs	r3, r3
 800c5d0:	61a3      	str	r3, [r4, #24]
 800c5d2:	6923      	ldr	r3, [r4, #16]
 800c5d4:	b943      	cbnz	r3, 800c5e8 <__swsetup_r+0xa8>
 800c5d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5da:	d1c4      	bne.n	800c566 <__swsetup_r+0x26>
 800c5dc:	bd38      	pop	{r3, r4, r5, pc}
 800c5de:	0781      	lsls	r1, r0, #30
 800c5e0:	bf58      	it	pl
 800c5e2:	6963      	ldrpl	r3, [r4, #20]
 800c5e4:	60a3      	str	r3, [r4, #8]
 800c5e6:	e7f4      	b.n	800c5d2 <__swsetup_r+0x92>
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	e7f7      	b.n	800c5dc <__swsetup_r+0x9c>
 800c5ec:	200001d4 	.word	0x200001d4

0800c5f0 <_raise_r>:
 800c5f0:	291f      	cmp	r1, #31
 800c5f2:	b538      	push	{r3, r4, r5, lr}
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	460d      	mov	r5, r1
 800c5f8:	d904      	bls.n	800c604 <_raise_r+0x14>
 800c5fa:	2316      	movs	r3, #22
 800c5fc:	6003      	str	r3, [r0, #0]
 800c5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c606:	b112      	cbz	r2, 800c60e <_raise_r+0x1e>
 800c608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c60c:	b94b      	cbnz	r3, 800c622 <_raise_r+0x32>
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 f830 	bl	800c674 <_getpid_r>
 800c614:	462a      	mov	r2, r5
 800c616:	4601      	mov	r1, r0
 800c618:	4620      	mov	r0, r4
 800c61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c61e:	f000 b817 	b.w	800c650 <_kill_r>
 800c622:	2b01      	cmp	r3, #1
 800c624:	d00a      	beq.n	800c63c <_raise_r+0x4c>
 800c626:	1c59      	adds	r1, r3, #1
 800c628:	d103      	bne.n	800c632 <_raise_r+0x42>
 800c62a:	2316      	movs	r3, #22
 800c62c:	6003      	str	r3, [r0, #0]
 800c62e:	2001      	movs	r0, #1
 800c630:	e7e7      	b.n	800c602 <_raise_r+0x12>
 800c632:	2400      	movs	r4, #0
 800c634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c638:	4628      	mov	r0, r5
 800c63a:	4798      	blx	r3
 800c63c:	2000      	movs	r0, #0
 800c63e:	e7e0      	b.n	800c602 <_raise_r+0x12>

0800c640 <raise>:
 800c640:	4b02      	ldr	r3, [pc, #8]	; (800c64c <raise+0xc>)
 800c642:	4601      	mov	r1, r0
 800c644:	6818      	ldr	r0, [r3, #0]
 800c646:	f7ff bfd3 	b.w	800c5f0 <_raise_r>
 800c64a:	bf00      	nop
 800c64c:	200001d4 	.word	0x200001d4

0800c650 <_kill_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4d07      	ldr	r5, [pc, #28]	; (800c670 <_kill_r+0x20>)
 800c654:	2300      	movs	r3, #0
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	4611      	mov	r1, r2
 800c65c:	602b      	str	r3, [r5, #0]
 800c65e:	f7f4 fe7f 	bl	8001360 <_kill>
 800c662:	1c43      	adds	r3, r0, #1
 800c664:	d102      	bne.n	800c66c <_kill_r+0x1c>
 800c666:	682b      	ldr	r3, [r5, #0]
 800c668:	b103      	cbz	r3, 800c66c <_kill_r+0x1c>
 800c66a:	6023      	str	r3, [r4, #0]
 800c66c:	bd38      	pop	{r3, r4, r5, pc}
 800c66e:	bf00      	nop
 800c670:	20001718 	.word	0x20001718

0800c674 <_getpid_r>:
 800c674:	f7f4 be6c 	b.w	8001350 <_getpid>

0800c678 <__swhatbuf_r>:
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	460c      	mov	r4, r1
 800c67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c680:	2900      	cmp	r1, #0
 800c682:	b096      	sub	sp, #88	; 0x58
 800c684:	4615      	mov	r5, r2
 800c686:	461e      	mov	r6, r3
 800c688:	da0d      	bge.n	800c6a6 <__swhatbuf_r+0x2e>
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c690:	f04f 0100 	mov.w	r1, #0
 800c694:	bf0c      	ite	eq
 800c696:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c69a:	2340      	movne	r3, #64	; 0x40
 800c69c:	2000      	movs	r0, #0
 800c69e:	6031      	str	r1, [r6, #0]
 800c6a0:	602b      	str	r3, [r5, #0]
 800c6a2:	b016      	add	sp, #88	; 0x58
 800c6a4:	bd70      	pop	{r4, r5, r6, pc}
 800c6a6:	466a      	mov	r2, sp
 800c6a8:	f000 f848 	bl	800c73c <_fstat_r>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	dbec      	blt.n	800c68a <__swhatbuf_r+0x12>
 800c6b0:	9901      	ldr	r1, [sp, #4]
 800c6b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c6b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c6ba:	4259      	negs	r1, r3
 800c6bc:	4159      	adcs	r1, r3
 800c6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6c2:	e7eb      	b.n	800c69c <__swhatbuf_r+0x24>

0800c6c4 <__smakebuf_r>:
 800c6c4:	898b      	ldrh	r3, [r1, #12]
 800c6c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6c8:	079d      	lsls	r5, r3, #30
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	d507      	bpl.n	800c6e0 <__smakebuf_r+0x1c>
 800c6d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	6123      	str	r3, [r4, #16]
 800c6d8:	2301      	movs	r3, #1
 800c6da:	6163      	str	r3, [r4, #20]
 800c6dc:	b002      	add	sp, #8
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	ab01      	add	r3, sp, #4
 800c6e2:	466a      	mov	r2, sp
 800c6e4:	f7ff ffc8 	bl	800c678 <__swhatbuf_r>
 800c6e8:	9900      	ldr	r1, [sp, #0]
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f7fe febd 	bl	800b46c <_malloc_r>
 800c6f2:	b948      	cbnz	r0, 800c708 <__smakebuf_r+0x44>
 800c6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6f8:	059a      	lsls	r2, r3, #22
 800c6fa:	d4ef      	bmi.n	800c6dc <__smakebuf_r+0x18>
 800c6fc:	f023 0303 	bic.w	r3, r3, #3
 800c700:	f043 0302 	orr.w	r3, r3, #2
 800c704:	81a3      	strh	r3, [r4, #12]
 800c706:	e7e3      	b.n	800c6d0 <__smakebuf_r+0xc>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	6020      	str	r0, [r4, #0]
 800c70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	9b00      	ldr	r3, [sp, #0]
 800c714:	6163      	str	r3, [r4, #20]
 800c716:	9b01      	ldr	r3, [sp, #4]
 800c718:	6120      	str	r0, [r4, #16]
 800c71a:	b15b      	cbz	r3, 800c734 <__smakebuf_r+0x70>
 800c71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c720:	4630      	mov	r0, r6
 800c722:	f000 f81d 	bl	800c760 <_isatty_r>
 800c726:	b128      	cbz	r0, 800c734 <__smakebuf_r+0x70>
 800c728:	89a3      	ldrh	r3, [r4, #12]
 800c72a:	f023 0303 	bic.w	r3, r3, #3
 800c72e:	f043 0301 	orr.w	r3, r3, #1
 800c732:	81a3      	strh	r3, [r4, #12]
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	431d      	orrs	r5, r3
 800c738:	81a5      	strh	r5, [r4, #12]
 800c73a:	e7cf      	b.n	800c6dc <__smakebuf_r+0x18>

0800c73c <_fstat_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4d07      	ldr	r5, [pc, #28]	; (800c75c <_fstat_r+0x20>)
 800c740:	2300      	movs	r3, #0
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	602b      	str	r3, [r5, #0]
 800c74a:	f7f4 fe68 	bl	800141e <_fstat>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	d102      	bne.n	800c758 <_fstat_r+0x1c>
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	b103      	cbz	r3, 800c758 <_fstat_r+0x1c>
 800c756:	6023      	str	r3, [r4, #0]
 800c758:	bd38      	pop	{r3, r4, r5, pc}
 800c75a:	bf00      	nop
 800c75c:	20001718 	.word	0x20001718

0800c760 <_isatty_r>:
 800c760:	b538      	push	{r3, r4, r5, lr}
 800c762:	4d06      	ldr	r5, [pc, #24]	; (800c77c <_isatty_r+0x1c>)
 800c764:	2300      	movs	r3, #0
 800c766:	4604      	mov	r4, r0
 800c768:	4608      	mov	r0, r1
 800c76a:	602b      	str	r3, [r5, #0]
 800c76c:	f7f4 fe67 	bl	800143e <_isatty>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	d102      	bne.n	800c77a <_isatty_r+0x1a>
 800c774:	682b      	ldr	r3, [r5, #0]
 800c776:	b103      	cbz	r3, 800c77a <_isatty_r+0x1a>
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	20001718 	.word	0x20001718

0800c780 <_init>:
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	bf00      	nop
 800c784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c786:	bc08      	pop	{r3}
 800c788:	469e      	mov	lr, r3
 800c78a:	4770      	bx	lr

0800c78c <_fini>:
 800c78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78e:	bf00      	nop
 800c790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c792:	bc08      	pop	{r3}
 800c794:	469e      	mov	lr, r3
 800c796:	4770      	bx	lr
