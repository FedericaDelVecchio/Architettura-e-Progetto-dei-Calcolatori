
Progetto_APC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800cbd8  0800cbd8  0001cbd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfe4  0800cfe4  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  0800cfe4  0800cfe4  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cfe4  0800cfe4  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfe4  0800cfe4  0001cfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfe8  0800cfe8  0001cfe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800cfec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020344  2**0
                  CONTENTS
 10 .bss          00001430  20000344  20000344  00020344  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001774  20001774  00020344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001628e  00000000  00000000  000203b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038a0  00000000  00000000  00036645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013f0  00000000  00000000  00039ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f3c  00000000  00000000  0003b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021640  00000000  00000000  0003c214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a688  00000000  00000000  0005d854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba48d  00000000  00000000  00077edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000643c  00000000  00000000  0013236c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001387a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000344 	.word	0x20000344
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbc0 	.word	0x0800cbc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000348 	.word	0x20000348
 80001cc:	0800cbc0 	.word	0x0800cbc0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <delay+0x30>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8000bba:	bf00      	nop
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <delay+0x30>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3f9      	bcc.n	8000bbc <delay+0x14>
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200003b4 	.word	0x200003b4

08000bdc <send_data>:

void send_data (float Temp, float Rh)
{
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b096      	sub	sp, #88	; 0x58
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000be6:	edc7 0a00 	vstr	s1, [r7]
	char buffer[64];
	int length = sprintf(buffer, "Temperature: %.2f; Humidity: %.2f\n",Temp,Rh);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fcac 	bl	8000548 <__aeabi_f2d>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	6838      	ldr	r0, [r7, #0]
 8000bf6:	f7ff fca7 	bl	8000548 <__aeabi_f2d>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	f107 000c 	add.w	r0, r7, #12
 8000c02:	e9cd 2300 	strd	r2, r3, [sp]
 8000c06:	4622      	mov	r2, r4
 8000c08:	462b      	mov	r3, r5
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <send_data+0x50>)
 8000c0c:	f009 fe7a 	bl	800a904 <siprintf>
 8000c10:	64f8      	str	r0, [r7, #76]	; 0x4c
	CDC_Transmit_FS((uint8_t*)buffer, length);
 8000c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f008 fd3f 	bl	80096a0 <CDC_Transmit_FS>
}
 8000c22:	bf00      	nop
 8000c24:	3750      	adds	r7, #80	; 0x50
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800cbd8 	.word	0x0800cbd8

08000c30 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c4c:	887b      	ldrh	r3, [r7, #2]
 8000c4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fe82 	bl	8001968 <HAL_GPIO_Init>
}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 fe64 	bl	8001968 <HAL_GPIO_Init>
}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000cac:	2102      	movs	r1, #2
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f7ff ffbd 	bl	8000c30 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2102      	movs	r1, #2
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f000 ffe5 	bl	8001c8c <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8000cc2:	f244 6050 	movw	r0, #18000	; 0x4650
 8000cc6:	f7ff ff6f 	bl	8000ba8 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2102      	movs	r1, #2
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f000 ffdb 	bl	8001c8c <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f7ff ff66 	bl	8000ba8 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000cdc:	2102      	movs	r1, #2
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f7ff ffc3 	bl	8000c6c <Set_Pin_Input>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000cf4:	2028      	movs	r0, #40	; 0x28
 8000cf6:	f7ff ff57 	bl	8000ba8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 ffac 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10f      	bne.n	8000d2a <DHT11_Check_Response+0x40>
	{
		delay (80);
 8000d0a:	2050      	movs	r0, #80	; 0x50
 8000d0c:	f7ff ff4c 	bl	8000ba8 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000d10:	2102      	movs	r1, #2
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f000 ffa1 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <DHT11_Check_Response+0x3c>
 8000d20:	2301      	movs	r3, #1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	e001      	b.n	8000d2a <DHT11_Check_Response+0x40>
		else Response = -1; // 255
 8000d26:	23ff      	movs	r3, #255	; 0xff
 8000d28:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8000d2a:	bf00      	nop
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f000 ff93 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f7      	bne.n	8000d2c <DHT11_Check_Response+0x42>

	return Response;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	71bb      	strb	r3, [r7, #6]
 8000d50:	e03a      	b.n	8000dc8 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000d52:	bf00      	nop
 8000d54:	2102      	movs	r1, #2
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f000 ff7f 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f7      	beq.n	8000d54 <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f7ff ff1f 	bl	8000ba8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f000 ff74 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10e      	bne.n	8000d98 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	f1c3 0307 	rsb	r3, r3, #7
 8000d80:	2201      	movs	r2, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4013      	ands	r3, r2
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	e00b      	b.n	8000db0 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000db0:	bf00      	nop
 8000db2:	2102      	movs	r1, #2
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f000 ff50 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f7      	bne.n	8000db2 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	71bb      	strb	r3, [r7, #6]
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d9c1      	bls.n	8000d52 <DHT11_Read+0xc>
	}
	return i;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 fc28 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f81a 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f000 f928 	bl	8001038 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000de8:	f000 f878 	bl	8000edc <MX_I2C1_Init>
  MX_TIM6_Init();
 8000dec:	f000 f8b6 	bl	8000f5c <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000df0:	f008 fb98 	bl	8009524 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8000df4:	f000 f8e8 	bl	8000fc8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <main+0x38>)
 8000dfa:	f004 f971 	bl	80050e0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <main+0x3c>)
 8000e00:	f004 f9d0 	bl	80051a4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(2000);
 8000e04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e08:	f000 fc78 	bl	80016fc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <main+0x34>
 8000e0e:	bf00      	nop
 8000e10:	200003b4 	.word	0x200003b4
 8000e14:	20000400 	.word	0x20000400

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b09e      	sub	sp, #120	; 0x78
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f009 fdcf 	bl	800a9ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	223c      	movs	r2, #60	; 0x3c
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f009 fdc1 	bl	800a9ca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e66:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e6c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fd1e 	bl	80038b4 <HAL_RCC_OscConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e7e:	f000 f9ef 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	230f      	movs	r3, #15
 8000e84:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 fd46 	bl	8004930 <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eaa:	f000 f9d9 	bl	8001260 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <SystemClock_Config+0xc0>)
 8000eb0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000eb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 ff06 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000eca:	f000 f9c9 	bl	8001260 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3778      	adds	r7, #120	; 0x78
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	00020020 	.word	0x00020020

08000edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <MX_I2C1_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <MX_I2C1_Init+0x7c>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f18:	f000 fed0 	bl	8001cbc <HAL_I2C_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f22:	f000 f99d 	bl	8001260 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f2a:	f000 ff62 	bl	8001df2 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f34:	f000 f994 	bl	8001260 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f3c:	f000 ffa4 	bl	8001e88 <HAL_I2CEx_ConfigDigitalFilter>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f46:	f000 f98b 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000360 	.word	0x20000360
 8000f54:	40005400 	.word	0x40005400
 8000f58:	2000090e 	.word	0x2000090e

08000f5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <MX_TIM6_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f74:	222f      	movs	r2, #47	; 0x2f
 8000f76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000f8e:	f004 f84f 	bl	8005030 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f98:	f000 f962 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM6_Init+0x64>)
 8000faa:	f004 fb2b 	bl	8005604 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fb4:	f000 f954 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200003b4 	.word	0x200003b4
 8000fc4:	40001000 	.word	0x40001000

08000fc8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_TIM7_Init+0x68>)
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <MX_TIM7_Init+0x6c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000 - 1;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_TIM7_Init+0x68>)
 8000fe0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000fe4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_TIM7_Init+0x68>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000 - 1;
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_TIM7_Init+0x68>)
 8000fee:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ff2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_TIM7_Init+0x68>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_TIM7_Init+0x68>)
 8000ffc:	f004 f818 	bl	8005030 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001006:	f000 f92b 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_TIM7_Init+0x68>)
 8001018:	f004 faf4 	bl	8005604 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001022:	f000 f91d 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000400 	.word	0x20000400
 8001034:	40001400 	.word	0x40001400

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800104e:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <MX_GPIO_Init+0x140>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a49      	ldr	r2, [pc, #292]	; (8001178 <MX_GPIO_Init+0x140>)
 8001054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b47      	ldr	r3, [pc, #284]	; (8001178 <MX_GPIO_Init+0x140>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b44      	ldr	r3, [pc, #272]	; (8001178 <MX_GPIO_Init+0x140>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a43      	ldr	r2, [pc, #268]	; (8001178 <MX_GPIO_Init+0x140>)
 800106c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <MX_GPIO_Init+0x140>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <MX_GPIO_Init+0x140>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <MX_GPIO_Init+0x140>)
 8001084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <MX_GPIO_Init+0x140>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <MX_GPIO_Init+0x140>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a37      	ldr	r2, [pc, #220]	; (8001178 <MX_GPIO_Init+0x140>)
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <MX_GPIO_Init+0x140>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_GPIO_Init+0x140>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <MX_GPIO_Init+0x140>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_GPIO_Init+0x140>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010c6:	2200      	movs	r2, #0
 80010c8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80010cc:	482b      	ldr	r0, [pc, #172]	; (800117c <MX_GPIO_Init+0x144>)
 80010ce:	f000 fddd 	bl	8001c8c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2102      	movs	r1, #2
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f000 fdd7 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80010de:	2337      	movs	r3, #55	; 0x37
 80010e0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4822      	ldr	r0, [pc, #136]	; (800117c <MX_GPIO_Init+0x144>)
 80010f4:	f000 fc38 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010f8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010fc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <MX_GPIO_Init+0x144>)
 8001112:	f000 fc29 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 fc1c 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001130:	2302      	movs	r3, #2
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f000 fc0d 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800114e:	23e0      	movs	r3, #224	; 0xe0
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115e:	2305      	movs	r3, #5
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fbfc 	bl	8001968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	48001000 	.word	0x48001000

08001180 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if (htim == &htim7)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d14d      	bne.n	800122c <HAL_TIM_PeriodElapsedCallback+0xac>
  {
    DHT11_Start();
 8001190:	f7ff fd8a 	bl	8000ca8 <DHT11_Start>
    Presence = DHT11_Check_Response();
 8001194:	f7ff fda9 	bl	8000cea <DHT11_Check_Response>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800119e:	701a      	strb	r2, [r3, #0]
    Rh_byte1 = DHT11_Read();
 80011a0:	f7ff fdd1 	bl	8000d46 <DHT11_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80011aa:	701a      	strb	r2, [r3, #0]
    Rh_byte2 = DHT11_Read();
 80011ac:	f7ff fdcb 	bl	8000d46 <DHT11_Read>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011b6:	701a      	strb	r2, [r3, #0]
    Temp_byte1 = DHT11_Read();
 80011b8:	f7ff fdc5 	bl	8000d46 <DHT11_Read>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80011c2:	701a      	strb	r2, [r3, #0]
    Temp_byte2 = DHT11_Read();
 80011c4:	f7ff fdbf 	bl	8000d46 <DHT11_Read>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011ce:	701a      	strb	r2, [r3, #0]
    SUM = DHT11_Read();
 80011d0:	f7ff fdb9 	bl	8000d46 <DHT11_Read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011da:	801a      	strh	r2, [r3, #0]

    TEMP = Temp_byte1;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80011e4:	801a      	strh	r2, [r3, #0]
    RH = Rh_byte1;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80011ee:	801a      	strh	r2, [r3, #0]

    Temperature = (float)TEMP;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]
    Humidity = (float)RH;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001210:	edc3 7a00 	vstr	s15, [r3]

    send_data(Temperature, Humidity);
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800121c:	ed93 7a00 	vldr	s14, [r3]
 8001220:	eef0 0a47 	vmov.f32	s1, s14
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	f7ff fcd8 	bl	8000bdc <send_data>
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000400 	.word	0x20000400
 8001238:	20000460 	.word	0x20000460
 800123c:	2000044c 	.word	0x2000044c
 8001240:	2000044d 	.word	0x2000044d
 8001244:	2000044e 	.word	0x2000044e
 8001248:	2000044f 	.word	0x2000044f
 800124c:	20000450 	.word	0x20000450
 8001250:	20000454 	.word	0x20000454
 8001254:	20000452 	.word	0x20000452
 8001258:	20000458 	.word	0x20000458
 800125c:	2000045c 	.word	0x2000045c

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x44>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_MspInit+0x44>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_MspInit+0x44>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x44>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x44>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x44>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f000 fb1e 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_I2C_MspInit+0x7c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d128      	bne.n	8001328 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_I2C_MspInit+0x80>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <HAL_I2C_MspInit+0x80>)
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_I2C_MspInit+0x80>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f4:	2312      	movs	r3, #18
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001300:	2304      	movs	r3, #4
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <HAL_I2C_MspInit+0x84>)
 800130c:	f000 fb2c 	bl	8001968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_I2C_MspInit+0x80>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_I2C_MspInit+0x80>)
 8001316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131a:	61d3      	str	r3, [r2, #28]
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_I2C_MspInit+0x80>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40005400 	.word	0x40005400
 8001334:	40021000 	.word	0x40021000
 8001338:	48000400 	.word	0x48000400

0800133c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <HAL_TIM_Base_MspInit+0x68>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10c      	bne.n	8001368 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001354:	f043 0310 	orr.w	r3, r3, #16
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_TIM_Base_MspInit+0x6c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001366:	e018      	b.n	800139a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <HAL_TIM_Base_MspInit+0x70>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d113      	bne.n	800139a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2037      	movs	r0, #55	; 0x37
 8001390:	f000 fab3 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001394:	2037      	movs	r0, #55	; 0x37
 8001396:	f000 facc 	bl	8001932 <HAL_NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40001000 	.word	0x40001000
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40001400 	.word	0x40001400

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f95e 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800140a:	f000 fe76 	bl	80020fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20001134 	.word	0x20001134

08001418 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <TIM7_IRQHandler+0x10>)
 800141e:	f003 ff2b 	bl	8005278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000400 	.word	0x20000400

0800142c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_kill>:

int _kill(int pid, int sig)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001446:	f009 fb13 	bl	800aa70 <__errno>
 800144a:	4603      	mov	r3, r0
 800144c:	2216      	movs	r2, #22
 800144e:	601a      	str	r2, [r3, #0]
  return -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_exit>:

void _exit (int status)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffe7 	bl	800143c <_kill>
  while (1) {}    /* Make sure we hang here */
 800146e:	e7fe      	b.n	800146e <_exit+0x12>

08001470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
  }

  return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <_write+0x12>
  }
  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	605a      	str	r2, [r3, #4]
  return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f009 fa78 	bl	800aa70 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000a000 	.word	0x2000a000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	20000464 	.word	0x20000464
 80015b4:	20001778 	.word	0x20001778

080015b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff ffea 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	; (800161c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <LoopForever+0xe>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	; (8001628 <LoopForever+0x16>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f009 fa37 	bl	800aa7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160e:	f7ff fbe3 	bl	8000dd8 <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001614:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001620:	0800cfec 	.word	0x0800cfec
  ldr r2, =_sbss
 8001624:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001628:	20001774 	.word	0x20001774

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>
	...

08001630 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x28>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f94f 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe0e 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000

0800165c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f967 	bl	800194e <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f92f 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000468 	.word	0x20000468

080016e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000468 	.word	0x20000468

080016fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e154      	b.n	8001c22 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8146 	beq.w	8001c1c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d005      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d130      	bne.n	8001a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019de:	2201      	movs	r2, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	f003 0201 	and.w	r2, r3, #1
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d017      	beq.n	8001a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d123      	bne.n	8001a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3208      	adds	r2, #8
 8001a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	6939      	ldr	r1, [r7, #16]
 8001a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0203 	and.w	r2, r3, #3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80a0 	beq.w	8001c1c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001adc:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <HAL_GPIO_Init+0x2d8>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a57      	ldr	r2, [pc, #348]	; (8001c40 <HAL_GPIO_Init+0x2d8>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <HAL_GPIO_Init+0x2d8>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001af4:	4a53      	ldr	r2, [pc, #332]	; (8001c44 <HAL_GPIO_Init+0x2dc>)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b1e:	d019      	beq.n	8001b54 <HAL_GPIO_Init+0x1ec>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_GPIO_Init+0x2e0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d013      	beq.n	8001b50 <HAL_GPIO_Init+0x1e8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_GPIO_Init+0x2e4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1e4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a47      	ldr	r2, [pc, #284]	; (8001c50 <HAL_GPIO_Init+0x2e8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1e0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a46      	ldr	r2, [pc, #280]	; (8001c54 <HAL_GPIO_Init+0x2ec>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1dc>
 8001b40:	2304      	movs	r3, #4
 8001b42:	e008      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b44:	2305      	movs	r3, #5
 8001b46:	e006      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e004      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b54:	2300      	movs	r3, #0
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	f002 0203 	and.w	r2, r2, #3
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	4093      	lsls	r3, r2
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b66:	4937      	ldr	r1, [pc, #220]	; (8001c44 <HAL_GPIO_Init+0x2dc>)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b98:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f47f aea3 	bne.w	8001978 <HAL_GPIO_Init+0x10>
  }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	48000800 	.word	0x48000800
 8001c50:	48000c00 	.word	0x48000c00
 8001c54:	48001000 	.word	0x48001000
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e08d      	b.n	8001dea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fae6 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2224      	movs	r2, #36	; 0x24
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e006      	b.n	8001d44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d108      	bne.n	8001d5e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	e007      	b.n	8001d6e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69d9      	ldr	r1, [r3, #28]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1a      	ldr	r2, [r3, #32]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d138      	bne.n	8001e7a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e032      	b.n	8001e7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2224      	movs	r2, #36	; 0x24
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e44:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
  }
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d139      	bne.n	8001f12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e033      	b.n	8001f14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
  }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0b9      	b.n	80020a6 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f007 fce0 	bl	800990c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fc08 	bl	800576e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e03e      	b.n	8001fe2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3311      	adds	r3, #17
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	3310      	adds	r3, #16
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	3313      	adds	r3, #19
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	3320      	adds	r3, #32
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3324      	adds	r3, #36	; 0x24
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	791b      	ldrb	r3, [r3, #4]
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d3bb      	bcc.n	8001f64 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e044      	b.n	800207c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	3301      	adds	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	791b      	ldrb	r3, [r3, #4]
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	429a      	cmp	r2, r3
 8002084:	d3b5      	bcc.n	8001ff2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002092:	f003 fb87 	bl	80057a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_PCD_Start+0x16>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e016      	b.n	80020f2 <HAL_PCD_Start+0x44>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 fb35 	bl	8005740 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80020d6:	2101      	movs	r1, #1
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f007 feb3 	bl	8009e44 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 fdf2 	bl	8007ccc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f005 fdeb 	bl	8007ce2 <USB_ReadInterrupts>
 800210c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fab1 	bl	8002680 <PCD_EP_ISR_Handler>

    return;
 800211e:	e0bd      	b.n	800229c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d013      	beq.n	8002152 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213c:	b292      	uxth	r2, r2
 800213e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f007 fc83 	bl	8009a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002148:	2100      	movs	r1, #0
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8a9 	bl	80022a2 <HAL_PCD_SetAddress>

    return;
 8002150:	e0a4      	b.n	800229c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00c      	beq.n	8002176 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800216e:	b292      	uxth	r2, r2
 8002170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002174:	e092      	b.n	800229c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00c      	beq.n	800219a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002192:	b292      	uxth	r2, r2
 8002194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002198:	e080      	b.n	800229c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d027      	beq.n	80021f4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	b292      	uxth	r2, r2
 80021d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f007 fc73 	bl	8009ac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ec:	b292      	uxth	r2, r2
 80021ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021f2:	e053      	b.n	800229c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d027      	beq.n	800224e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0208 	orr.w	r2, r2, #8
 8002210:	b292      	uxth	r2, r2
 8002212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800221e:	b29a      	uxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002228:	b292      	uxth	r2, r2
 800222a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0204 	orr.w	r2, r2, #4
 8002240:	b292      	uxth	r2, r2
 8002242:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f007 fc20 	bl	8009a8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800224c:	e026      	b.n	800229c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00f      	beq.n	8002278 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800226a:	b292      	uxth	r2, r2
 800226c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f007 fbde 	bl	8009a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002276:	e011      	b.n	800229c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002294:	b292      	uxth	r2, r2
 8002296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800229a:	bf00      	nop
  }
}
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_PCD_SetAddress+0x1a>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e012      	b.n	80022e2 <HAL_PCD_SetAddress+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f005 fce6 	bl	8007ca4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	4608      	mov	r0, r1
 80022f4:	4611      	mov	r1, r2
 80022f6:	461a      	mov	r2, r3
 80022f8:	4603      	mov	r3, r0
 80022fa:	70fb      	strb	r3, [r7, #3]
 80022fc:	460b      	mov	r3, r1
 80022fe:	803b      	strh	r3, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230c:	2b00      	cmp	r3, #0
 800230e:	da0e      	bge.n	800232e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0207 	and.w	r2, r3, #7
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	3310      	adds	r3, #16
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	705a      	strb	r2, [r3, #1]
 800232c:	e00e      	b.n	800234c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0207 	and.w	r2, r3, #7
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002358:	883a      	ldrh	r2, [r7, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	78ba      	ldrb	r2, [r7, #2]
 8002362:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002364:	78bb      	ldrb	r3, [r7, #2]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d102      	bne.n	8002370 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_PCD_EP_Open+0x94>
 800237a:	2302      	movs	r3, #2
 800237c:	e00e      	b.n	800239c <HAL_PCD_EP_Open+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fa27 	bl	80057e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800239a:	7afb      	ldrb	r3, [r7, #11]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	da0e      	bge.n	80023d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 0207 	and.w	r2, r3, #7
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	3310      	adds	r3, #16
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	705a      	strb	r2, [r3, #1]
 80023d4:	e00e      	b.n	80023f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 0207 	and.w	r2, r3, #7
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_PCD_EP_Close+0x6a>
 800240a:	2302      	movs	r3, #2
 800240c:	e00e      	b.n	800242c <HAL_PCD_EP_Close+0x88>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68f9      	ldr	r1, [r7, #12]
 800241c:	4618      	mov	r0, r3
 800241e:	f003 fda3 	bl	8005f68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	460b      	mov	r3, r1
 8002442:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	f003 0207 	and.w	r2, r3, #7
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4413      	add	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2200      	movs	r2, #0
 8002472:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	b2da      	uxtb	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6979      	ldr	r1, [r7, #20]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 ff5b 	bl	8006342 <USB_EPStartXfer>

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 0207 	and.w	r2, r3, #7
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80024b8:	681b      	ldr	r3, [r3, #0]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	460b      	mov	r3, r1
 80024d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d6:	7afb      	ldrb	r3, [r7, #11]
 80024d8:	f003 0207 	and.w	r2, r3, #7
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	3310      	adds	r3, #16
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2201      	movs	r2, #1
 8002510:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	b2da      	uxtb	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6979      	ldr	r1, [r7, #20]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 ff0c 	bl	8006342 <USB_EPStartXfer>

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	7912      	ldrb	r2, [r2, #4]
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e03e      	b.n	80025d0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002556:	2b00      	cmp	r3, #0
 8002558:	da0e      	bge.n	8002578 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	f003 0207 	and.w	r2, r3, #7
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	3310      	adds	r3, #16
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	705a      	strb	r2, [r3, #1]
 8002576:	e00c      	b.n	8002592 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_PCD_EP_SetStall+0x7e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e00e      	b.n	80025d0 <HAL_PCD_EP_SetStall+0x9c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f005 fa70 	bl	8007aa6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	7912      	ldrb	r2, [r2, #4]
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e040      	b.n	8002678 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da0e      	bge.n	800261c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 0207 	and.w	r2, r3, #7
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	3310      	adds	r3, #16
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	705a      	strb	r2, [r3, #1]
 800261a:	e00e      	b.n	800263a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 0207 	and.w	r2, r3, #7
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_PCD_EP_ClrStall+0x82>
 8002656:	2302      	movs	r3, #2
 8002658:	e00e      	b.n	8002678 <HAL_PCD_EP_ClrStall+0xa0>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68f9      	ldr	r1, [r7, #12]
 8002668:	4618      	mov	r0, r3
 800266a:	f005 fa6d 	bl	8007b48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b096      	sub	sp, #88	; 0x58
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002688:	e3bc      	b.n	8002e04 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002692:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002696:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 80026a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 8176 	bne.w	800299a <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d14f      	bne.n	800275a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	81fb      	strh	r3, [r7, #14]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	89fb      	ldrh	r3, [r7, #14]
 80026d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026da:	b29b      	uxth	r3, r3
 80026dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3310      	adds	r3, #16
 80026e2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	3302      	adds	r3, #2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	4413      	add	r3, r2
 8002702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	441a      	add	r2, r3
 800271a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800271e:	2100      	movs	r1, #0
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f007 f96c 	bl	80099fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7b1b      	ldrb	r3, [r3, #12]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8369 	beq.w	8002e04 <PCD_EP_ISR_Handler+0x784>
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 8364 	bne.w	8002e04 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7b1b      	ldrb	r3, [r3, #12]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002746:	b2da      	uxtb	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b292      	uxth	r2, r2
 800274e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	731a      	strb	r2, [r3, #12]
 8002758:	e354      	b.n	8002e04 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002760:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800276c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002774:	2b00      	cmp	r3, #0
 8002776:	d034      	beq.n	80027e2 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	3306      	adds	r3, #6
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80027ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f005 fae9 	bl	8007d8e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027c8:	4013      	ands	r3, r2
 80027ca:	823b      	strh	r3, [r7, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	8a3a      	ldrh	r2, [r7, #16]
 80027d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027d6:	b292      	uxth	r2, r2
 80027d8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f007 f8e2 	bl	80099a4 <HAL_PCD_SetupStageCallback>
 80027e0:	e310      	b.n	8002e04 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f280 830c 	bge.w	8002e04 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027f8:	4013      	ands	r3, r2
 80027fa:	83fb      	strh	r3, [r7, #30]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	8bfa      	ldrh	r2, [r7, #30]
 8002802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002806:	b292      	uxth	r2, r2
 8002808:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	3306      	adds	r3, #6
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002834:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d019      	beq.n	8002872 <PCD_EP_ISR_Handler+0x1f2>
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d015      	beq.n	8002872 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284c:	6959      	ldr	r1, [r3, #20]
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002856:	b29b      	uxth	r3, r3
 8002858:	f005 fa99 	bl	8007d8e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800285c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	441a      	add	r2, r3
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800286a:	2100      	movs	r1, #0
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f007 f8ab 	bl	80099c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800287c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 82bd 	bne.w	8002e04 <PCD_EP_ISR_Handler+0x784>
 800288a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800288e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002896:	f000 82b5 	beq.w	8002e04 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	4413      	add	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	801a      	strh	r2, [r3, #0]
 80028ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <PCD_EP_ISR_Handler+0x268>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	e039      	b.n	800295c <PCD_EP_ISR_Handler+0x2dc>
 80028e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b3e      	cmp	r3, #62	; 0x3e
 80028ee:	d818      	bhi.n	8002922 <PCD_EP_ISR_Handler+0x2a2>
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	647b      	str	r3, [r7, #68]	; 0x44
 80028f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <PCD_EP_ISR_Handler+0x28a>
 8002904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002906:	3301      	adds	r3, #1
 8002908:	647b      	str	r3, [r7, #68]	; 0x44
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29a      	uxth	r2, r3
 8002910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002912:	b29b      	uxth	r3, r3
 8002914:	029b      	lsls	r3, r3, #10
 8002916:	b29b      	uxth	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	b29a      	uxth	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	801a      	strh	r2, [r3, #0]
 8002920:	e01c      	b.n	800295c <PCD_EP_ISR_Handler+0x2dc>
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	647b      	str	r3, [r7, #68]	; 0x44
 800292a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <PCD_EP_ISR_Handler+0x2bc>
 8002936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002938:	3b01      	subs	r3, #1
 800293a:	647b      	str	r3, [r7, #68]	; 0x44
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29a      	uxth	r2, r3
 8002942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002944:	b29b      	uxth	r3, r3
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	b29b      	uxth	r3, r3
 800294a:	4313      	orrs	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002956:	b29a      	uxth	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	827b      	strh	r3, [r7, #18]
 800296e:	8a7b      	ldrh	r3, [r7, #18]
 8002970:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002974:	827b      	strh	r3, [r7, #18]
 8002976:	8a7b      	ldrh	r3, [r7, #18]
 8002978:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800297c:	827b      	strh	r3, [r7, #18]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	8a7b      	ldrh	r3, [r7, #18]
 8002984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800298c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	b29b      	uxth	r3, r3
 8002996:	8013      	strh	r3, [r2, #0]
 8002998:	e234      	b.n	8002e04 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f280 80fc 	bge.w	8002bb0 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029ce:	4013      	ands	r3, r2
 80029d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80029e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ea:	b292      	uxth	r2, r2
 80029ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029ee:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a06:	7b1b      	ldrb	r3, [r3, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d125      	bne.n	8002a58 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3306      	adds	r3, #6
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a34:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002a38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8092 	beq.w	8002b66 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a48:	6959      	ldr	r1, [r3, #20]
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4c:	88da      	ldrh	r2, [r3, #6]
 8002a4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a52:	f005 f99c 	bl	8007d8e <USB_ReadPMA>
 8002a56:	e086      	b.n	8002b66 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5a:	78db      	ldrb	r3, [r3, #3]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d10a      	bne.n	8002a76 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a60:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a64:	461a      	mov	r2, r3
 8002a66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f9d9 	bl	8002e20 <HAL_PCD_EP_DB_Receive>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002a74:	e077      	b.n	8002b66 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a90:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d024      	beq.n	8002b1e <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02e      	beq.n	8002b66 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	6959      	ldr	r1, [r3, #20]
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	891a      	ldrh	r2, [r3, #8]
 8002b14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b18:	f005 f939 	bl	8007d8e <USB_ReadPMA>
 8002b1c:	e023      	b.n	8002b66 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	3306      	adds	r3, #6
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b58:	6959      	ldr	r1, [r3, #20]
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	895a      	ldrh	r2, [r3, #10]
 8002b5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b62:	f005 f914 	bl	8007d8e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b6e:	441a      	add	r2, r3
 8002b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b7c:	441a      	add	r2, r3
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b80:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <PCD_EP_ISR_Handler+0x516>
 8002b8a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d206      	bcs.n	8002ba4 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f006 ff13 	bl	80099c8 <HAL_PCD_DataOutStageCallback>
 8002ba2:	e005      	b.n	8002bb0 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fbc9 	bl	8006342 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002bb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8123 	beq.w	8002e04 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8002bbe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	3310      	adds	r3, #16
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c10:	78db      	ldrb	r3, [r3, #3]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	f040 80a2 	bne.w	8002d5c <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8002c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c20:	7b1b      	ldrb	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8093 	beq.w	8002d4e <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c28:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d046      	beq.n	8002cc2 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d126      	bne.n	8002c8a <PCD_EP_ISR_Handler+0x60a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	4413      	add	r3, r2
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	011a      	lsls	r2, r3, #4
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c62:	623b      	str	r3, [r7, #32]
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	e061      	b.n	8002d4e <PCD_EP_ISR_Handler+0x6ce>
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8c:	785b      	ldrb	r3, [r3, #1]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d15d      	bne.n	8002d4e <PCD_EP_ISR_Handler+0x6ce>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	4413      	add	r3, r2
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	011a      	lsls	r2, r3, #4
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	e045      	b.n	8002d4e <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d126      	bne.n	8002d1e <PCD_EP_ISR_Handler+0x69e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	4413      	add	r3, r2
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	011a      	lsls	r2, r3, #4
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	e017      	b.n	8002d4e <PCD_EP_ISR_Handler+0x6ce>
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d113      	bne.n	8002d4e <PCD_EP_ISR_Handler+0x6ce>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d34:	4413      	add	r3, r2
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	011a      	lsls	r2, r3, #4
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f006 fe52 	bl	80099fe <HAL_PCD_DataInStageCallback>
 8002d5a:	e053      	b.n	8002e04 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d146      	bne.n	8002df6 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d907      	bls.n	8002db0 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8002da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002da8:	1ad2      	subs	r2, r2, r3
 8002daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dac:	619a      	str	r2, [r3, #24]
 8002dae:	e002      	b.n	8002db6 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8002db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f006 fe1a 	bl	80099fe <HAL_PCD_DataInStageCallback>
 8002dca:	e01b      	b.n	8002e04 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dd4:	441a      	add	r2, r3
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002de2:	441a      	add	r2, r3
 8002de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 faa7 	bl	8006342 <USB_EPStartXfer>
 8002df4:	e006      	b.n	8002e04 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002df6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f91b 	bl	800303a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f6ff ac3a 	blt.w	800268a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3758      	adds	r7, #88	; 0x58
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d07e      	beq.n	8002f36 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	8b7b      	ldrh	r3, [r7, #26]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d306      	bcc.n	8002e7a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	8b7b      	ldrh	r3, [r7, #26]
 8002e72:	1ad2      	subs	r2, r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	619a      	str	r2, [r3, #24]
 8002e78:	e002      	b.n	8002e80 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d123      	bne.n	8002ed0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	833b      	strh	r3, [r7, #24]
 8002ea4:	8b3b      	ldrh	r3, [r7, #24]
 8002ea6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eaa:	833b      	strh	r3, [r7, #24]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	8b3b      	ldrh	r3, [r7, #24]
 8002ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01f      	beq.n	8002f1a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef4:	82fb      	strh	r3, [r7, #22]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	441a      	add	r2, r3
 8002f04:	8afb      	ldrh	r3, [r7, #22]
 8002f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f1a:	8b7b      	ldrh	r3, [r7, #26]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8087 	beq.w	8003030 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6959      	ldr	r1, [r3, #20]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	891a      	ldrh	r2, [r3, #8]
 8002f2e:	8b7b      	ldrh	r3, [r7, #26]
 8002f30:	f004 ff2d 	bl	8007d8e <USB_ReadPMA>
 8002f34:	e07c      	b.n	8003030 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3306      	adds	r3, #6
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d306      	bcc.n	8002f78 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	8b7b      	ldrh	r3, [r7, #26]
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	619a      	str	r2, [r3, #24]
 8002f76:	e002      	b.n	8002f7e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d123      	bne.n	8002fce <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	83fb      	strh	r3, [r7, #30]
 8002fa2:	8bfb      	ldrh	r3, [r7, #30]
 8002fa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fa8:	83fb      	strh	r3, [r7, #30]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	8bfb      	ldrh	r3, [r7, #30]
 8002fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11f      	bne.n	8003018 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	83bb      	strh	r3, [r7, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	8bbb      	ldrh	r3, [r7, #28]
 8003004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003014:	b29b      	uxth	r3, r3
 8003016:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003018:	8b7b      	ldrh	r3, [r7, #26]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6959      	ldr	r1, [r3, #20]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	895a      	ldrh	r2, [r3, #10]
 800302a:	8b7b      	ldrh	r3, [r7, #26]
 800302c:	f004 feaf 	bl	8007d8e <USB_ReadPMA>
    }
  }

  return count;
 8003030:	8b7b      	ldrh	r3, [r7, #26]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b0a4      	sub	sp, #144	; 0x90
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 81dd 	beq.w	800340e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305c:	b29b      	uxth	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	3302      	adds	r3, #2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800307c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003088:	429a      	cmp	r2, r3
 800308a:	d907      	bls.n	800309c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	619a      	str	r2, [r3, #24]
 800309a:	e002      	b.n	80030a2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80b9 	bne.w	800321e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d126      	bne.n	8003102 <HAL_PCD_EP_DB_Transmit+0xc8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	4413      	add	r3, r2
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	011a      	lsls	r2, r3, #4
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	4413      	add	r3, r2
 80030d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	e01a      	b.n	8003138 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d116      	bne.n	8003138 <HAL_PCD_EP_DB_Transmit+0xfe>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311e:	4413      	add	r3, r2
 8003120:	637b      	str	r3, [r7, #52]	; 0x34
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	011a      	lsls	r2, r3, #4
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	4413      	add	r3, r2
 800312c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	785b      	ldrb	r3, [r3, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d126      	bne.n	8003194 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	011a      	lsls	r2, r3, #4
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003178:	b29a      	uxth	r2, r3
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	801a      	strh	r2, [r3, #0]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800318c:	b29a      	uxth	r2, r3
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	e017      	b.n	80031c4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d113      	bne.n	80031c4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	4413      	add	r3, r2
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	011a      	lsls	r2, r3, #4
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	4413      	add	r3, r2
 80031b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031bc:	623b      	str	r3, [r7, #32]
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	2200      	movs	r2, #0
 80031c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f006 fc17 	bl	80099fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 82fc 	beq.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	82fb      	strh	r3, [r7, #22]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	8afb      	ldrh	r3, [r7, #22]
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]
 800321c:	e2da      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d021      	beq.n	800326c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003268:	b29b      	uxth	r3, r3
 800326a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003272:	2b01      	cmp	r3, #1
 8003274:	f040 82ae 	bne.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003280:	441a      	add	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800328e:	441a      	add	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	429a      	cmp	r2, r3
 800329e:	d30b      	bcc.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032b0:	1ad2      	subs	r2, r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	621a      	str	r2, [r3, #32]
 80032b6:	e017      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d108      	bne.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80032c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80032c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032d0:	e00a      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d165      	bne.n	80033bc <HAL_PCD_EP_DB_Transmit+0x382>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003304:	4413      	add	r3, r2
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	011a      	lsls	r2, r3, #4
 800330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003310:	4413      	add	r3, r2
 8003312:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003322:	b29a      	uxth	r2, r3
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	801a      	strh	r2, [r3, #0]
 8003328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29a      	uxth	r2, r3
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	e057      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334a:	2b3e      	cmp	r3, #62	; 0x3e
 800334c:	d818      	bhi.n	8003380 <HAL_PCD_EP_DB_Transmit+0x346>
 800334e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	64bb      	str	r3, [r7, #72]	; 0x48
 8003356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003364:	3301      	adds	r3, #1
 8003366:	64bb      	str	r3, [r7, #72]	; 0x48
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29a      	uxth	r2, r3
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003370:	b29b      	uxth	r3, r3
 8003372:	029b      	lsls	r3, r3, #10
 8003374:	b29b      	uxth	r3, r3
 8003376:	4313      	orrs	r3, r2
 8003378:	b29a      	uxth	r2, r3
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	e03a      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
 8003388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <HAL_PCD_EP_DB_Transmit+0x360>
 8003394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003396:	3b01      	subs	r3, #1
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29a      	uxth	r2, r3
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	029b      	lsls	r3, r3, #10
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	4313      	orrs	r3, r2
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	e01c      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d118      	bne.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d8:	4413      	add	r3, r2
 80033da:	647b      	str	r3, [r7, #68]	; 0x44
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	011a      	lsls	r2, r3, #4
 80033e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e4:	4413      	add	r3, r2
 80033e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
 80033ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6959      	ldr	r1, [r3, #20]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	891a      	ldrh	r2, [r3, #8]
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003406:	b29b      	uxth	r3, r3
 8003408:	f004 fc7b 	bl	8007d02 <USB_WritePMA>
 800340c:	e1e2      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	3306      	adds	r3, #6
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003436:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003442:	429a      	cmp	r2, r3
 8003444:	d307      	bcc.n	8003456 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800344e:	1ad2      	subs	r2, r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	619a      	str	r2, [r3, #24]
 8003454:	e002      	b.n	800345c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 80c0 	bne.w	80035e6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d126      	bne.n	80034bc <HAL_PCD_EP_DB_Transmit+0x482>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003482:	4413      	add	r3, r2
 8003484:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	011a      	lsls	r2, r3, #4
 800348c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800348e:	4413      	add	r3, r2
 8003490:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003494:	67bb      	str	r3, [r7, #120]	; 0x78
 8003496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b8:	801a      	strh	r2, [r3, #0]
 80034ba:	e01a      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	785b      	ldrb	r3, [r3, #1]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d116      	bne.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	667b      	str	r3, [r7, #100]	; 0x64
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d8:	4413      	add	r3, r2
 80034da:	667b      	str	r3, [r7, #100]	; 0x64
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	011a      	lsls	r2, r3, #4
 80034e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034e4:	4413      	add	r3, r2
 80034e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034ea:	663b      	str	r3, [r7, #96]	; 0x60
 80034ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ee:	2200      	movs	r2, #0
 80034f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	677b      	str	r3, [r7, #116]	; 0x74
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d12b      	bne.n	8003558 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003514:	4413      	add	r3, r2
 8003516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	011a      	lsls	r2, r3, #4
 800351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003520:	4413      	add	r3, r2
 8003522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800352a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003536:	b29a      	uxth	r2, r3
 8003538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800353c:	801a      	strh	r2, [r3, #0]
 800353e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800354a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800354e:	b29a      	uxth	r2, r3
 8003550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	e017      	b.n	8003588 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	785b      	ldrb	r3, [r3, #1]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d113      	bne.n	8003588 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003568:	b29b      	uxth	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356e:	4413      	add	r3, r2
 8003570:	677b      	str	r3, [r7, #116]	; 0x74
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	011a      	lsls	r2, r3, #4
 8003578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357a:	4413      	add	r3, r2
 800357c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003580:	673b      	str	r3, [r7, #112]	; 0x70
 8003582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003584:	2200      	movs	r2, #0
 8003586:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f006 fa35 	bl	80099fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 811a 	bne.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	441a      	add	r2, r3
 80035cc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80035d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	8013      	strh	r3, [r2, #0]
 80035e4:	e0f6      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d121      	bne.n	8003634 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	441a      	add	r2, r3
 800361c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800362c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003630:	b29b      	uxth	r3, r3
 8003632:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800363a:	2b01      	cmp	r3, #1
 800363c:	f040 80ca 	bne.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003648:	441a      	add	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003656:	441a      	add	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	429a      	cmp	r2, r3
 8003666:	d30b      	bcc.n	8003680 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	6a1a      	ldr	r2, [r3, #32]
 8003674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003678:	1ad2      	subs	r2, r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	621a      	str	r2, [r3, #32]
 800367e:	e017      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003688:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800368c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003698:	e00a      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2200      	movs	r2, #0
 80036a6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	657b      	str	r3, [r7, #84]	; 0x54
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d165      	bne.n	800378a <HAL_PCD_EP_DB_Transmit+0x750>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d2:	4413      	add	r3, r2
 80036d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	011a      	lsls	r2, r3, #4
 80036dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036de:	4413      	add	r3, r2
 80036e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80036e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <HAL_PCD_EP_DB_Transmit+0x6da>
 80036fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800370c:	b29a      	uxth	r2, r3
 800370e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	e054      	b.n	80037be <HAL_PCD_EP_DB_Transmit+0x784>
 8003714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003718:	2b3e      	cmp	r3, #62	; 0x3e
 800371a:	d818      	bhi.n	800374e <HAL_PCD_EP_DB_Transmit+0x714>
 800371c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	66bb      	str	r3, [r7, #104]	; 0x68
 8003724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003732:	3301      	adds	r3, #1
 8003734:	66bb      	str	r3, [r7, #104]	; 0x68
 8003736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29a      	uxth	r2, r3
 800373c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800373e:	b29b      	uxth	r3, r3
 8003740:	029b      	lsls	r3, r3, #10
 8003742:	b29b      	uxth	r3, r3
 8003744:	4313      	orrs	r3, r2
 8003746:	b29a      	uxth	r2, r3
 8003748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800374a:	801a      	strh	r2, [r3, #0]
 800374c:	e037      	b.n	80037be <HAL_PCD_EP_DB_Transmit+0x784>
 800374e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	66bb      	str	r3, [r7, #104]	; 0x68
 8003756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003764:	3b01      	subs	r3, #1
 8003766:	66bb      	str	r3, [r7, #104]	; 0x68
 8003768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29a      	uxth	r2, r3
 800376e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003770:	b29b      	uxth	r3, r3
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	b29b      	uxth	r3, r3
 8003776:	4313      	orrs	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003782:	b29a      	uxth	r2, r3
 8003784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003786:	801a      	strh	r2, [r3, #0]
 8003788:	e019      	b.n	80037be <HAL_PCD_EP_DB_Transmit+0x784>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d115      	bne.n	80037be <HAL_PCD_EP_DB_Transmit+0x784>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a0:	4413      	add	r3, r2
 80037a2:	657b      	str	r3, [r7, #84]	; 0x54
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	011a      	lsls	r2, r3, #4
 80037aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ac:	4413      	add	r3, r2
 80037ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037b2:	653b      	str	r3, [r7, #80]	; 0x50
 80037b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	6959      	ldr	r1, [r3, #20]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	895a      	ldrh	r2, [r3, #10]
 80037ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f004 fa97 	bl	8007d02 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ee:	82bb      	strh	r3, [r7, #20]
 80037f0:	8abb      	ldrh	r3, [r7, #20]
 80037f2:	f083 0310 	eor.w	r3, r3, #16
 80037f6:	82bb      	strh	r3, [r7, #20]
 80037f8:	8abb      	ldrh	r3, [r7, #20]
 80037fa:	f083 0320 	eor.w	r3, r3, #32
 80037fe:	82bb      	strh	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	8abb      	ldrh	r3, [r7, #20]
 8003810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003820:	b29b      	uxth	r3, r3
 8003822:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3790      	adds	r7, #144	; 0x90
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800382e:	b480      	push	{r7}
 8003830:	b087      	sub	sp, #28
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	817b      	strh	r3, [r7, #10]
 800383c:	4613      	mov	r3, r2
 800383e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384c:	897b      	ldrh	r3, [r7, #10]
 800384e:	f003 0207 	and.w	r2, r3, #7
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	3310      	adds	r3, #16
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e009      	b.n	8003878 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003864:	897a      	ldrh	r2, [r7, #10]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003878:	893b      	ldrh	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	b29a      	uxth	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	80da      	strh	r2, [r3, #6]
 800388c:	e00b      	b.n	80038a6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2201      	movs	r2, #1
 8003892:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	b29a      	uxth	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f001 b823 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 817d 	beq.w	8003bea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038f0:	4bbc      	ldr	r3, [pc, #752]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d00c      	beq.n	8003916 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038fc:	4bb9      	ldr	r3, [pc, #740]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d15c      	bne.n	80039c2 <HAL_RCC_OscConfig+0x10e>
 8003908:	4bb6      	ldr	r3, [pc, #728]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d155      	bne.n	80039c2 <HAL_RCC_OscConfig+0x10e>
 8003916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800391a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800392a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <HAL_RCC_OscConfig+0x94>
 8003942:	4ba8      	ldr	r3, [pc, #672]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	e015      	b.n	8003974 <HAL_RCC_OscConfig+0xc0>
 8003948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800394c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800395c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003960:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003964:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003970:	4b9c      	ldr	r3, [pc, #624]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003978:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800397c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003980:	fa92 f2a2 	rbit	r2, r2
 8003984:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003988:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800398c:	fab2 f282 	clz	r2, r2
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f042 0220 	orr.w	r2, r2, #32
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	f002 021f 	and.w	r2, r2, #31
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 811f 	beq.w	8003be8 <HAL_RCC_OscConfig+0x334>
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 8116 	bne.w	8003be8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f000 bfaf 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x12e>
 80039d4:	4b83      	ldr	r3, [pc, #524]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a82      	ldr	r2, [pc, #520]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e036      	b.n	8003a50 <HAL_RCC_OscConfig+0x19c>
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x158>
 80039f2:	4b7c      	ldr	r3, [pc, #496]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7b      	ldr	r2, [pc, #492]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 80039f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a78      	ldr	r2, [pc, #480]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e021      	b.n	8003a50 <HAL_RCC_OscConfig+0x19c>
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x184>
 8003a1e:	4b71      	ldr	r3, [pc, #452]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a70      	ldr	r2, [pc, #448]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6e      	ldr	r3, [pc, #440]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6d      	ldr	r2, [pc, #436]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x19c>
 8003a38:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a69      	ldr	r2, [pc, #420]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b67      	ldr	r3, [pc, #412]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a66      	ldr	r2, [pc, #408]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a50:	4b64      	ldr	r3, [pc, #400]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f023 020f 	bic.w	r2, r3, #15
 8003a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	495f      	ldr	r1, [pc, #380]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d059      	beq.n	8003b2e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fe33 	bl	80016e4 <HAL_GetTick>
 8003a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fd fe2e 	bl	80016e4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b64      	cmp	r3, #100	; 0x64
 8003a92:	d902      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	f000 bf43 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>
 8003a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a9e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003aae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d102      	bne.n	8003acc <HAL_RCC_OscConfig+0x218>
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	e015      	b.n	8003af8 <HAL_RCC_OscConfig+0x244>
 8003acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003ae8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003af4:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003afc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003b00:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b04:	fa92 f2a2 	rbit	r2, r2
 8003b08:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003b0c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003b10:	fab2 f282 	clz	r2, r2
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	f042 0220 	orr.w	r2, r2, #32
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	f002 021f 	and.w	r2, r2, #31
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f202 	lsl.w	r2, r1, r2
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ab      	beq.n	8003a84 <HAL_RCC_OscConfig+0x1d0>
 8003b2c:	e05d      	b.n	8003bea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fd fdd9 	bl	80016e4 <HAL_GetTick>
 8003b32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fd fdd4 	bl	80016e4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	; 0x64
 8003b46:	d902      	bls.n	8003b4e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	f000 bee9 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>
 8003b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b52:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d102      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2cc>
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	e015      	b.n	8003bac <HAL_RCC_OscConfig+0x2f8>
 8003b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b84:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b98:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003b9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_RCC_OscConfig+0x330>)
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bb0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003bb4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003bb8:	fa92 f2a2 	rbit	r2, r2
 8003bbc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003bc0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003bc4:	fab2 f282 	clz	r2, r2
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f042 0220 	orr.w	r2, r2, #32
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f002 021f 	and.w	r2, r2, #31
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ab      	bne.n	8003b38 <HAL_RCC_OscConfig+0x284>
 8003be0:	e003      	b.n	8003bea <HAL_RCC_OscConfig+0x336>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 817d 	beq.w	8003efa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c00:	4ba6      	ldr	r3, [pc, #664]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c0c:	4ba3      	ldr	r3, [pc, #652]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d172      	bne.n	8003cfe <HAL_RCC_OscConfig+0x44a>
 8003c18:	4ba0      	ldr	r3, [pc, #640]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d16c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x44a>
 8003c24:	2302      	movs	r3, #2
 8003c26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003c36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3a0>
 8003c4e:	4b93      	ldr	r3, [pc, #588]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	e013      	b.n	8003c7c <HAL_RCC_OscConfig+0x3c8>
 8003c54:	2302      	movs	r3, #2
 8003c56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c66:	2302      	movs	r3, #2
 8003c68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c78:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c86:	fa92 f2a2 	rbit	r2, r2
 8003c8a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c92:	fab2 f282 	clz	r2, r2
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	f042 0220 	orr.w	r2, r2, #32
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f002 021f 	and.w	r2, r2, #31
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x410>
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f000 be2e 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b75      	ldr	r3, [pc, #468]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	21f8      	movs	r1, #248	; 0xf8
 8003cda:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003ce2:	fa91 f1a1 	rbit	r1, r1
 8003ce6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003cea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003cee:	fab1 f181 	clz	r1, r1
 8003cf2:	b2c9      	uxtb	r1, r1
 8003cf4:	408b      	lsls	r3, r1
 8003cf6:	4969      	ldr	r1, [pc, #420]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfc:	e0fd      	b.n	8003efa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8088 	beq.w	8003e20 <HAL_RCC_OscConfig+0x56c>
 8003d10:	2301      	movs	r3, #1
 8003d12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003d22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	461a      	mov	r2, r3
 8003d38:	2301      	movs	r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fcd2 	bl	80016e4 <HAL_GetTick>
 8003d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fd fccd 	bl	80016e4 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d902      	bls.n	8003d5c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	f000 bde2 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_OscConfig+0x4d8>
 8003d86:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e013      	b.n	8003db4 <HAL_RCC_OscConfig+0x500>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d9e:	2302      	movs	r3, #2
 8003da0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003da4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003da8:	fa93 f3a3 	rbit	r3, r3
 8003dac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003db0:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	2202      	movs	r2, #2
 8003db6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003dba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003dbe:	fa92 f2a2 	rbit	r2, r2
 8003dc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003dc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003dca:	fab2 f282 	clz	r2, r2
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f042 0220 	orr.w	r2, r2, #32
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f002 021f 	and.w	r2, r2, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0af      	beq.n	8003d46 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de6:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	21f8      	movs	r1, #248	; 0xf8
 8003dfc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e04:	fa91 f1a1 	rbit	r1, r1
 8003e08:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003e0c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003e10:	fab1 f181 	clz	r1, r1
 8003e14:	b2c9      	uxtb	r1, r1
 8003e16:	408b      	lsls	r3, r1
 8003e18:	4920      	ldr	r1, [pc, #128]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
 8003e1e:	e06c      	b.n	8003efa <HAL_RCC_OscConfig+0x646>
 8003e20:	2301      	movs	r3, #1
 8003e22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	461a      	mov	r2, r3
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fd fc4a 	bl	80016e4 <HAL_GetTick>
 8003e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e56:	f7fd fc45 	bl	80016e4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d902      	bls.n	8003e6c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	f000 bd5a 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d104      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x5ec>
 8003e96:	4b01      	ldr	r3, [pc, #4]	; (8003e9c <HAL_RCC_OscConfig+0x5e8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	e015      	b.n	8003ec8 <HAL_RCC_OscConfig+0x614>
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003eb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ec4:	4bc8      	ldr	r3, [pc, #800]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003ece:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ed2:	fa92 f2a2 	rbit	r2, r2
 8003ed6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003eda:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ede:	fab2 f282 	clz	r2, r2
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	f042 0220 	orr.w	r2, r2, #32
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	f002 021f 	and.w	r2, r2, #31
 8003eee:	2101      	movs	r1, #1
 8003ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ad      	bne.n	8003e56 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8110 	beq.w	8004130 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d079      	beq.n	8004014 <HAL_RCC_OscConfig+0x760>
 8003f20:	2301      	movs	r3, #1
 8003f22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4bab      	ldr	r3, [pc, #684]	; (80041ec <HAL_RCC_OscConfig+0x938>)
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	461a      	mov	r2, r3
 8003f46:	2301      	movs	r3, #1
 8003f48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fbcb 	bl	80016e4 <HAL_GetTick>
 8003f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fd fbc6 	bl	80016e4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d902      	bls.n	8003f6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	f000 bcdb 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f84:	2202      	movs	r2, #2
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	fa93 f2a3 	rbit	r2, r3
 8003f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fa8:	2202      	movs	r2, #2
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	fa93 f2a3 	rbit	r2, r3
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003fc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc4:	4b88      	ldr	r3, [pc, #544]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 8003fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	6019      	str	r1, [r3, #0]
 8003fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	fa93 f1a3 	rbit	r1, r3
 8003fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fea:	6019      	str	r1, [r3, #0]
  return result;
 8003fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0a0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x6a0>
 8004012:	e08d      	b.n	8004130 <HAL_RCC_OscConfig+0x87c>
 8004014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004018:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004024:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fa93 f2a3 	rbit	r2, r3
 800402e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004032:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004036:	601a      	str	r2, [r3, #0]
  return result;
 8004038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004040:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	4b68      	ldr	r3, [pc, #416]	; (80041ec <HAL_RCC_OscConfig+0x938>)
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	461a      	mov	r2, r3
 8004052:	2300      	movs	r3, #0
 8004054:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fd fb45 	bl	80016e4 <HAL_GetTick>
 800405a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405e:	e00a      	b.n	8004076 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fd fb40 	bl	80016e4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d902      	bls.n	8004076 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	f000 bc55 	b.w	8004920 <HAL_RCC_OscConfig+0x106c>
 8004076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800407e:	2202      	movs	r2, #2
 8004080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004086:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004094:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80040a2:	2202      	movs	r2, #2
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	fa93 f2a3 	rbit	r2, r3
 80040b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040c6:	2202      	movs	r2, #2
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	fa93 f2a3 	rbit	r2, r3
 80040d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 80040e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040ee:	2102      	movs	r1, #2
 80040f0:	6019      	str	r1, [r3, #0]
 80040f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	fa93 f1a3 	rbit	r1, r3
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004108:	6019      	str	r1, [r3, #0]
  return result;
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	fab3 f383 	clz	r3, r3
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2101      	movs	r1, #1
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d197      	bne.n	8004060 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004134:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 81a1 	beq.w	8004488 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414c:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d116      	bne.n	8004186 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004158:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	4a22      	ldr	r2, [pc, #136]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004162:	61d3      	str	r3, [r2, #28]
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800416c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004170:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800417e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_RCC_OscConfig+0x93c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11a      	bne.n	80041c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_RCC_OscConfig+0x93c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a16      	ldr	r2, [pc, #88]	; (80041f0 <HAL_RCC_OscConfig+0x93c>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fd faa1 	bl	80016e4 <HAL_GetTick>
 80041a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	e009      	b.n	80041bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a8:	f7fd fa9c 	bl	80016e4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b64      	cmp	r3, #100	; 0x64
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e3b1      	b.n	8004920 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <HAL_RCC_OscConfig+0x93c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ef      	beq.n	80041a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10d      	bne.n	80041f4 <HAL_RCC_OscConfig+0x940>
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	4a02      	ldr	r2, [pc, #8]	; (80041e8 <HAL_RCC_OscConfig+0x934>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6213      	str	r3, [r2, #32]
 80041e4:	e03c      	b.n	8004260 <HAL_RCC_OscConfig+0x9ac>
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	10908120 	.word	0x10908120
 80041f0:	40007000 	.word	0x40007000
 80041f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10c      	bne.n	800421e <HAL_RCC_OscConfig+0x96a>
 8004204:	4bc1      	ldr	r3, [pc, #772]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4ac0      	ldr	r2, [pc, #768]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	6213      	str	r3, [r2, #32]
 8004210:	4bbe      	ldr	r3, [pc, #760]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4abd      	ldr	r2, [pc, #756]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004216:	f023 0304 	bic.w	r3, r3, #4
 800421a:	6213      	str	r3, [r2, #32]
 800421c:	e020      	b.n	8004260 <HAL_RCC_OscConfig+0x9ac>
 800421e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b05      	cmp	r3, #5
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x994>
 800422e:	4bb7      	ldr	r3, [pc, #732]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4ab6      	ldr	r2, [pc, #728]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004234:	f043 0304 	orr.w	r3, r3, #4
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4bb4      	ldr	r3, [pc, #720]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4ab3      	ldr	r2, [pc, #716]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6213      	str	r3, [r2, #32]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0x9ac>
 8004248:	4bb0      	ldr	r3, [pc, #704]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4aaf      	ldr	r2, [pc, #700]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	6213      	str	r3, [r2, #32]
 8004254:	4bad      	ldr	r3, [pc, #692]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4aac      	ldr	r2, [pc, #688]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 800425a:	f023 0304 	bic.w	r3, r3, #4
 800425e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8081 	beq.w	8004374 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fd fa37 	bl	80016e4 <HAL_GetTick>
 8004276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fd fa32 	bl	80016e4 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f241 3288 	movw	r2, #5000	; 0x1388
 800428c:	4293      	cmp	r3, r2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e345      	b.n	8004920 <HAL_RCC_OscConfig+0x106c>
 8004294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004298:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800429c:	2202      	movs	r2, #2
 800429e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	fa93 f2a3 	rbit	r2, r3
 80042ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80042c0:	2202      	movs	r2, #2
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	fa93 f2a3 	rbit	r2, r3
 80042d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042da:	601a      	str	r2, [r3, #0]
  return result;
 80042dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f043 0302 	orr.w	r3, r3, #2
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d102      	bne.n	8004300 <HAL_RCC_OscConfig+0xa4c>
 80042fa:	4b84      	ldr	r3, [pc, #528]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	e013      	b.n	8004328 <HAL_RCC_OscConfig+0xa74>
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004308:	2202      	movs	r2, #2
 800430a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fa93 f2a3 	rbit	r2, r3
 800431a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	4b79      	ldr	r3, [pc, #484]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800432c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004330:	2102      	movs	r1, #2
 8004332:	6011      	str	r1, [r2, #0]
 8004334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004338:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	fa92 f1a2 	rbit	r1, r2
 8004342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004346:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800434a:	6011      	str	r1, [r2, #0]
  return result;
 800434c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004350:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	fab2 f282 	clz	r2, r2
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f002 021f 	and.w	r2, r2, #31
 8004366:	2101      	movs	r1, #1
 8004368:	fa01 f202 	lsl.w	r2, r1, r2
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d084      	beq.n	800427c <HAL_RCC_OscConfig+0x9c8>
 8004372:	e07f      	b.n	8004474 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004374:	f7fd f9b6 	bl	80016e4 <HAL_GetTick>
 8004378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437c:	e00b      	b.n	8004396 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd f9b1 	bl	80016e4 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e2c4      	b.n	8004920 <HAL_RCC_OscConfig+0x106c>
 8004396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800439e:	2202      	movs	r2, #2
 80043a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	fa93 f2a3 	rbit	r2, r3
 80043b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043c2:	2202      	movs	r2, #2
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	fa93 f2a3 	rbit	r2, r3
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043dc:	601a      	str	r2, [r3, #0]
  return result;
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f043 0302 	orr.w	r3, r3, #2
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_OscConfig+0xb4e>
 80043fc:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	e013      	b.n	800442a <HAL_RCC_OscConfig+0xb76>
 8004402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004406:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800440a:	2202      	movs	r2, #2
 800440c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004412:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	fa93 f2a3 	rbit	r2, r3
 800441c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004420:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	4b39      	ldr	r3, [pc, #228]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800442e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004432:	2102      	movs	r1, #2
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800443a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	fa92 f1a2 	rbit	r1, r2
 8004444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004448:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800444c:	6011      	str	r1, [r2, #0]
  return result;
 800444e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004452:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	fab2 f282 	clz	r2, r2
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	f002 021f 	and.w	r2, r2, #31
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f202 	lsl.w	r2, r1, r2
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d184      	bne.n	800437e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004474:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4a22      	ldr	r2, [pc, #136]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004486:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8242 	beq.w	800491e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800449a:	4b1c      	ldr	r3, [pc, #112]	; (800450c <HAL_RCC_OscConfig+0xc58>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	f000 8213 	beq.w	80048ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	f040 8162 	bne.w	800477e <HAL_RCC_OscConfig+0xeca>
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	fa93 f2a3 	rbit	r2, r3
 80044d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044de:	601a      	str	r2, [r3, #0]
  return result;
 80044e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	461a      	mov	r2, r3
 80044fc:	2300      	movs	r3, #0
 80044fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fd f8f0 	bl	80016e4 <HAL_GetTick>
 8004504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004508:	e00c      	b.n	8004524 <HAL_RCC_OscConfig+0xc70>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004510:	f7fd f8e8 	bl	80016e4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e1fd      	b.n	8004920 <HAL_RCC_OscConfig+0x106c>
 8004524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004528:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800452c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004536:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	fa93 f2a3 	rbit	r2, r3
 8004540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004544:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004548:	601a      	str	r2, [r3, #0]
  return result;
 800454a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004552:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004554:	fab3 f383 	clz	r3, r3
 8004558:	b2db      	uxtb	r3, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d102      	bne.n	800456e <HAL_RCC_OscConfig+0xcba>
 8004568:	4bb0      	ldr	r3, [pc, #704]	; (800482c <HAL_RCC_OscConfig+0xf78>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	e027      	b.n	80045be <HAL_RCC_OscConfig+0xd0a>
 800456e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004572:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800457a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004580:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	fa93 f2a3 	rbit	r2, r3
 800458a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004598:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800459c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	fa93 f2a3 	rbit	r2, r3
 80045b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	4b9c      	ldr	r3, [pc, #624]	; (800482c <HAL_RCC_OscConfig+0xf78>)
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80045c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045ca:	6011      	str	r1, [r2, #0]
 80045cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	fa92 f1a2 	rbit	r1, r2
 80045da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045e2:	6011      	str	r1, [r2, #0]
  return result;
 80045e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	fab2 f282 	clz	r2, r2
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f042 0220 	orr.w	r2, r2, #32
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	f002 021f 	and.w	r2, r2, #31
 80045fe:	2101      	movs	r1, #1
 8004600:	fa01 f202 	lsl.w	r2, r1, r2
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d182      	bne.n	8004510 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460a:	4b88      	ldr	r3, [pc, #544]	; (800482c <HAL_RCC_OscConfig+0xf78>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800461e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	430b      	orrs	r3, r1
 800462c:	497f      	ldr	r1, [pc, #508]	; (800482c <HAL_RCC_OscConfig+0xf78>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
 8004632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004636:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800463a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800463e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	fa93 f2a3 	rbit	r2, r3
 800464e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004652:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004656:	601a      	str	r2, [r3, #0]
  return result;
 8004658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004660:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800466c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	461a      	mov	r2, r3
 8004674:	2301      	movs	r3, #1
 8004676:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fd f834 	bl	80016e4 <HAL_GetTick>
 800467c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004680:	e009      	b.n	8004696 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004682:	f7fd f82f 	bl	80016e4 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e144      	b.n	8004920 <HAL_RCC_OscConfig+0x106c>
 8004696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800469e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	fa93 f2a3 	rbit	r2, r3
 80046b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80046ba:	601a      	str	r2, [r3, #0]
  return result;
 80046bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80046c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d102      	bne.n	80046e0 <HAL_RCC_OscConfig+0xe2c>
 80046da:	4b54      	ldr	r3, [pc, #336]	; (800482c <HAL_RCC_OscConfig+0xf78>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	e027      	b.n	8004730 <HAL_RCC_OscConfig+0xe7c>
 80046e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	fa93 f2a3 	rbit	r2, r3
 80046fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004700:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800470e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	fa93 f2a3 	rbit	r2, r3
 8004722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004726:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	4b3f      	ldr	r3, [pc, #252]	; (800482c <HAL_RCC_OscConfig+0xf78>)
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004734:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004738:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004742:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	fa92 f1a2 	rbit	r1, r2
 800474c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004750:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004754:	6011      	str	r1, [r2, #0]
  return result;
 8004756:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800475a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	fab2 f282 	clz	r2, r2
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	f042 0220 	orr.w	r2, r2, #32
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	f002 021f 	and.w	r2, r2, #31
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f202 	lsl.w	r2, r1, r2
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d082      	beq.n	8004682 <HAL_RCC_OscConfig+0xdce>
 800477c:	e0cf      	b.n	800491e <HAL_RCC_OscConfig+0x106a>
 800477e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004782:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004786:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800478a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004790:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	fa93 f2a3 	rbit	r2, r3
 800479a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80047a2:	601a      	str	r2, [r3, #0]
  return result;
 80047a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80047ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	461a      	mov	r2, r3
 80047c0:	2300      	movs	r3, #0
 80047c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fc ff8e 	bl	80016e4 <HAL_GetTick>
 80047c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047cc:	e009      	b.n	80047e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ce:	f7fc ff89 	bl	80016e4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e09e      	b.n	8004920 <HAL_RCC_OscConfig+0x106c>
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	fa93 f2a3 	rbit	r2, r3
 80047fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004802:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004806:	601a      	str	r2, [r3, #0]
  return result;
 8004808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800480c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004810:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d104      	bne.n	8004830 <HAL_RCC_OscConfig+0xf7c>
 8004826:	4b01      	ldr	r3, [pc, #4]	; (800482c <HAL_RCC_OscConfig+0xf78>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	e029      	b.n	8004880 <HAL_RCC_OscConfig+0xfcc>
 800482c:	40021000 	.word	0x40021000
 8004830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004834:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800483c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004842:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fa93 f2a3 	rbit	r2, r3
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800485e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004868:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	fa93 f2a3 	rbit	r2, r3
 8004872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004876:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	4b2b      	ldr	r3, [pc, #172]	; (800492c <HAL_RCC_OscConfig+0x1078>)
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004884:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004888:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800488c:	6011      	str	r1, [r2, #0]
 800488e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004892:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	fa92 f1a2 	rbit	r1, r2
 800489c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80048a4:	6011      	str	r1, [r2, #0]
  return result;
 80048a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	fab2 f282 	clz	r2, r2
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	f042 0220 	orr.w	r2, r2, #32
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	f002 021f 	and.w	r2, r2, #31
 80048c0:	2101      	movs	r1, #1
 80048c2:	fa01 f202 	lsl.w	r2, r1, r2
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d180      	bne.n	80047ce <HAL_RCC_OscConfig+0xf1a>
 80048cc:	e027      	b.n	800491e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e01e      	b.n	8004920 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_OscConfig+0x1078>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d10b      	bne.n	800491a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004902:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004906:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800490a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004916:	429a      	cmp	r2, r3
 8004918:	d001      	beq.n	800491e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000

08004930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b09e      	sub	sp, #120	; 0x78
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e162      	b.n	8004c0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b90      	ldr	r3, [pc, #576]	; (8004b8c <HAL_RCC_ClockConfig+0x25c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d910      	bls.n	8004978 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b8d      	ldr	r3, [pc, #564]	; (8004b8c <HAL_RCC_ClockConfig+0x25c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 0207 	bic.w	r2, r3, #7
 800495e:	498b      	ldr	r1, [pc, #556]	; (8004b8c <HAL_RCC_ClockConfig+0x25c>)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b89      	ldr	r3, [pc, #548]	; (8004b8c <HAL_RCC_ClockConfig+0x25c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e14a      	b.n	8004c0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b82      	ldr	r3, [pc, #520]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	497f      	ldr	r1, [pc, #508]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80dc 	beq.w	8004b5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d13c      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xf6>
 80049ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049bc:	fab3 f383 	clz	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d102      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xa6>
 80049d0:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	e00f      	b.n	80049f6 <HAL_RCC_ClockConfig+0xc6>
 80049d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	667b      	str	r3, [r7, #100]	; 0x64
 80049e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e8:	663b      	str	r3, [r7, #96]	; 0x60
 80049ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f2:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80049fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049fe:	fa92 f2a2 	rbit	r2, r2
 8004a02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a06:	fab2 f282 	clz	r2, r2
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	f042 0220 	orr.w	r2, r2, #32
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	f002 021f 	and.w	r2, r2, #31
 8004a16:	2101      	movs	r1, #1
 8004a18:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d17b      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e0f3      	b.n	8004c0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d13c      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x178>
 8004a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d102      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x128>
 8004a52:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	e00f      	b.n	8004a78 <HAL_RCC_ClockConfig+0x148>
 8004a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
 8004a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a74:	4b46      	ldr	r3, [pc, #280]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a80:	fa92 f2a2 	rbit	r2, r2
 8004a84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a88:	fab2 f282 	clz	r2, r2
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	f042 0220 	orr.w	r2, r2, #32
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	f002 021f 	and.w	r2, r2, #31
 8004a98:	2101      	movs	r1, #1
 8004a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d13a      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0b2      	b.n	8004c0e <HAL_RCC_ClockConfig+0x2de>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	e00d      	b.n	8004aec <HAL_RCC_ClockConfig+0x1bc>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
 8004adc:	2302      	movs	r3, #2
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	2202      	movs	r2, #2
 8004aee:	61ba      	str	r2, [r7, #24]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	fa92 f2a2 	rbit	r2, r2
 8004af6:	617a      	str	r2, [r7, #20]
  return result;
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	fab2 f282 	clz	r2, r2
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	f042 0220 	orr.w	r2, r2, #32
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	f002 021f 	and.w	r2, r2, #31
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e079      	b.n	8004c0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f023 0203 	bic.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	491a      	ldr	r1, [pc, #104]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b2c:	f7fc fdda 	bl	80016e4 <HAL_GetTick>
 8004b30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fc fdd6 	bl	80016e4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e061      	b.n	8004c0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 020c 	and.w	r2, r3, #12
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1eb      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_ClockConfig+0x25c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d214      	bcs.n	8004b94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <HAL_RCC_ClockConfig+0x25c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 0207 	bic.w	r2, r3, #7
 8004b72:	4906      	ldr	r1, [pc, #24]	; (8004b8c <HAL_RCC_ClockConfig+0x25c>)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <HAL_RCC_ClockConfig+0x25c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e040      	b.n	8004c0e <HAL_RCC_ClockConfig+0x2de>
 8004b8c:	40022000 	.word	0x40022000
 8004b90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_RCC_ClockConfig+0x2e8>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	491a      	ldr	r1, [pc, #104]	; (8004c18 <HAL_RCC_ClockConfig+0x2e8>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_RCC_ClockConfig+0x2e8>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4912      	ldr	r1, [pc, #72]	; (8004c18 <HAL_RCC_ClockConfig+0x2e8>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bd2:	f000 f829 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <HAL_RCC_ClockConfig+0x2e8>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be0:	22f0      	movs	r2, #240	; 0xf0
 8004be2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	fa92 f2a2 	rbit	r2, r2
 8004bea:	60fa      	str	r2, [r7, #12]
  return result;
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	fab2 f282 	clz	r2, r2
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	40d3      	lsrs	r3, r2
 8004bf6:	4a09      	ldr	r2, [pc, #36]	; (8004c1c <HAL_RCC_ClockConfig+0x2ec>)
 8004bf8:	5cd3      	ldrb	r3, [r2, r3]
 8004bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <HAL_RCC_ClockConfig+0x2f0>)
 8004c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <HAL_RCC_ClockConfig+0x2f4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fc fd28 	bl	800165c <HAL_InitTick>
  
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3778      	adds	r7, #120	; 0x78
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	0800cc44 	.word	0x0800cc44
 8004c20:	20000000 	.word	0x20000000
 8004c24:	20000004 	.word	0x20000004

08004c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d002      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x30>
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x36>
 8004c56:	e026      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c5a:	613b      	str	r3, [r7, #16]
      break;
 8004c5c:	e026      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	0c9b      	lsrs	r3, r3, #18
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c68:	5cd3      	ldrb	r3, [r2, r3]
 8004c6a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004c6c:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	4a14      	ldr	r2, [pc, #80]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c76:	5cd3      	ldrb	r3, [r2, r3]
 8004c78:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c84:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e004      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	613b      	str	r3, [r7, #16]
      break;
 8004ca4:	e002      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ca8:	613b      	str	r3, [r7, #16]
      break;
 8004caa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cac:	693b      	ldr	r3, [r7, #16]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	0800cc54 	.word	0x0800cc54
 8004cc8:	0800cc64 	.word	0x0800cc64
 8004ccc:	003d0900 	.word	0x003d0900

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b092      	sub	sp, #72	; 0x48
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80d4 	beq.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
 8004d0c:	4b48      	ldr	r3, [pc, #288]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2a:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a41      	ldr	r2, [pc, #260]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fc fcd5 	bl	80016e4 <HAL_GetTick>
 8004d3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fc fcd1 	bl	80016e4 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e169      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d5c:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8084 	beq.w	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d07c      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	461a      	mov	r2, r3
 8004da6:	2301      	movs	r3, #1
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dce:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04b      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fc fc81 	bl	80016e4 <HAL_GetTick>
 8004de2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fc fc7d 	bl	80016e4 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e113      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
 8004e08:	2302      	movs	r3, #2
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	61fb      	str	r3, [r7, #28]
  return result;
 8004e14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f043 0302 	orr.w	r3, r3, #2
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d108      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004e2a:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	e00d      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
 8004e38:	10908100 	.word	0x10908100
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	fa93 f3a3 	rbit	r3, r3
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	4b78      	ldr	r3, [pc, #480]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	613a      	str	r2, [r7, #16]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	fa92 f2a2 	rbit	r2, r2
 8004e56:	60fa      	str	r2, [r7, #12]
  return result;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	f002 021f 	and.w	r2, r2, #31
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0b7      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e76:	4b6d      	ldr	r3, [pc, #436]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	496a      	ldr	r1, [pc, #424]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4b66      	ldr	r3, [pc, #408]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4a65      	ldr	r2, [pc, #404]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea8:	4b60      	ldr	r3, [pc, #384]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	f023 0203 	bic.w	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	495d      	ldr	r1, [pc, #372]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec6:	4b59      	ldr	r3, [pc, #356]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	4956      	ldr	r1, [pc, #344]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee4:	4b51      	ldr	r3, [pc, #324]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	494e      	ldr	r1, [pc, #312]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f02:	4b4a      	ldr	r3, [pc, #296]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4947      	ldr	r1, [pc, #284]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	493f      	ldr	r1, [pc, #252]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f3e:	4b3b      	ldr	r3, [pc, #236]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	f023 0220 	bic.w	r2, r3, #32
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	4938      	ldr	r1, [pc, #224]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f5c:	4b33      	ldr	r3, [pc, #204]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	4930      	ldr	r1, [pc, #192]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f7a:	4b2c      	ldr	r3, [pc, #176]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	4929      	ldr	r1, [pc, #164]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f98:	4b24      	ldr	r3, [pc, #144]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	4921      	ldr	r1, [pc, #132]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	491a      	ldr	r1, [pc, #104]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004fd4:	4b15      	ldr	r3, [pc, #84]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	4912      	ldr	r1, [pc, #72]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	490b      	ldr	r1, [pc, #44]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005010:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	4903      	ldr	r1, [pc, #12]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3748      	adds	r7, #72	; 0x48
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000

08005030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e049      	b.n	80050d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fc f970 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 fa2c 	bl	80054cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d001      	beq.n	80050f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e042      	b.n	800517e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a21      	ldr	r2, [pc, #132]	; (800518c <HAL_TIM_Base_Start+0xac>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d018      	beq.n	800513c <HAL_TIM_Base_Start+0x5c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d013      	beq.n	800513c <HAL_TIM_Base_Start+0x5c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <HAL_TIM_Base_Start+0xb0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_TIM_Base_Start+0x5c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <HAL_TIM_Base_Start+0xb4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d009      	beq.n	800513c <HAL_TIM_Base_Start+0x5c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1a      	ldr	r2, [pc, #104]	; (8005198 <HAL_TIM_Base_Start+0xb8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_TIM_Base_Start+0x5c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a19      	ldr	r2, [pc, #100]	; (800519c <HAL_TIM_Base_Start+0xbc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d115      	bne.n	8005168 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <HAL_TIM_Base_Start+0xc0>)
 8005144:	4013      	ands	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b06      	cmp	r3, #6
 800514c:	d015      	beq.n	800517a <HAL_TIM_Base_Start+0x9a>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005154:	d011      	beq.n	800517a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	e008      	b.n	800517a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	e000      	b.n	800517c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40013400 	.word	0x40013400
 800519c:	40014000 	.word	0x40014000
 80051a0:	00010007 	.word	0x00010007

080051a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d001      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e04a      	b.n	8005252 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a21      	ldr	r2, [pc, #132]	; (8005260 <HAL_TIM_Base_Start_IT+0xbc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d018      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x6c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d013      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x6c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <HAL_TIM_Base_Start_IT+0xc0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x6c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1c      	ldr	r2, [pc, #112]	; (8005268 <HAL_TIM_Base_Start_IT+0xc4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d009      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x6c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1a      	ldr	r2, [pc, #104]	; (800526c <HAL_TIM_Base_Start_IT+0xc8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x6c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a19      	ldr	r2, [pc, #100]	; (8005270 <HAL_TIM_Base_Start_IT+0xcc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d115      	bne.n	800523c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	4b17      	ldr	r3, [pc, #92]	; (8005274 <HAL_TIM_Base_Start_IT+0xd0>)
 8005218:	4013      	ands	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b06      	cmp	r3, #6
 8005220:	d015      	beq.n	800524e <HAL_TIM_Base_Start_IT+0xaa>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005228:	d011      	beq.n	800524e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523a:	e008      	b.n	800524e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e000      	b.n	8005250 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40013400 	.word	0x40013400
 8005270:	40014000 	.word	0x40014000
 8005274:	00010007 	.word	0x00010007

08005278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d020      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0202 	mvn.w	r2, #2
 80052ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8e4 	bl	8005490 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f8d6 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f8e7 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d020      	beq.n	8005328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0204 	mvn.w	r2, #4
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8be 	bl	8005490 <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8b0 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8c1 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d020      	beq.n	8005374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0208 	mvn.w	r2, #8
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f898 	bl	8005490 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f88a 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f89b 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d020      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01b      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0210 	mvn.w	r2, #16
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2208      	movs	r2, #8
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f872 	bl	8005490 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f864 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f875 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0201 	mvn.w	r2, #1
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fb fece 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f988 	bl	8005718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f980 	bl	800572c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00c      	beq.n	8005450 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f834 	bl	80054b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00c      	beq.n	8005474 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0220 	mvn.w	r2, #32
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f948 	bl	8005704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a42      	ldr	r2, [pc, #264]	; (80055e8 <TIM_Base_SetConfig+0x11c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00f      	beq.n	8005504 <TIM_Base_SetConfig+0x38>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ea:	d00b      	beq.n	8005504 <TIM_Base_SetConfig+0x38>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a3f      	ldr	r2, [pc, #252]	; (80055ec <TIM_Base_SetConfig+0x120>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d007      	beq.n	8005504 <TIM_Base_SetConfig+0x38>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a3e      	ldr	r2, [pc, #248]	; (80055f0 <TIM_Base_SetConfig+0x124>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_Base_SetConfig+0x38>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a3d      	ldr	r2, [pc, #244]	; (80055f4 <TIM_Base_SetConfig+0x128>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d108      	bne.n	8005516 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a33      	ldr	r2, [pc, #204]	; (80055e8 <TIM_Base_SetConfig+0x11c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01b      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005524:	d017      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a30      	ldr	r2, [pc, #192]	; (80055ec <TIM_Base_SetConfig+0x120>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2f      	ldr	r2, [pc, #188]	; (80055f0 <TIM_Base_SetConfig+0x124>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00f      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2e      	ldr	r2, [pc, #184]	; (80055f4 <TIM_Base_SetConfig+0x128>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00b      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2d      	ldr	r2, [pc, #180]	; (80055f8 <TIM_Base_SetConfig+0x12c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d007      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <TIM_Base_SetConfig+0x130>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <TIM_Base_SetConfig+0x134>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d108      	bne.n	8005568 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <TIM_Base_SetConfig+0x11c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00f      	beq.n	80055b4 <TIM_Base_SetConfig+0xe8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <TIM_Base_SetConfig+0x128>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00b      	beq.n	80055b4 <TIM_Base_SetConfig+0xe8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <TIM_Base_SetConfig+0x12c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_Base_SetConfig+0xe8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <TIM_Base_SetConfig+0x130>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_Base_SetConfig+0xe8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a14      	ldr	r2, [pc, #80]	; (8005600 <TIM_Base_SetConfig+0x134>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d103      	bne.n	80055bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d105      	bne.n	80055da <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f023 0201 	bic.w	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	611a      	str	r2, [r3, #16]
  }
}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40012c00 	.word	0x40012c00
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40013400 	.word	0x40013400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40014400 	.word	0x40014400
 8005600:	40014800 	.word	0x40014800

08005604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005618:	2302      	movs	r3, #2
 800561a:	e063      	b.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d004      	beq.n	8005650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d108      	bne.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d013      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a17      	ldr	r2, [pc, #92]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d10c      	bne.n	80056d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40013400 	.word	0x40013400
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40014000 	.word	0x40014000

08005704 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005750:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005754:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	b29a      	uxth	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005776:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800577a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	b29b      	uxth	r3, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	b29b      	uxth	r3, r3
 800578c:	4013      	ands	r3, r2
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	1d3b      	adds	r3, r7, #4
 80057ae:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b09d      	sub	sp, #116	; 0x74
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	78db      	ldrb	r3, [r3, #3]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d81f      	bhi.n	8005852 <USB_ActivateEndpoint+0x72>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <USB_ActivateEndpoint+0x38>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	08005829 	.word	0x08005829
 800581c:	08005845 	.word	0x08005845
 8005820:	0800585b 	.word	0x0800585b
 8005824:	08005837 	.word	0x08005837
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005828:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800582c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005830:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005834:	e012      	b.n	800585c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005836:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800583a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800583e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005842:	e00b      	b.n	800585c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005844:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005848:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800584c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005850:	e004      	b.n	800585c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005858:	e000      	b.n	800585c <USB_ActivateEndpoint+0x7c>
      break;
 800585a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800586a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	b21b      	sxth	r3, r3
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	b21a      	sxth	r2, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	b21b      	sxth	r3, r3
 800589e:	4313      	orrs	r3, r2
 80058a0:	b21b      	sxth	r3, r3
 80058a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	441a      	add	r2, r3
 80058b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80058b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	7b1b      	ldrb	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 8178 	bne.w	8005bc2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	785b      	ldrb	r3, [r3, #1]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8084 	beq.w	80059e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	4413      	add	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	011a      	lsls	r2, r3, #4
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	88db      	ldrh	r3, [r3, #6]
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	b29b      	uxth	r3, r3
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	827b      	strh	r3, [r7, #18]
 800591e:	8a7b      	ldrh	r3, [r7, #18]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <USB_ActivateEndpoint+0x180>
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	823b      	strh	r3, [r7, #16]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	441a      	add	r2, r3
 800594a:	8a3b      	ldrh	r3, [r7, #16]
 800594c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800595c:	b29b      	uxth	r3, r3
 800595e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	78db      	ldrb	r3, [r3, #3]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d020      	beq.n	80059aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597e:	81bb      	strh	r3, [r7, #12]
 8005980:	89bb      	ldrh	r3, [r7, #12]
 8005982:	f083 0320 	eor.w	r3, r3, #32
 8005986:	81bb      	strh	r3, [r7, #12]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	89bb      	ldrh	r3, [r7, #12]
 8005994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8013      	strh	r3, [r2, #0]
 80059a8:	e2d5      	b.n	8005f56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c0:	81fb      	strh	r3, [r7, #14]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	441a      	add	r2, r3
 80059cc:	89fb      	ldrh	r3, [r7, #14]
 80059ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059de:	b29b      	uxth	r3, r3
 80059e0:	8013      	strh	r3, [r2, #0]
 80059e2:	e2b8      	b.n	8005f56 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	633b      	str	r3, [r7, #48]	; 0x30
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	4413      	add	r3, r2
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	011a      	lsls	r2, r3, #4
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	88db      	ldrh	r3, [r3, #6]
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	4413      	add	r3, r2
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	011a      	lsls	r2, r3, #4
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <USB_ActivateEndpoint+0x28a>
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e039      	b.n	8005ade <USB_ActivateEndpoint+0x2fe>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a70:	d818      	bhi.n	8005aa4 <USB_ActivateEndpoint+0x2c4>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <USB_ActivateEndpoint+0x2ac>
 8005a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a88:	3301      	adds	r3, #1
 8005a8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e01c      	b.n	8005ade <USB_ActivateEndpoint+0x2fe>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <USB_ActivateEndpoint+0x2de>
 8005ab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aba:	3b01      	subs	r3, #1
 8005abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	029b      	lsls	r3, r3, #10
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4313      	orrs	r3, r2
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	847b      	strh	r3, [r7, #34]	; 0x22
 8005aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01b      	beq.n	8005b2e <USB_ActivateEndpoint+0x34e>
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0c:	843b      	strh	r3, [r7, #32]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	8c3b      	ldrh	r3, [r7, #32]
 8005b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d124      	bne.n	8005b80 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	83bb      	strh	r3, [r7, #28]
 8005b4e:	8bbb      	ldrh	r3, [r7, #28]
 8005b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b54:	83bb      	strh	r3, [r7, #28]
 8005b56:	8bbb      	ldrh	r3, [r7, #28]
 8005b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b5c:	83bb      	strh	r3, [r7, #28]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	8bbb      	ldrh	r3, [r7, #28]
 8005b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	8013      	strh	r3, [r2, #0]
 8005b7e:	e1ea      	b.n	8005f56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	83fb      	strh	r3, [r7, #30]
 8005b98:	8bfb      	ldrh	r3, [r7, #30]
 8005b9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b9e:	83fb      	strh	r3, [r7, #30]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	8bfb      	ldrh	r3, [r7, #30]
 8005bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	8013      	strh	r3, [r2, #0]
 8005bc0:	e1c9      	b.n	8005f56 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	78db      	ldrb	r3, [r3, #3]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d11e      	bne.n	8005c08 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	441a      	add	r2, r3
 8005bee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	8013      	strh	r3, [r2, #0]
 8005c06:	e01d      	b.n	8005c44 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c54:	4413      	add	r3, r2
 8005c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	011a      	lsls	r2, r3, #4
 8005c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c66:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	891b      	ldrh	r3, [r3, #8]
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c88:	4413      	add	r3, r2
 8005c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	011a      	lsls	r2, r3, #4
 8005c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	895b      	ldrh	r3, [r3, #10]
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005caa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 8093 	bne.w	8005ddc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005cc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01b      	beq.n	8005d0a <USB_ActivateEndpoint+0x52a>
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01b      	beq.n	8005d5a <USB_ActivateEndpoint+0x57a>
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	441a      	add	r2, r3
 8005d44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d70:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d78:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d80:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	441a      	add	r2, r3
 8005d8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]
 8005dda:	e0bc      	b.n	8005f56 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01d      	beq.n	8005e34 <USB_ActivateEndpoint+0x654>
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01d      	beq.n	8005e8c <USB_ActivateEndpoint+0x6ac>
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	78db      	ldrb	r3, [r3, #3]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d024      	beq.n	8005ede <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eaa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005eae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005eb2:	f083 0320 	eor.w	r3, r3, #32
 8005eb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	441a      	add	r2, r3
 8005ec4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]
 8005edc:	e01d      	b.n	8005f1a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	441a      	add	r2, r3
 8005f3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3774      	adds	r7, #116	; 0x74
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b08d      	sub	sp, #52	; 0x34
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	7b1b      	ldrb	r3, [r3, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 808e 	bne.w	8006098 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d044      	beq.n	800600e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	81bb      	strh	r3, [r7, #12]
 8005f92:	89bb      	ldrh	r3, [r7, #12]
 8005f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <USB_DeactivateEndpoint+0x6c>
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb2:	817b      	strh	r3, [r7, #10]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	897b      	ldrh	r3, [r7, #10]
 8005fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fea:	813b      	strh	r3, [r7, #8]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	441a      	add	r2, r3
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]
 800600c:	e192      	b.n	8006334 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	827b      	strh	r3, [r7, #18]
 800601c:	8a7b      	ldrh	r3, [r7, #18]
 800601e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01b      	beq.n	800605e <USB_DeactivateEndpoint+0xf6>
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603c:	823b      	strh	r3, [r7, #16]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	8a3b      	ldrh	r3, [r7, #16]
 800604a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006052:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006074:	81fb      	strh	r3, [r7, #14]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	89fb      	ldrh	r3, [r7, #14]
 8006082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006092:	b29b      	uxth	r3, r3
 8006094:	8013      	strh	r3, [r2, #0]
 8006096:	e14d      	b.n	8006334 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f040 80a5 	bne.w	80061ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	843b      	strh	r3, [r7, #32]
 80060b0:	8c3b      	ldrh	r3, [r7, #32]
 80060b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01b      	beq.n	80060f2 <USB_DeactivateEndpoint+0x18a>
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	83fb      	strh	r3, [r7, #30]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	441a      	add	r2, r3
 80060dc:	8bfb      	ldrh	r3, [r7, #30]
 80060de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	83bb      	strh	r3, [r7, #28]
 8006100:	8bbb      	ldrh	r3, [r7, #28]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01b      	beq.n	8006142 <USB_DeactivateEndpoint+0x1da>
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006120:	837b      	strh	r3, [r7, #26]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	8b7b      	ldrh	r3, [r7, #26]
 800612e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800613e:	b29b      	uxth	r3, r3
 8006140:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006158:	833b      	strh	r3, [r7, #24]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	8b3b      	ldrh	r3, [r7, #24]
 8006166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006176:	b29b      	uxth	r3, r3
 8006178:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006190:	82fb      	strh	r3, [r7, #22]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	441a      	add	r2, r3
 800619c:	8afb      	ldrh	r3, [r7, #22]
 800619e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c8:	82bb      	strh	r3, [r7, #20]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	8abb      	ldrh	r3, [r7, #20]
 80061d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8013      	strh	r3, [r2, #0]
 80061ea:	e0a3      	b.n	8006334 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01b      	beq.n	800623c <USB_DeactivateEndpoint+0x2d4>
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006238:	b29b      	uxth	r3, r3
 800623a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	857b      	strh	r3, [r7, #42]	; 0x2a
 800624a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800624c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01b      	beq.n	800628c <USB_DeactivateEndpoint+0x324>
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	853b      	strh	r3, [r7, #40]	; 0x28
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006288:	b29b      	uxth	r3, r3
 800628a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	441a      	add	r2, r3
 80062ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	847b      	strh	r3, [r7, #34]	; 0x22
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3734      	adds	r7, #52	; 0x34
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b0c2      	sub	sp, #264	; 0x108
 8006346:	af00      	add	r7, sp, #0
 8006348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006350:	6018      	str	r0, [r3, #0]
 8006352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800635c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b01      	cmp	r3, #1
 800636a:	f040 86b7 	bne.w	80070dc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	d908      	bls.n	800639c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800638a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800639a:	e007      	b.n	80063ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	7b1b      	ldrb	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d13a      	bne.n	8006432 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6959      	ldr	r1, [r3, #20]
 80063c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	88da      	ldrh	r2, [r3, #6]
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063e2:	6800      	ldr	r0, [r0, #0]
 80063e4:	f001 fc8d 	bl	8007d02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006402:	b29b      	uxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4413      	add	r3, r2
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	011a      	lsls	r2, r3, #4
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4413      	add	r3, r2
 800641e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	f000 be1f 	b.w	8007070 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	78db      	ldrb	r3, [r3, #3]
 800643e:	2b02      	cmp	r3, #2
 8006440:	f040 8462 	bne.w	8006d08 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	429a      	cmp	r2, r3
 800645e:	f240 83df 	bls.w	8006c20 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006488:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	441a      	add	r2, r3
 80064a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6a1a      	ldr	r2, [r3, #32]
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 81c7 	beq.w	8006892 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	633b      	str	r3, [r7, #48]	; 0x30
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d177      	bne.n	8006610 <USB_EPStartXfer+0x2ce>
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28
 800652c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653a:	b29b      	uxth	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	4413      	add	r3, r2
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
 8006544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	011a      	lsls	r2, r3, #4
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	4413      	add	r3, r2
 8006556:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006566:	b29a      	uxth	r2, r3
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <USB_EPStartXfer+0x248>
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006582:	b29a      	uxth	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	e067      	b.n	800665a <USB_EPStartXfer+0x318>
 800658a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658e:	2b3e      	cmp	r3, #62	; 0x3e
 8006590:	d81c      	bhi.n	80065cc <USB_EPStartXfer+0x28a>
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <USB_EPStartXfer+0x270>
 80065a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065ac:	3301      	adds	r3, #1
 80065ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065bc:	b29b      	uxth	r3, r3
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e046      	b.n	800665a <USB_EPStartXfer+0x318>
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <USB_EPStartXfer+0x2aa>
 80065e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065e6:	3b01      	subs	r3, #1
 80065e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	029b      	lsls	r3, r3, #10
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006608:	b29a      	uxth	r2, r3
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e024      	b.n	800665a <USB_EPStartXfer+0x318>
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d11c      	bne.n	800665a <USB_EPStartXfer+0x318>
 8006620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662e:	b29b      	uxth	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	4413      	add	r3, r2
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
 8006638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	011a      	lsls	r2, r3, #4
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	4413      	add	r3, r2
 800664a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006654:	b29a      	uxth	r2, r3
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800665a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	895b      	ldrh	r3, [r3, #10]
 8006666:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800666a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6959      	ldr	r1, [r3, #20]
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667a:	b29b      	uxth	r3, r3
 800667c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006680:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006684:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006688:	6800      	ldr	r0, [r0, #0]
 800668a:	f001 fb3a 	bl	8007d02 <USB_WritePMA>
            ep->xfer_buff += len;
 800668e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669e:	441a      	add	r2, r3
 80066a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d90f      	bls.n	80066e8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6a1a      	ldr	r2, [r3, #32]
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	621a      	str	r2, [r3, #32]
 80066e6:	e00e      	b.n	8006706 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80066e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80066f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d177      	bne.n	8006806 <USB_EPStartXfer+0x4c4>
 8006716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006730:	b29b      	uxth	r3, r3
 8006732:	461a      	mov	r2, r3
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	4413      	add	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	011a      	lsls	r2, r3, #4
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	4413      	add	r3, r2
 800674c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800675c:	b29a      	uxth	r2, r3
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <USB_EPStartXfer+0x43e>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006778:	b29a      	uxth	r2, r3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	801a      	strh	r2, [r3, #0]
 800677e:	e06d      	b.n	800685c <USB_EPStartXfer+0x51a>
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006784:	2b3e      	cmp	r3, #62	; 0x3e
 8006786:	d81c      	bhi.n	80067c2 <USB_EPStartXfer+0x480>
 8006788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <USB_EPStartXfer+0x466>
 800679e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a2:	3301      	adds	r3, #1
 80067a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	4313      	orrs	r3, r2
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	e04c      	b.n	800685c <USB_EPStartXfer+0x51a>
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <USB_EPStartXfer+0x4a0>
 80067d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067dc:	3b01      	subs	r3, #1
 80067de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	4313      	orrs	r3, r2
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fe:	b29a      	uxth	r2, r3
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e02a      	b.n	800685c <USB_EPStartXfer+0x51a>
 8006806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d122      	bne.n	800685c <USB_EPStartXfer+0x51a>
 8006816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006830:	b29b      	uxth	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	4413      	add	r3, r2
 8006838:	623b      	str	r3, [r7, #32]
 800683a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	011a      	lsls	r2, r3, #4
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	4413      	add	r3, r2
 800684c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006856:	b29a      	uxth	r2, r3
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	891b      	ldrh	r3, [r3, #8]
 8006868:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800686c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6959      	ldr	r1, [r3, #20]
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687c:	b29b      	uxth	r3, r3
 800687e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006882:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006886:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800688a:	6800      	ldr	r0, [r0, #0]
 800688c:	f001 fa39 	bl	8007d02 <USB_WritePMA>
 8006890:	e3ee      	b.n	8007070 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d177      	bne.n	8006992 <USB_EPStartXfer+0x650>
 80068a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068bc:	b29b      	uxth	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c2:	4413      	add	r3, r2
 80068c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80068c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	011a      	lsls	r2, r3, #4
 80068d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068dc:	647b      	str	r3, [r7, #68]	; 0x44
 80068de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ec:	801a      	strh	r2, [r3, #0]
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <USB_EPStartXfer+0x5ca>
 80068f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006904:	b29a      	uxth	r2, r3
 8006906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e06d      	b.n	80069e8 <USB_EPStartXfer+0x6a6>
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006910:	2b3e      	cmp	r3, #62	; 0x3e
 8006912:	d81c      	bhi.n	800694e <USB_EPStartXfer+0x60c>
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006918:	085b      	lsrs	r3, r3, #1
 800691a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <USB_EPStartXfer+0x5f2>
 800692a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800692e:	3301      	adds	r3, #1
 8006930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29a      	uxth	r2, r3
 800693a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800693e:	b29b      	uxth	r3, r3
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	b29b      	uxth	r3, r3
 8006944:	4313      	orrs	r3, r2
 8006946:	b29a      	uxth	r2, r3
 8006948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e04c      	b.n	80069e8 <USB_EPStartXfer+0x6a6>
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <USB_EPStartXfer+0x62c>
 8006964:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006968:	3b01      	subs	r3, #1
 800696a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800696e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29a      	uxth	r2, r3
 8006974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006978:	b29b      	uxth	r3, r3
 800697a:	029b      	lsls	r3, r3, #10
 800697c:	b29b      	uxth	r3, r3
 800697e:	4313      	orrs	r3, r2
 8006980:	b29b      	uxth	r3, r3
 8006982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698a:	b29a      	uxth	r2, r3
 800698c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800698e:	801a      	strh	r2, [r3, #0]
 8006990:	e02a      	b.n	80069e8 <USB_EPStartXfer+0x6a6>
 8006992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d122      	bne.n	80069e8 <USB_EPStartXfer+0x6a6>
 80069a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	653b      	str	r3, [r7, #80]	; 0x50
 80069ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069bc:	b29b      	uxth	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c2:	4413      	add	r3, r2
 80069c4:	653b      	str	r3, [r7, #80]	; 0x50
 80069c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	011a      	lsls	r2, r3, #4
 80069d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d6:	4413      	add	r3, r2
 80069d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	891b      	ldrh	r3, [r3, #8]
 80069f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6959      	ldr	r1, [r3, #20]
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a16:	6800      	ldr	r0, [r0, #0]
 8006a18:	f001 f973 	bl	8007d02 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2c:	441a      	add	r2, r3
 8006a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d90f      	bls.n	8006a76 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a66:	1ad2      	subs	r2, r2, r3
 8006a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	621a      	str	r2, [r3, #32]
 8006a74:	e00e      	b.n	8006a94 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2200      	movs	r2, #0
 8006a92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d177      	bne.n	8006ba0 <USB_EPStartXfer+0x85e>
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	4413      	add	r3, r2
 8006ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	011a      	lsls	r2, r3, #4
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
 8006aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <USB_EPStartXfer+0x7d8>
 8006b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	e067      	b.n	8006bea <USB_EPStartXfer+0x8a8>
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b20:	d81c      	bhi.n	8006b5c <USB_EPStartXfer+0x81a>
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <USB_EPStartXfer+0x800>
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	029b      	lsls	r3, r3, #10
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	e046      	b.n	8006bea <USB_EPStartXfer+0x8a8>
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <USB_EPStartXfer+0x83a>
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b76:	3b01      	subs	r3, #1
 8006b78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	029b      	lsls	r3, r3, #10
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	801a      	strh	r2, [r3, #0]
 8006b9e:	e024      	b.n	8006bea <USB_EPStartXfer+0x8a8>
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d11c      	bne.n	8006bea <USB_EPStartXfer+0x8a8>
 8006bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc4:	4413      	add	r3, r2
 8006bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	011a      	lsls	r2, r3, #4
 8006bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd8:	4413      	add	r3, r2
 8006bda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	895b      	ldrh	r3, [r3, #10]
 8006bf6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6959      	ldr	r1, [r3, #20]
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c18:	6800      	ldr	r0, [r0, #0]
 8006c1a:	f001 f872 	bl	8007d02 <USB_WritePMA>
 8006c1e:	e227      	b.n	8007070 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	441a      	add	r2, r3
 8006c74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cac:	4413      	add	r3, r2
 8006cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	011a      	lsls	r2, r3, #4
 8006cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	891b      	ldrh	r3, [r3, #8]
 8006cde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6959      	ldr	r1, [r3, #20]
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cf8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cfc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d00:	6800      	ldr	r0, [r0, #0]
 8006d02:	f000 fffe 	bl	8007d02 <USB_WritePMA>
 8006d06:	e1b3      	b.n	8007070 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d18:	1ad2      	subs	r2, r2, r3
 8006d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80c6 	beq.w	8006eda <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	673b      	str	r3, [r7, #112]	; 0x70
 8006d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d177      	bne.n	8006e5a <USB_EPStartXfer+0xb18>
 8006d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d8a:	4413      	add	r3, r2
 8006d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	011a      	lsls	r2, r3, #4
 8006d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d9e:	4413      	add	r3, r2
 8006da0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006da4:	667b      	str	r3, [r7, #100]	; 0x64
 8006da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db4:	801a      	strh	r2, [r3, #0]
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <USB_EPStartXfer+0xa92>
 8006dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e067      	b.n	8006ea4 <USB_EPStartXfer+0xb62>
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8006dda:	d81c      	bhi.n	8006e16 <USB_EPStartXfer+0xad4>
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de0:	085b      	lsrs	r3, r3, #1
 8006de2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d004      	beq.n	8006dfc <USB_EPStartXfer+0xaba>
 8006df2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006df6:	3301      	adds	r3, #1
 8006df8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	029b      	lsls	r3, r3, #10
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	e046      	b.n	8006ea4 <USB_EPStartXfer+0xb62>
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <USB_EPStartXfer+0xaf4>
 8006e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e30:	3b01      	subs	r3, #1
 8006e32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	029b      	lsls	r3, r3, #10
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4313      	orrs	r3, r2
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e56:	801a      	strh	r2, [r3, #0]
 8006e58:	e024      	b.n	8006ea4 <USB_EPStartXfer+0xb62>
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d11c      	bne.n	8006ea4 <USB_EPStartXfer+0xb62>
 8006e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e7e:	4413      	add	r3, r2
 8006e80:	673b      	str	r3, [r7, #112]	; 0x70
 8006e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	011a      	lsls	r2, r3, #4
 8006e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e92:	4413      	add	r3, r2
 8006e94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	895b      	ldrh	r3, [r3, #10]
 8006eb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6959      	ldr	r1, [r3, #20]
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006eca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ece:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	f000 ff15 	bl	8007d02 <USB_WritePMA>
 8006ed8:	e0ca      	b.n	8007070 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d177      	bne.n	8006fda <USB_EPStartXfer+0xc98>
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f0a:	4413      	add	r3, r2
 8006f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	011a      	lsls	r2, r3, #4
 8006f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f24:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <USB_EPStartXfer+0xc12>
 8006f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e073      	b.n	800703c <USB_EPStartXfer+0xcfa>
 8006f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f58:	2b3e      	cmp	r3, #62	; 0x3e
 8006f5a:	d81c      	bhi.n	8006f96 <USB_EPStartXfer+0xc54>
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <USB_EPStartXfer+0xc3a>
 8006f72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f76:	3301      	adds	r3, #1
 8006f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	029b      	lsls	r3, r3, #10
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f92:	801a      	strh	r2, [r3, #0]
 8006f94:	e052      	b.n	800703c <USB_EPStartXfer+0xcfa>
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d104      	bne.n	8006fb6 <USB_EPStartXfer+0xc74>
 8006fac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	e030      	b.n	800703c <USB_EPStartXfer+0xcfa>
 8006fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d128      	bne.n	800703c <USB_EPStartXfer+0xcfa>
 8006fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007006:	b29b      	uxth	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800700e:	4413      	add	r3, r2
 8007010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	011a      	lsls	r2, r3, #4
 8007022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007026:	4413      	add	r3, r2
 8007028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800702c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007034:	b29a      	uxth	r2, r3
 8007036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800703a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800703c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	891b      	ldrh	r3, [r3, #8]
 8007048:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800704c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6959      	ldr	r1, [r3, #20]
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705c:	b29b      	uxth	r3, r3
 800705e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007062:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007066:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	f000 fe49 	bl	8007d02 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	817b      	strh	r3, [r7, #10]
 8007098:	897b      	ldrh	r3, [r7, #10]
 800709a:	f083 0310 	eor.w	r3, r3, #16
 800709e:	817b      	strh	r3, [r7, #10]
 80070a0:	897b      	ldrh	r3, [r7, #10]
 80070a2:	f083 0320 	eor.w	r3, r3, #32
 80070a6:	817b      	strh	r3, [r7, #10]
 80070a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	441a      	add	r2, r3
 80070c2:	897b      	ldrh	r3, [r7, #10]
 80070c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]
 80070d8:	f000 bcdf 	b.w	8007a9a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	7b1b      	ldrb	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 80bc 	bne.w	8007266 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80070ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	429a      	cmp	r2, r3
 8007108:	d917      	bls.n	800713a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800710a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800711a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712a:	1ad2      	subs	r2, r2, r3
 800712c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	619a      	str	r2, [r3, #24]
 8007138:	e00e      	b.n	8007158 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800714a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2200      	movs	r2, #0
 8007156:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007174:	b29b      	uxth	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800717c:	4413      	add	r3, r2
 800717e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	011a      	lsls	r2, r3, #4
 8007190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007194:	4413      	add	r3, r2
 8007196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800719a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800719e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071b0:	801a      	strh	r2, [r3, #0]
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10d      	bne.n	80071d6 <USB_EPStartXfer+0xe94>
 80071ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	f000 bc28 	b.w	8007a26 <USB_EPStartXfer+0x16e4>
 80071d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071da:	2b3e      	cmp	r3, #62	; 0x3e
 80071dc:	d81f      	bhi.n	800721e <USB_EPStartXfer+0xedc>
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <USB_EPStartXfer+0xebc>
 80071f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071f8:	3301      	adds	r3, #1
 80071fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29a      	uxth	r2, r3
 8007206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800720a:	b29b      	uxth	r3, r3
 800720c:	029b      	lsls	r3, r3, #10
 800720e:	b29b      	uxth	r3, r3
 8007210:	4313      	orrs	r3, r2
 8007212:	b29a      	uxth	r2, r3
 8007214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	f000 bc04 	b.w	8007a26 <USB_EPStartXfer+0x16e4>
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <USB_EPStartXfer+0xefc>
 8007234:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007238:	3b01      	subs	r3, #1
 800723a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800723e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29a      	uxth	r2, r3
 8007246:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800724a:	b29b      	uxth	r3, r3
 800724c:	029b      	lsls	r3, r3, #10
 800724e:	b29b      	uxth	r3, r3
 8007250:	4313      	orrs	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725c:	b29a      	uxth	r2, r3
 800725e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e3df      	b.n	8007a26 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	78db      	ldrb	r3, [r3, #3]
 8007272:	2b02      	cmp	r3, #2
 8007274:	f040 8218 	bne.w	80076a8 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 809d 	bne.w	80073c4 <USB_EPStartXfer+0x1082>
 800728a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ae:	4413      	add	r3, r2
 80072b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	011a      	lsls	r2, r3, #4
 80072c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072c6:	4413      	add	r3, r2
 80072c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072dc:	b29a      	uxth	r2, r3
 80072de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10c      	bne.n	800730e <USB_EPStartXfer+0xfcc>
 80072f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e08f      	b.n	800742e <USB_EPStartXfer+0x10ec>
 800730e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b3e      	cmp	r3, #62	; 0x3e
 800731c:	d826      	bhi.n	800736c <USB_EPStartXfer+0x102a>
 800731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <USB_EPStartXfer+0x100c>
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007348:	3301      	adds	r3, #1
 800734a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800734e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29a      	uxth	r2, r3
 8007356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735a:	b29b      	uxth	r3, r3
 800735c:	029b      	lsls	r3, r3, #10
 800735e:	b29b      	uxth	r3, r3
 8007360:	4313      	orrs	r3, r2
 8007362:	b29a      	uxth	r2, r3
 8007364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e060      	b.n	800742e <USB_EPStartXfer+0x10ec>
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800737e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	2b00      	cmp	r3, #0
 8007390:	d104      	bne.n	800739c <USB_EPStartXfer+0x105a>
 8007392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007396:	3b01      	subs	r3, #1
 8007398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800739c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	029b      	lsls	r3, r3, #10
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	4313      	orrs	r3, r2
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	e034      	b.n	800742e <USB_EPStartXfer+0x10ec>
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d12c      	bne.n	800742e <USB_EPStartXfer+0x10ec>
 80073d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073f8:	4413      	add	r3, r2
 80073fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	011a      	lsls	r2, r3, #4
 800740c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007410:	4413      	add	r3, r2
 8007412:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	b29a      	uxth	r2, r3
 8007428:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 809d 	bne.w	8007588 <USB_EPStartXfer+0x1246>
 800744e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800745c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007472:	4413      	add	r3, r2
 8007474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	011a      	lsls	r2, r3, #4
 8007486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800748a:	4413      	add	r3, r2
 800748c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074a6:	801a      	strh	r2, [r3, #0]
 80074a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10c      	bne.n	80074d2 <USB_EPStartXfer+0x1190>
 80074b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ce:	801a      	strh	r2, [r3, #0]
 80074d0:	e088      	b.n	80075e4 <USB_EPStartXfer+0x12a2>
 80074d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b3e      	cmp	r3, #62	; 0x3e
 80074e0:	d826      	bhi.n	8007530 <USB_EPStartXfer+0x11ee>
 80074e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <USB_EPStartXfer+0x11d0>
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	3301      	adds	r3, #1
 800750e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29a      	uxth	r2, r3
 800751a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751e:	b29b      	uxth	r3, r3
 8007520:	029b      	lsls	r3, r3, #10
 8007522:	b29b      	uxth	r3, r3
 8007524:	4313      	orrs	r3, r2
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	e059      	b.n	80075e4 <USB_EPStartXfer+0x12a2>
 8007530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f003 031f 	and.w	r3, r3, #31
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <USB_EPStartXfer+0x121e>
 8007556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755a:	3b01      	subs	r3, #1
 800755c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29a      	uxth	r2, r3
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756c:	b29b      	uxth	r3, r3
 800756e:	029b      	lsls	r3, r3, #10
 8007570:	b29b      	uxth	r3, r3
 8007572:	4313      	orrs	r3, r2
 8007574:	b29b      	uxth	r3, r3
 8007576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757e:	b29a      	uxth	r2, r3
 8007580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	e02d      	b.n	80075e4 <USB_EPStartXfer+0x12a2>
 8007588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d125      	bne.n	80075e4 <USB_EPStartXfer+0x12a2>
 8007598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075ae:	4413      	add	r3, r2
 80075b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	011a      	lsls	r2, r3, #4
 80075c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075c6:	4413      	add	r3, r2
 80075c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80075e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8218 	beq.w	8007a26 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007616:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800761a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <USB_EPStartXfer+0x12ec>
 8007622:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10d      	bne.n	800764a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800762e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007636:	2b00      	cmp	r3, #0
 8007638:	f040 81f5 	bne.w	8007a26 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800763c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	f040 81ee 	bne.w	8007a26 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800764a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	441a      	add	r2, r3
 800768e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	8013      	strh	r3, [r2, #0]
 80076a6:	e1be      	b.n	8007a26 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80076a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	78db      	ldrb	r3, [r3, #3]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	f040 81b4 	bne.w	8007a22 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80076ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d917      	bls.n	8007706 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80076d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80076e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	619a      	str	r2, [r3, #24]
 8007704:	e00e      	b.n	8007724 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2200      	movs	r2, #0
 8007722:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b00      	cmp	r3, #0
 8007732:	f040 8085 	bne.w	8007840 <USB_EPStartXfer+0x14fe>
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007752:	b29b      	uxth	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800775a:	4413      	add	r3, r2
 800775c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	011a      	lsls	r2, r3, #4
 800776e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007772:	4413      	add	r3, r2
 8007774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800777c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007788:	b29a      	uxth	r2, r3
 800778a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10c      	bne.n	80077b2 <USB_EPStartXfer+0x1470>
 8007798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	e077      	b.n	80078a2 <USB_EPStartXfer+0x1560>
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b6:	2b3e      	cmp	r3, #62	; 0x3e
 80077b8:	d81e      	bhi.n	80077f8 <USB_EPStartXfer+0x14b6>
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <USB_EPStartXfer+0x1498>
 80077d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d4:	3301      	adds	r3, #1
 80077d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	029b      	lsls	r3, r3, #10
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	4313      	orrs	r3, r2
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e054      	b.n	80078a2 <USB_EPStartXfer+0x1560>
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	2b00      	cmp	r3, #0
 800780c:	d104      	bne.n	8007818 <USB_EPStartXfer+0x14d6>
 800780e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007812:	3b01      	subs	r3, #1
 8007814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007824:	b29b      	uxth	r3, r3
 8007826:	029b      	lsls	r3, r3, #10
 8007828:	b29b      	uxth	r3, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	e030      	b.n	80078a2 <USB_EPStartXfer+0x1560>
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d128      	bne.n	80078a2 <USB_EPStartXfer+0x1560>
 8007850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800785e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800786c:	b29b      	uxth	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007874:	4413      	add	r3, r2
 8007876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800787a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	011a      	lsls	r2, r3, #4
 8007888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800788c:	4413      	add	r3, r2
 800788e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007892:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 8085 	bne.w	80079cc <USB_EPStartXfer+0x168a>
 80078c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80078d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078de:	b29b      	uxth	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078e6:	4413      	add	r3, r2
 80078e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80078ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	011a      	lsls	r2, r3, #4
 80078fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078fe:	4413      	add	r3, r2
 8007900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007914:	b29a      	uxth	r2, r3
 8007916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800791a:	801a      	strh	r2, [r3, #0]
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10c      	bne.n	800793e <USB_EPStartXfer+0x15fc>
 8007924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800793a:	801a      	strh	r2, [r3, #0]
 800793c:	e073      	b.n	8007a26 <USB_EPStartXfer+0x16e4>
 800793e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007942:	2b3e      	cmp	r3, #62	; 0x3e
 8007944:	d81e      	bhi.n	8007984 <USB_EPStartXfer+0x1642>
 8007946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <USB_EPStartXfer+0x1624>
 800795c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007960:	3301      	adds	r3, #1
 8007962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b29a      	uxth	r2, r3
 800796e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007972:	b29b      	uxth	r3, r3
 8007974:	029b      	lsls	r3, r3, #10
 8007976:	b29b      	uxth	r3, r3
 8007978:	4313      	orrs	r3, r2
 800797a:	b29a      	uxth	r2, r3
 800797c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	e050      	b.n	8007a26 <USB_EPStartXfer+0x16e4>
 8007984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <USB_EPStartXfer+0x1662>
 800799a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800799e:	3b01      	subs	r3, #1
 80079a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	029b      	lsls	r3, r3, #10
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	e02c      	b.n	8007a26 <USB_EPStartXfer+0x16e4>
 80079cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d124      	bne.n	8007a26 <USB_EPStartXfer+0x16e4>
 80079dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079f2:	4413      	add	r3, r2
 80079f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	011a      	lsls	r2, r3, #4
 8007a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	e001      	b.n	8007a26 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e03a      	b.n	8007a9c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a64:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	441a      	add	r2, r3
 8007a82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d020      	beq.n	8007afa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ace:	81bb      	strh	r3, [r7, #12]
 8007ad0:	89bb      	ldrh	r3, [r7, #12]
 8007ad2:	f083 0310 	eor.w	r3, r3, #16
 8007ad6:	81bb      	strh	r3, [r7, #12]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	441a      	add	r2, r3
 8007ae2:	89bb      	ldrh	r3, [r7, #12]
 8007ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	8013      	strh	r3, [r2, #0]
 8007af8:	e01f      	b.n	8007b3a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b10:	81fb      	strh	r3, [r7, #14]
 8007b12:	89fb      	ldrh	r3, [r7, #14]
 8007b14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b18:	81fb      	strh	r3, [r7, #14]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	441a      	add	r2, r3
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	7b1b      	ldrb	r3, [r3, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f040 809d 	bne.w	8007c96 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d04c      	beq.n	8007bfe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	823b      	strh	r3, [r7, #16]
 8007b72:	8a3b      	ldrh	r3, [r7, #16]
 8007b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01b      	beq.n	8007bb4 <USB_EPClearStall+0x6c>
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b92:	81fb      	strh	r3, [r7, #14]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	441a      	add	r2, r3
 8007b9e:	89fb      	ldrh	r3, [r7, #14]
 8007ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	78db      	ldrb	r3, [r3, #3]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d06c      	beq.n	8007c96 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd2:	81bb      	strh	r3, [r7, #12]
 8007bd4:	89bb      	ldrh	r3, [r7, #12]
 8007bd6:	f083 0320 	eor.w	r3, r3, #32
 8007bda:	81bb      	strh	r3, [r7, #12]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	89bb      	ldrh	r3, [r7, #12]
 8007be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	8013      	strh	r3, [r2, #0]
 8007bfc:	e04b      	b.n	8007c96 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	82fb      	strh	r3, [r7, #22]
 8007c0c:	8afb      	ldrh	r3, [r7, #22]
 8007c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d01b      	beq.n	8007c4e <USB_EPClearStall+0x106>
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2c:	82bb      	strh	r3, [r7, #20]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	441a      	add	r2, r3
 8007c38:	8abb      	ldrh	r3, [r7, #20]
 8007c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c64:	827b      	strh	r3, [r7, #18]
 8007c66:	8a7b      	ldrh	r3, [r7, #18]
 8007c68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c6c:	827b      	strh	r3, [r7, #18]
 8007c6e:	8a7b      	ldrh	r3, [r7, #18]
 8007c70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c74:	827b      	strh	r3, [r7, #18]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	8a7b      	ldrh	r3, [r7, #18]
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d103      	bne.n	8007cbe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2280      	movs	r2, #128	; 0x80
 8007cba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b08b      	sub	sp, #44	; 0x2c
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	461a      	mov	r2, r3
 8007d10:	460b      	mov	r3, r1
 8007d12:	80fb      	strh	r3, [r7, #6]
 8007d14:	4613      	mov	r3, r2
 8007d16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d18:	88bb      	ldrh	r3, [r7, #4]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	005a      	lsls	r2, r3, #1
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d34:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3a:	e01e      	b.n	8007d7a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	3301      	adds	r3, #1
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	b21a      	sxth	r2, r3
 8007d4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	b21b      	sxth	r3, r3
 8007d54:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	8a7a      	ldrh	r2, [r7, #18]
 8007d5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	3302      	adds	r3, #2
 8007d60:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	3302      	adds	r3, #2
 8007d66:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	3301      	adds	r3, #1
 8007d72:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	3b01      	subs	r3, #1
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1dd      	bne.n	8007d3c <USB_WritePMA+0x3a>
  }
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	372c      	adds	r7, #44	; 0x2c
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b08b      	sub	sp, #44	; 0x2c
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	80fb      	strh	r3, [r7, #6]
 8007da0:	4613      	mov	r3, r2
 8007da2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007da4:	88bb      	ldrh	r3, [r7, #4]
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007db4:	88fb      	ldrh	r3, [r7, #6]
 8007db6:	005a      	lsls	r2, r3, #1
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dc0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc6:	e01b      	b.n	8007e00 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	3301      	adds	r3, #1
 8007de2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3301      	adds	r3, #1
 8007df2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	3302      	adds	r3, #2
 8007df8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e0      	bne.n	8007dc8 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e06:	88bb      	ldrh	r3, [r7, #4]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	701a      	strb	r2, [r3, #0]
  }
}
 8007e22:	bf00      	nop
 8007e24:	372c      	adds	r7, #44	; 0x2c
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7c1b      	ldrb	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d115      	bne.n	8007e72 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	2181      	movs	r1, #129	; 0x81
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 feb9 	bl	8009bc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e5e:	2202      	movs	r2, #2
 8007e60:	2101      	movs	r1, #1
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 feaf 	bl	8009bc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007e70:	e012      	b.n	8007e98 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e72:	2340      	movs	r3, #64	; 0x40
 8007e74:	2202      	movs	r2, #2
 8007e76:	2181      	movs	r1, #129	; 0x81
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fea4 	bl	8009bc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e84:	2340      	movs	r3, #64	; 0x40
 8007e86:	2202      	movs	r2, #2
 8007e88:	2101      	movs	r1, #1
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fe9b 	bl	8009bc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e98:	2308      	movs	r3, #8
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	2182      	movs	r1, #130	; 0x82
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fe91 	bl	8009bc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007eaa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007eae:	f001 ffb1 	bl	8009e14 <USBD_static_malloc>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
 8007ec8:	e026      	b.n	8007f18 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	7c1b      	ldrb	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d109      	bne.n	8007f08 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007efe:	2101      	movs	r1, #1
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 ff51 	bl	8009da8 <USBD_LL_PrepareReceive>
 8007f06:	e007      	b.n	8007f18 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f0e:	2340      	movs	r3, #64	; 0x40
 8007f10:	2101      	movs	r1, #1
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 ff48 	bl	8009da8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f32:	2181      	movs	r1, #129	; 0x81
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fe6c 	bl	8009c12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f40:	2101      	movs	r1, #1
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fe65 	bl	8009c12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f50:	2182      	movs	r1, #130	; 0x82
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fe5d 	bl	8009c12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00e      	beq.n	8007f86 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 ff59 	bl	8009e30 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d039      	beq.n	800802e <USBD_CDC_Setup+0x9e>
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d17f      	bne.n	80080be <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d029      	beq.n	800801a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b25b      	sxtb	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da11      	bge.n	8007ff4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007fdc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	88d2      	ldrh	r2, [r2, #6]
 8007fe2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fe4:	6939      	ldr	r1, [r7, #16]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fa14 	bl	800941a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007ff2:	e06b      	b.n	80080cc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	785a      	ldrb	r2, [r3, #1]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	b2da      	uxtb	r2, r3
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800800a:	6939      	ldr	r1, [r7, #16]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	88db      	ldrh	r3, [r3, #6]
 8008010:	461a      	mov	r2, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fa2f 	bl	8009476 <USBD_CtlPrepareRx>
      break;
 8008018:	e058      	b.n	80080cc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	7850      	ldrb	r0, [r2, #1]
 8008026:	2200      	movs	r2, #0
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	4798      	blx	r3
      break;
 800802c:	e04e      	b.n	80080cc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	2b0b      	cmp	r3, #11
 8008034:	d02e      	beq.n	8008094 <USBD_CDC_Setup+0x104>
 8008036:	2b0b      	cmp	r3, #11
 8008038:	dc38      	bgt.n	80080ac <USBD_CDC_Setup+0x11c>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <USBD_CDC_Setup+0xb4>
 800803e:	2b0a      	cmp	r3, #10
 8008040:	d014      	beq.n	800806c <USBD_CDC_Setup+0xdc>
 8008042:	e033      	b.n	80080ac <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804a:	2b03      	cmp	r3, #3
 800804c:	d107      	bne.n	800805e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800804e:	f107 030c 	add.w	r3, r7, #12
 8008052:	2202      	movs	r2, #2
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 f9df 	bl	800941a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800805c:	e02e      	b.n	80080bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 f96f 	bl	8009344 <USBD_CtlError>
            ret = USBD_FAIL;
 8008066:	2302      	movs	r3, #2
 8008068:	75fb      	strb	r3, [r7, #23]
          break;
 800806a:	e027      	b.n	80080bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008072:	2b03      	cmp	r3, #3
 8008074:	d107      	bne.n	8008086 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008076:	f107 030f 	add.w	r3, r7, #15
 800807a:	2201      	movs	r2, #1
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 f9cb 	bl	800941a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008084:	e01a      	b.n	80080bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 f95b 	bl	8009344 <USBD_CtlError>
            ret = USBD_FAIL;
 800808e:	2302      	movs	r3, #2
 8008090:	75fb      	strb	r3, [r7, #23]
          break;
 8008092:	e013      	b.n	80080bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809a:	2b03      	cmp	r3, #3
 800809c:	d00d      	beq.n	80080ba <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 f94f 	bl	8009344 <USBD_CtlError>
            ret = USBD_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080aa:	e006      	b.n	80080ba <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 f948 	bl	8009344 <USBD_CtlError>
          ret = USBD_FAIL;
 80080b4:	2302      	movs	r3, #2
 80080b6:	75fb      	strb	r3, [r7, #23]
          break;
 80080b8:	e000      	b.n	80080bc <USBD_CDC_Setup+0x12c>
          break;
 80080ba:	bf00      	nop
      }
      break;
 80080bc:	e006      	b.n	80080cc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f93f 	bl	8009344 <USBD_CtlError>
      ret = USBD_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ca:	bf00      	nop
  }

  return ret;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d03a      	beq.n	8008172 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	331c      	adds	r3, #28
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d029      	beq.n	8008166 <USBD_CDC_DataIn+0x90>
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	331c      	adds	r3, #28
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	78f9      	ldrb	r1, [r7, #3]
 8008126:	68b8      	ldr	r0, [r7, #8]
 8008128:	460b      	mov	r3, r1
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	4403      	add	r3, r0
 8008132:	3320      	adds	r3, #32
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	fbb2 f1f3 	udiv	r1, r2, r3
 800813a:	fb01 f303 	mul.w	r3, r1, r3
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d110      	bne.n	8008166 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	331c      	adds	r3, #28
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008158:	78f9      	ldrb	r1, [r7, #3]
 800815a:	2300      	movs	r3, #0
 800815c:	2200      	movs	r2, #0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fdff 	bl	8009d62 <USBD_LL_Transmit>
 8008164:	e003      	b.n	800816e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	e000      	b.n	8008174 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008172:	2302      	movs	r3, #2
  }
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fe2a 	bl	8009dee <USBD_LL_GetRxDataSize>
 800819a:	4602      	mov	r2, r0
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081c0:	4611      	mov	r1, r2
 80081c2:	4798      	blx	r3

    return USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e000      	b.n	80081ca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80081c8:	2302      	movs	r3, #2
  }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d015      	beq.n	8008218 <USBD_CDC_EP0_RxReady+0x46>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081f2:	2bff      	cmp	r3, #255	; 0xff
 80081f4:	d010      	beq.n	8008218 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008204:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800820c:	b292      	uxth	r2, r2
 800820e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	22ff      	movs	r2, #255	; 0xff
 8008214:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2243      	movs	r2, #67	; 0x43
 8008230:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008232:	4b03      	ldr	r3, [pc, #12]	; (8008240 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	20000094 	.word	0x20000094

08008244 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2243      	movs	r2, #67	; 0x43
 8008250:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008252:	4b03      	ldr	r3, [pc, #12]	; (8008260 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	20000050 	.word	0x20000050

08008264 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2243      	movs	r2, #67	; 0x43
 8008270:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008272:	4b03      	ldr	r3, [pc, #12]	; (8008280 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	200000d8 	.word	0x200000d8

08008284 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	220a      	movs	r2, #10
 8008290:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008292:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	2000000c 	.word	0x2000000c

080082a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80082ae:	2302      	movs	r3, #2
 80082b0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b087      	sub	sp, #28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	4613      	mov	r3, r2
 80082de:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082f0:	88fa      	ldrh	r2, [r7, #6]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008306:	b480      	push	{r7}
 8008308:	b085      	sub	sp, #20
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008316:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01c      	beq.n	8008382 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800834e:	2b00      	cmp	r3, #0
 8008350:	d115      	bne.n	800837e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008370:	b29b      	uxth	r3, r3
 8008372:	2181      	movs	r1, #129	; 0x81
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fcf4 	bl	8009d62 <USBD_LL_Transmit>

      return USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	e002      	b.n	8008384 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008382:	2302      	movs	r3, #2
  }
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d017      	beq.n	80083d6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7c1b      	ldrb	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d109      	bne.n	80083c2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b8:	2101      	movs	r1, #1
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fcf4 	bl	8009da8 <USBD_LL_PrepareReceive>
 80083c0:	e007      	b.n	80083d2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	2101      	movs	r1, #1
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 fceb 	bl	8009da8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e000      	b.n	80083d8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80083d6:	2302      	movs	r3, #2
  }
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083f4:	2302      	movs	r3, #2
 80083f6:	e01a      	b.n	800842e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	79fa      	ldrb	r2, [r7, #7]
 8008424:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f001 fb58 	bl	8009adc <USBD_LL_Init>

  return USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008436:	b480      	push	{r7}
 8008438:	b085      	sub	sp, #20
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d006      	beq.n	8008458 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
 8008456:	e001      	b.n	800845c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008458:	2302      	movs	r3, #2
 800845a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 fb8c 	bl	8009b90 <USBD_LL_Start>

  return USBD_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084a4:	2302      	movs	r3, #2
 80084a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00c      	beq.n	80084cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	4611      	mov	r1, r2
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	78fa      	ldrb	r2, [r7, #3]
 80084ec:	4611      	mov	r1, r2
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	4798      	blx	r3

  return USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fedb 	bl	80092ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008522:	461a      	mov	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008530:	f003 031f 	and.w	r3, r3, #31
 8008534:	2b02      	cmp	r3, #2
 8008536:	d016      	beq.n	8008566 <USBD_LL_SetupStage+0x6a>
 8008538:	2b02      	cmp	r3, #2
 800853a:	d81c      	bhi.n	8008576 <USBD_LL_SetupStage+0x7a>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <USBD_LL_SetupStage+0x4a>
 8008540:	2b01      	cmp	r3, #1
 8008542:	d008      	beq.n	8008556 <USBD_LL_SetupStage+0x5a>
 8008544:	e017      	b.n	8008576 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f9ce 	bl	80088f0 <USBD_StdDevReq>
      break;
 8008554:	e01a      	b.n	800858c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa30 	bl	80089c4 <USBD_StdItfReq>
      break;
 8008564:	e012      	b.n	800858c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa70 	bl	8008a54 <USBD_StdEPReq>
      break;
 8008574:	e00a      	b.n	800858c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800857c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008580:	b2db      	uxtb	r3, r3
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 fb63 	bl	8009c50 <USBD_LL_StallEP>
      break;
 800858a:	bf00      	nop
  }

  return USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	460b      	mov	r3, r1
 80085a0:	607a      	str	r2, [r7, #4]
 80085a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085a4:	7afb      	ldrb	r3, [r7, #11]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d14b      	bne.n	8008642 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d134      	bne.n	8008626 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d919      	bls.n	80085fc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	1ad2      	subs	r2, r2, r3
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085de:	429a      	cmp	r2, r3
 80085e0:	d203      	bcs.n	80085ea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	e002      	b.n	80085f0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	461a      	mov	r2, r3
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 ff5c 	bl	80094b2 <USBD_CtlContinueRx>
 80085fa:	e038      	b.n	800866e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800860e:	2b03      	cmp	r3, #3
 8008610:	d105      	bne.n	800861e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 ff59 	bl	80094d6 <USBD_CtlSendStatus>
 8008624:	e023      	b.n	800866e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800862c:	2b05      	cmp	r3, #5
 800862e:	d11e      	bne.n	800866e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008638:	2100      	movs	r1, #0
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f001 fb08 	bl	8009c50 <USBD_LL_StallEP>
 8008640:	e015      	b.n	800866e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00d      	beq.n	800866a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008654:	2b03      	cmp	r3, #3
 8008656:	d108      	bne.n	800866a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	7afa      	ldrb	r2, [r7, #11]
 8008662:	4611      	mov	r1, r2
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	4798      	blx	r3
 8008668:	e001      	b.n	800866e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800866a:	2302      	movs	r3, #2
 800866c:	e000      	b.n	8008670 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	460b      	mov	r3, r1
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008686:	7afb      	ldrb	r3, [r7, #11]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d17f      	bne.n	800878c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3314      	adds	r3, #20
 8008690:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008698:	2b02      	cmp	r3, #2
 800869a:	d15c      	bne.n	8008756 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d915      	bls.n	80086d4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	1ad2      	subs	r2, r2, r3
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fec6 	bl	8009452 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086c6:	2300      	movs	r3, #0
 80086c8:	2200      	movs	r2, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f001 fb6b 	bl	8009da8 <USBD_LL_PrepareReceive>
 80086d2:	e04e      	b.n	8008772 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	6912      	ldr	r2, [r2, #16]
 80086dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80086e0:	fb01 f202 	mul.w	r2, r1, r2
 80086e4:	1a9b      	subs	r3, r3, r2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d11c      	bne.n	8008724 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	689a      	ldr	r2, [r3, #8]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d316      	bcc.n	8008724 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008700:	429a      	cmp	r2, r3
 8008702:	d20f      	bcs.n	8008724 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008704:	2200      	movs	r2, #0
 8008706:	2100      	movs	r1, #0
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 fea2 	bl	8009452 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008716:	2300      	movs	r3, #0
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f001 fb43 	bl	8009da8 <USBD_LL_PrepareReceive>
 8008722:	e026      	b.n	8008772 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008736:	2b03      	cmp	r3, #3
 8008738:	d105      	bne.n	8008746 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008746:	2180      	movs	r1, #128	; 0x80
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f001 fa81 	bl	8009c50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 fed4 	bl	80094fc <USBD_CtlReceiveStatus>
 8008754:	e00d      	b.n	8008772 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800875c:	2b04      	cmp	r3, #4
 800875e:	d004      	beq.n	800876a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008766:	2b00      	cmp	r3, #0
 8008768:	d103      	bne.n	8008772 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800876a:	2180      	movs	r1, #128	; 0x80
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f001 fa6f 	bl	8009c50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008778:	2b01      	cmp	r3, #1
 800877a:	d11d      	bne.n	80087b8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff fe80 	bl	8008482 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800878a:	e015      	b.n	80087b8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00d      	beq.n	80087b4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d108      	bne.n	80087b4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	7afa      	ldrb	r2, [r7, #11]
 80087ac:	4611      	mov	r1, r2
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	4798      	blx	r3
 80087b2:	e001      	b.n	80087b8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087b4:	2302      	movs	r3, #2
 80087b6:	e000      	b.n	80087ba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087ca:	2340      	movs	r3, #64	; 0x40
 80087cc:	2200      	movs	r2, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 f9f8 	bl	8009bc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2240      	movs	r2, #64	; 0x40
 80087e2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087e6:	2340      	movs	r3, #64	; 0x40
 80087e8:	2200      	movs	r2, #0
 80087ea:	2180      	movs	r1, #128	; 0x80
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 f9ea 	bl	8009bc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2240      	movs	r2, #64	; 0x40
 80087fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6852      	ldr	r2, [r2, #4]
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	4611      	mov	r1, r2
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	4798      	blx	r3
  }

  return USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	78fa      	ldrb	r2, [r7, #3]
 8008854:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2204      	movs	r2, #4
 800887c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	2b04      	cmp	r3, #4
 800889e:	d105      	bne.n	80088ac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d10b      	bne.n	80088e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d005      	beq.n	8008916 <USBD_StdDevReq+0x26>
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d84f      	bhi.n	80089ae <USBD_StdDevReq+0xbe>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <USBD_StdDevReq+0x36>
 8008912:	2b20      	cmp	r3, #32
 8008914:	d14b      	bne.n	80089ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
      break;
 8008924:	e048      	b.n	80089b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	2b09      	cmp	r3, #9
 800892c:	d839      	bhi.n	80089a2 <USBD_StdDevReq+0xb2>
 800892e:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <USBD_StdDevReq+0x44>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	08008985 	.word	0x08008985
 8008938:	08008999 	.word	0x08008999
 800893c:	080089a3 	.word	0x080089a3
 8008940:	0800898f 	.word	0x0800898f
 8008944:	080089a3 	.word	0x080089a3
 8008948:	08008967 	.word	0x08008967
 800894c:	0800895d 	.word	0x0800895d
 8008950:	080089a3 	.word	0x080089a3
 8008954:	0800897b 	.word	0x0800897b
 8008958:	08008971 	.word	0x08008971
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9dc 	bl	8008d1c <USBD_GetDescriptor>
          break;
 8008964:	e022      	b.n	80089ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fb3f 	bl	8008fec <USBD_SetAddress>
          break;
 800896e:	e01d      	b.n	80089ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fb7e 	bl	8009074 <USBD_SetConfig>
          break;
 8008978:	e018      	b.n	80089ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fc07 	bl	8009190 <USBD_GetConfig>
          break;
 8008982:	e013      	b.n	80089ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fc37 	bl	80091fa <USBD_GetStatus>
          break;
 800898c:	e00e      	b.n	80089ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fc65 	bl	8009260 <USBD_SetFeature>
          break;
 8008996:	e009      	b.n	80089ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fc74 	bl	8009288 <USBD_ClrFeature>
          break;
 80089a0:	e004      	b.n	80089ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fccd 	bl	8009344 <USBD_CtlError>
          break;
 80089aa:	bf00      	nop
      }
      break;
 80089ac:	e004      	b.n	80089b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fcc7 	bl	8009344 <USBD_CtlError>
      break;
 80089b6:	bf00      	nop
  }

  return ret;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop

080089c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d005      	beq.n	80089ea <USBD_StdItfReq+0x26>
 80089de:	2b40      	cmp	r3, #64	; 0x40
 80089e0:	d82e      	bhi.n	8008a40 <USBD_StdItfReq+0x7c>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <USBD_StdItfReq+0x26>
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d12a      	bne.n	8008a40 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f0:	3b01      	subs	r3, #1
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d81d      	bhi.n	8008a32 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	889b      	ldrh	r3, [r3, #4]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d813      	bhi.n	8008a28 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	88db      	ldrh	r3, [r3, #6]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d110      	bne.n	8008a3c <USBD_StdItfReq+0x78>
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10d      	bne.n	8008a3c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fd58 	bl	80094d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a26:	e009      	b.n	8008a3c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fc8a 	bl	8009344 <USBD_CtlError>
          break;
 8008a30:	e004      	b.n	8008a3c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fc85 	bl	8009344 <USBD_CtlError>
          break;
 8008a3a:	e000      	b.n	8008a3e <USBD_StdItfReq+0x7a>
          break;
 8008a3c:	bf00      	nop
      }
      break;
 8008a3e:	e004      	b.n	8008a4a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fc7e 	bl	8009344 <USBD_CtlError>
      break;
 8008a48:	bf00      	nop
  }

  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	889b      	ldrh	r3, [r3, #4]
 8008a66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a70:	2b40      	cmp	r3, #64	; 0x40
 8008a72:	d007      	beq.n	8008a84 <USBD_StdEPReq+0x30>
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	f200 8146 	bhi.w	8008d06 <USBD_StdEPReq+0x2b2>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <USBD_StdEPReq+0x40>
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	f040 8141 	bne.w	8008d06 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
      break;
 8008a92:	e13d      	b.n	8008d10 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	d10a      	bne.n	8008ab6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	e12d      	b.n	8008d12 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d007      	beq.n	8008ace <USBD_StdEPReq+0x7a>
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	f300 811b 	bgt.w	8008cfa <USBD_StdEPReq+0x2a6>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d072      	beq.n	8008bae <USBD_StdEPReq+0x15a>
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d03a      	beq.n	8008b42 <USBD_StdEPReq+0xee>
 8008acc:	e115      	b.n	8008cfa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d002      	beq.n	8008ade <USBD_StdEPReq+0x8a>
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d015      	beq.n	8008b08 <USBD_StdEPReq+0xb4>
 8008adc:	e02b      	b.n	8008b36 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00c      	beq.n	8008afe <USBD_StdEPReq+0xaa>
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2b80      	cmp	r3, #128	; 0x80
 8008ae8:	d009      	beq.n	8008afe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 f8ae 	bl	8009c50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008af4:	2180      	movs	r1, #128	; 0x80
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 f8aa 	bl	8009c50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008afc:	e020      	b.n	8008b40 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fc1f 	bl	8009344 <USBD_CtlError>
              break;
 8008b06:	e01b      	b.n	8008b40 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	885b      	ldrh	r3, [r3, #2]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10e      	bne.n	8008b2e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00b      	beq.n	8008b2e <USBD_StdEPReq+0xda>
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	2b80      	cmp	r3, #128	; 0x80
 8008b1a:	d008      	beq.n	8008b2e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	88db      	ldrh	r3, [r3, #6]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d104      	bne.n	8008b2e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 f891 	bl	8009c50 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fcd1 	bl	80094d6 <USBD_CtlSendStatus>

              break;
 8008b34:	e004      	b.n	8008b40 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fc03 	bl	8009344 <USBD_CtlError>
              break;
 8008b3e:	bf00      	nop
          }
          break;
 8008b40:	e0e0      	b.n	8008d04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d002      	beq.n	8008b52 <USBD_StdEPReq+0xfe>
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d015      	beq.n	8008b7c <USBD_StdEPReq+0x128>
 8008b50:	e026      	b.n	8008ba0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00c      	beq.n	8008b72 <USBD_StdEPReq+0x11e>
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	2b80      	cmp	r3, #128	; 0x80
 8008b5c:	d009      	beq.n	8008b72 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 f874 	bl	8009c50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b68:	2180      	movs	r1, #128	; 0x80
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 f870 	bl	8009c50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b70:	e01c      	b.n	8008bac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fbe5 	bl	8009344 <USBD_CtlError>
              break;
 8008b7a:	e017      	b.n	8008bac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	885b      	ldrh	r3, [r3, #2]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d112      	bne.n	8008baa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 f87b 	bl	8009c8e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc9c 	bl	80094d6 <USBD_CtlSendStatus>
              }
              break;
 8008b9e:	e004      	b.n	8008baa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fbce 	bl	8009344 <USBD_CtlError>
              break;
 8008ba8:	e000      	b.n	8008bac <USBD_StdEPReq+0x158>
              break;
 8008baa:	bf00      	nop
          }
          break;
 8008bac:	e0aa      	b.n	8008d04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d002      	beq.n	8008bbe <USBD_StdEPReq+0x16a>
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d032      	beq.n	8008c22 <USBD_StdEPReq+0x1ce>
 8008bbc:	e097      	b.n	8008cee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <USBD_StdEPReq+0x180>
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b80      	cmp	r3, #128	; 0x80
 8008bc8:	d004      	beq.n	8008bd4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fbb9 	bl	8009344 <USBD_CtlError>
                break;
 8008bd2:	e091      	b.n	8008cf8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da0b      	bge.n	8008bf4 <USBD_StdEPReq+0x1a0>
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	3310      	adds	r3, #16
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	4413      	add	r3, r2
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	e00b      	b.n	8008c0c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	4413      	add	r3, r2
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2202      	movs	r2, #2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fbfd 	bl	800941a <USBD_CtlSendData>
              break;
 8008c20:	e06a      	b.n	8008cf8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da11      	bge.n	8008c4e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	f003 020f 	and.w	r2, r3, #15
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	440b      	add	r3, r1
 8008c3c:	3318      	adds	r3, #24
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d117      	bne.n	8008c74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fb7c 	bl	8009344 <USBD_CtlError>
                  break;
 8008c4c:	e054      	b.n	8008cf8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fb69 	bl	8009344 <USBD_CtlError>
                  break;
 8008c72:	e041      	b.n	8008cf8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	da0b      	bge.n	8008c94 <USBD_StdEPReq+0x240>
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	3310      	adds	r3, #16
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	4413      	add	r3, r2
 8008c90:	3304      	adds	r3, #4
 8008c92:	e00b      	b.n	8008cac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4413      	add	r3, r2
 8008caa:	3304      	adds	r3, #4
 8008cac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <USBD_StdEPReq+0x266>
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	2b80      	cmp	r3, #128	; 0x80
 8008cb8:	d103      	bne.n	8008cc2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	e00e      	b.n	8008ce0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008cc2:	7bbb      	ldrb	r3, [r7, #14]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 f800 	bl	8009ccc <USBD_LL_IsStallEP>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	e002      	b.n	8008ce0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fb97 	bl	800941a <USBD_CtlSendData>
              break;
 8008cec:	e004      	b.n	8008cf8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fb27 	bl	8009344 <USBD_CtlError>
              break;
 8008cf6:	bf00      	nop
          }
          break;
 8008cf8:	e004      	b.n	8008d04 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fb21 	bl	8009344 <USBD_CtlError>
          break;
 8008d02:	bf00      	nop
      }
      break;
 8008d04:	e004      	b.n	8008d10 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fb1b 	bl	8009344 <USBD_CtlError>
      break;
 8008d0e:	bf00      	nop
  }

  return ret;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	885b      	ldrh	r3, [r3, #2]
 8008d36:	0a1b      	lsrs	r3, r3, #8
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	f200 8128 	bhi.w	8008f92 <USBD_GetDescriptor+0x276>
 8008d42:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <USBD_GetDescriptor+0x2c>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d65 	.word	0x08008d65
 8008d4c:	08008d7d 	.word	0x08008d7d
 8008d50:	08008dbd 	.word	0x08008dbd
 8008d54:	08008f93 	.word	0x08008f93
 8008d58:	08008f93 	.word	0x08008f93
 8008d5c:	08008f33 	.word	0x08008f33
 8008d60:	08008f5f 	.word	0x08008f5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
      break;
 8008d7a:	e112      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	7c1b      	ldrb	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10d      	bne.n	8008da0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8c:	f107 0208 	add.w	r2, r7, #8
 8008d90:	4610      	mov	r0, r2
 8008d92:	4798      	blx	r3
 8008d94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d9e:	e100      	b.n	8008fa2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	f107 0208 	add.w	r2, r7, #8
 8008dac:	4610      	mov	r0, r2
 8008dae:	4798      	blx	r3
 8008db0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	2202      	movs	r2, #2
 8008db8:	701a      	strb	r2, [r3, #0]
      break;
 8008dba:	e0f2      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	885b      	ldrh	r3, [r3, #2]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	f200 80ac 	bhi.w	8008f20 <USBD_GetDescriptor+0x204>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <USBD_GetDescriptor+0xb4>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008de9 	.word	0x08008de9
 8008dd4:	08008e1d 	.word	0x08008e1d
 8008dd8:	08008e51 	.word	0x08008e51
 8008ddc:	08008e85 	.word	0x08008e85
 8008de0:	08008eb9 	.word	0x08008eb9
 8008de4:	08008eed 	.word	0x08008eed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	7c12      	ldrb	r2, [r2, #16]
 8008e00:	f107 0108 	add.w	r1, r7, #8
 8008e04:	4610      	mov	r0, r2
 8008e06:	4798      	blx	r3
 8008e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e0a:	e091      	b.n	8008f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa98 	bl	8009344 <USBD_CtlError>
            err++;
 8008e14:	7afb      	ldrb	r3, [r7, #11]
 8008e16:	3301      	adds	r3, #1
 8008e18:	72fb      	strb	r3, [r7, #11]
          break;
 8008e1a:	e089      	b.n	8008f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	7c12      	ldrb	r2, [r2, #16]
 8008e34:	f107 0108 	add.w	r1, r7, #8
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
 8008e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e3e:	e077      	b.n	8008f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa7e 	bl	8009344 <USBD_CtlError>
            err++;
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e4e:	e06f      	b.n	8008f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7c12      	ldrb	r2, [r2, #16]
 8008e68:	f107 0108 	add.w	r1, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e72:	e05d      	b.n	8008f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa64 	bl	8009344 <USBD_CtlError>
            err++;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	72fb      	strb	r3, [r7, #11]
          break;
 8008e82:	e055      	b.n	8008f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7c12      	ldrb	r2, [r2, #16]
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ea6:	e043      	b.n	8008f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa4a 	bl	8009344 <USBD_CtlError>
            err++;
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008eb6:	e03b      	b.n	8008f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	7c12      	ldrb	r2, [r2, #16]
 8008ed0:	f107 0108 	add.w	r1, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eda:	e029      	b.n	8008f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa30 	bl	8009344 <USBD_CtlError>
            err++;
 8008ee4:	7afb      	ldrb	r3, [r7, #11]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eea:	e021      	b.n	8008f30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0e:	e00f      	b.n	8008f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa16 	bl	8009344 <USBD_CtlError>
            err++;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1e:	e007      	b.n	8008f30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa0e 	bl	8009344 <USBD_CtlError>
          err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f2e:	e038      	b.n	8008fa2 <USBD_GetDescriptor+0x286>
 8008f30:	e037      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7c1b      	ldrb	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f42:	f107 0208 	add.w	r2, r7, #8
 8008f46:	4610      	mov	r0, r2
 8008f48:	4798      	blx	r3
 8008f4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f4c:	e029      	b.n	8008fa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f9f7 	bl	8009344 <USBD_CtlError>
        err++;
 8008f56:	7afb      	ldrb	r3, [r7, #11]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f5c:	e021      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	7c1b      	ldrb	r3, [r3, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10d      	bne.n	8008f82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	f107 0208 	add.w	r2, r7, #8
 8008f72:	4610      	mov	r0, r2
 8008f74:	4798      	blx	r3
 8008f76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	2207      	movs	r2, #7
 8008f7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f80:	e00f      	b.n	8008fa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f9dd 	bl	8009344 <USBD_CtlError>
        err++;
 8008f8a:	7afb      	ldrb	r3, [r7, #11]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f90:	e007      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9d5 	bl	8009344 <USBD_CtlError>
      err++;
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008fa0:	bf00      	nop
  }

  if (err != 0U)
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d11c      	bne.n	8008fe2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008fa8:	893b      	ldrh	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d011      	beq.n	8008fd2 <USBD_GetDescriptor+0x2b6>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	88db      	ldrh	r3, [r3, #6]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	88da      	ldrh	r2, [r3, #6]
 8008fba:	893b      	ldrh	r3, [r7, #8]
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	bf28      	it	cs
 8008fc0:	4613      	movcs	r3, r2
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fc6:	893b      	ldrh	r3, [r7, #8]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	68f9      	ldr	r1, [r7, #12]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa24 	bl	800941a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	88db      	ldrh	r3, [r3, #6]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d104      	bne.n	8008fe4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa7b 	bl	80094d6 <USBD_CtlSendStatus>
 8008fe0:	e000      	b.n	8008fe4 <USBD_GetDescriptor+0x2c8>
    return;
 8008fe2:	bf00      	nop
    }
  }
}
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop

08008fec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	889b      	ldrh	r3, [r3, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d130      	bne.n	8009060 <USBD_SetAddress+0x74>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	88db      	ldrh	r3, [r3, #6]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d12c      	bne.n	8009060 <USBD_SetAddress+0x74>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	885b      	ldrh	r3, [r3, #2]
 800900a:	2b7f      	cmp	r3, #127	; 0x7f
 800900c:	d828      	bhi.n	8009060 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009018:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009020:	2b03      	cmp	r3, #3
 8009022:	d104      	bne.n	800902e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f98c 	bl	8009344 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902c:	e01d      	b.n	800906a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	7bfa      	ldrb	r2, [r7, #15]
 8009032:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fe72 	bl	8009d24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fa48 	bl	80094d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009054:	e009      	b.n	800906a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800905e:	e004      	b.n	800906a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f96e 	bl	8009344 <USBD_CtlError>
  }
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	885b      	ldrh	r3, [r3, #2]
 8009082:	b2da      	uxtb	r2, r3
 8009084:	4b41      	ldr	r3, [pc, #260]	; (800918c <USBD_SetConfig+0x118>)
 8009086:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009088:	4b40      	ldr	r3, [pc, #256]	; (800918c <USBD_SetConfig+0x118>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d904      	bls.n	800909a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f956 	bl	8009344 <USBD_CtlError>
 8009098:	e075      	b.n	8009186 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d002      	beq.n	80090aa <USBD_SetConfig+0x36>
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d023      	beq.n	80090f0 <USBD_SetConfig+0x7c>
 80090a8:	e062      	b.n	8009170 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80090aa:	4b38      	ldr	r3, [pc, #224]	; (800918c <USBD_SetConfig+0x118>)
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01a      	beq.n	80090e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80090b2:	4b36      	ldr	r3, [pc, #216]	; (800918c <USBD_SetConfig+0x118>)
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2203      	movs	r2, #3
 80090c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090c4:	4b31      	ldr	r3, [pc, #196]	; (800918c <USBD_SetConfig+0x118>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff f9e4 	bl	8008498 <USBD_SetClassConfig>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d104      	bne.n	80090e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f933 	bl	8009344 <USBD_CtlError>
            return;
 80090de:	e052      	b.n	8009186 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f9f8 	bl	80094d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090e6:	e04e      	b.n	8009186 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f9f4 	bl	80094d6 <USBD_CtlSendStatus>
        break;
 80090ee:	e04a      	b.n	8009186 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80090f0:	4b26      	ldr	r3, [pc, #152]	; (800918c <USBD_SetConfig+0x118>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d112      	bne.n	800911e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009100:	4b22      	ldr	r3, [pc, #136]	; (800918c <USBD_SetConfig+0x118>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	461a      	mov	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800910a:	4b20      	ldr	r3, [pc, #128]	; (800918c <USBD_SetConfig+0x118>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff f9e0 	bl	80084d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9dd 	bl	80094d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800911c:	e033      	b.n	8009186 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800911e:	4b1b      	ldr	r3, [pc, #108]	; (800918c <USBD_SetConfig+0x118>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	429a      	cmp	r2, r3
 800912a:	d01d      	beq.n	8009168 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff f9ce 	bl	80084d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800913a:	4b14      	ldr	r3, [pc, #80]	; (800918c <USBD_SetConfig+0x118>)
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009144:	4b11      	ldr	r3, [pc, #68]	; (800918c <USBD_SetConfig+0x118>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff f9a4 	bl	8008498 <USBD_SetClassConfig>
 8009150:	4603      	mov	r3, r0
 8009152:	2b02      	cmp	r3, #2
 8009154:	d104      	bne.n	8009160 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f8f3 	bl	8009344 <USBD_CtlError>
            return;
 800915e:	e012      	b.n	8009186 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f9b8 	bl	80094d6 <USBD_CtlSendStatus>
        break;
 8009166:	e00e      	b.n	8009186 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f9b4 	bl	80094d6 <USBD_CtlSendStatus>
        break;
 800916e:	e00a      	b.n	8009186 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f8e6 	bl	8009344 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009178:	4b04      	ldr	r3, [pc, #16]	; (800918c <USBD_SetConfig+0x118>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff f9a9 	bl	80084d6 <USBD_ClrClassConfig>
        break;
 8009184:	bf00      	nop
    }
  }
}
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	2000046c 	.word	0x2000046c

08009190 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	88db      	ldrh	r3, [r3, #6]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d004      	beq.n	80091ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f8cd 	bl	8009344 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091aa:	e022      	b.n	80091f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	dc02      	bgt.n	80091bc <USBD_GetConfig+0x2c>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dc03      	bgt.n	80091c2 <USBD_GetConfig+0x32>
 80091ba:	e015      	b.n	80091e8 <USBD_GetConfig+0x58>
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d00b      	beq.n	80091d8 <USBD_GetConfig+0x48>
 80091c0:	e012      	b.n	80091e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3308      	adds	r3, #8
 80091cc:	2201      	movs	r2, #1
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f922 	bl	800941a <USBD_CtlSendData>
        break;
 80091d6:	e00c      	b.n	80091f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3304      	adds	r3, #4
 80091dc:	2201      	movs	r2, #1
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f91a 	bl	800941a <USBD_CtlSendData>
        break;
 80091e6:	e004      	b.n	80091f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f8aa 	bl	8009344 <USBD_CtlError>
        break;
 80091f0:	bf00      	nop
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920a:	3b01      	subs	r3, #1
 800920c:	2b02      	cmp	r3, #2
 800920e:	d81e      	bhi.n	800924e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	88db      	ldrh	r3, [r3, #6]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d004      	beq.n	8009222 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f892 	bl	8009344 <USBD_CtlError>
        break;
 8009220:	e01a      	b.n	8009258 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f043 0202 	orr.w	r2, r3, #2
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	330c      	adds	r3, #12
 8009242:	2202      	movs	r2, #2
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8e7 	bl	800941a <USBD_CtlSendData>
      break;
 800924c:	e004      	b.n	8009258 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f877 	bl	8009344 <USBD_CtlError>
      break;
 8009256:	bf00      	nop
  }
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	885b      	ldrh	r3, [r3, #2]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d106      	bne.n	8009280 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f92b 	bl	80094d6 <USBD_CtlSendStatus>
  }
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009298:	3b01      	subs	r3, #1
 800929a:	2b02      	cmp	r3, #2
 800929c:	d80b      	bhi.n	80092b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	885b      	ldrh	r3, [r3, #2]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d10c      	bne.n	80092c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f911 	bl	80094d6 <USBD_CtlSendStatus>
      }
      break;
 80092b4:	e004      	b.n	80092c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f843 	bl	8009344 <USBD_CtlError>
      break;
 80092be:	e000      	b.n	80092c2 <USBD_ClrFeature+0x3a>
      break;
 80092c0:	bf00      	nop
  }
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781a      	ldrb	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	785a      	ldrb	r2, [r3, #1]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	3302      	adds	r3, #2
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	3303      	adds	r3, #3
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4413      	add	r3, r2
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	3304      	adds	r3, #4
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b29a      	uxth	r2, r3
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	3305      	adds	r3, #5
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	b29b      	uxth	r3, r3
 8009310:	021b      	lsls	r3, r3, #8
 8009312:	b29b      	uxth	r3, r3
 8009314:	4413      	add	r3, r2
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	3306      	adds	r3, #6
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b29a      	uxth	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	3307      	adds	r3, #7
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	b29b      	uxth	r3, r3
 800932c:	021b      	lsls	r3, r3, #8
 800932e:	b29b      	uxth	r3, r3
 8009330:	4413      	add	r3, r2
 8009332:	b29a      	uxth	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	80da      	strh	r2, [r3, #6]

}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800934e:	2180      	movs	r1, #128	; 0x80
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fc7d 	bl	8009c50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009356:	2100      	movs	r1, #0
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fc79 	bl	8009c50 <USBD_LL_StallEP>
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b086      	sub	sp, #24
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d032      	beq.n	80093e2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f834 	bl	80093ea <USBD_GetLen>
 8009382:	4603      	mov	r3, r0
 8009384:	3301      	adds	r3, #1
 8009386:	b29b      	uxth	r3, r3
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	75fa      	strb	r2, [r7, #23]
 8009396:	461a      	mov	r2, r3
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4413      	add	r3, r2
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	7812      	ldrb	r2, [r2, #0]
 80093a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	75fa      	strb	r2, [r7, #23]
 80093a8:	461a      	mov	r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	4413      	add	r3, r2
 80093ae:	2203      	movs	r2, #3
 80093b0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80093b2:	e012      	b.n	80093da <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	60fa      	str	r2, [r7, #12]
 80093ba:	7dfa      	ldrb	r2, [r7, #23]
 80093bc:	1c51      	adds	r1, r2, #1
 80093be:	75f9      	strb	r1, [r7, #23]
 80093c0:	4611      	mov	r1, r2
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	440a      	add	r2, r1
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	75fa      	strb	r2, [r7, #23]
 80093d0:	461a      	mov	r2, r3
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4413      	add	r3, r2
 80093d6:	2200      	movs	r2, #0
 80093d8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e8      	bne.n	80093b4 <USBD_GetString+0x4e>
    }
  }
}
 80093e2:	bf00      	nop
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b085      	sub	sp, #20
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80093f6:	e005      	b.n	8009404 <USBD_GetLen+0x1a>
  {
    len++;
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	3301      	adds	r3, #1
 80093fc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3301      	adds	r3, #1
 8009402:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1f5      	bne.n	80093f8 <USBD_GetLen+0xe>
  }

  return len;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	4613      	mov	r3, r2
 8009426:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2202      	movs	r2, #2
 800942c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009430:	88fa      	ldrh	r2, [r7, #6]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009436:	88fa      	ldrh	r2, [r7, #6]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	2100      	movs	r1, #0
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fc8d 	bl	8009d62 <USBD_LL_Transmit>

  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	4613      	mov	r3, r2
 800945e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009460:	88fb      	ldrh	r3, [r7, #6]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	2100      	movs	r1, #0
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fc7b 	bl	8009d62 <USBD_LL_Transmit>

  return USBD_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	4613      	mov	r3, r2
 8009482:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2203      	movs	r2, #3
 8009488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800948c:	88fa      	ldrh	r2, [r7, #6]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009494:	88fa      	ldrh	r2, [r7, #6]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	2100      	movs	r1, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fc80 	bl	8009da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	4613      	mov	r3, r2
 80094be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	2100      	movs	r1, #0
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fc6e 	bl	8009da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2204      	movs	r2, #4
 80094e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094e6:	2300      	movs	r3, #0
 80094e8:	2200      	movs	r2, #0
 80094ea:	2100      	movs	r1, #0
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fc38 	bl	8009d62 <USBD_LL_Transmit>

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2205      	movs	r2, #5
 8009508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800950c:	2300      	movs	r3, #0
 800950e:	2200      	movs	r2, #0
 8009510:	2100      	movs	r1, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fc48 	bl	8009da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009528:	2200      	movs	r2, #0
 800952a:	4912      	ldr	r1, [pc, #72]	; (8009574 <MX_USB_DEVICE_Init+0x50>)
 800952c:	4812      	ldr	r0, [pc, #72]	; (8009578 <MX_USB_DEVICE_Init+0x54>)
 800952e:	f7fe ff57 	bl	80083e0 <USBD_Init>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009538:	f7f7 fe92 	bl	8001260 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800953c:	490f      	ldr	r1, [pc, #60]	; (800957c <MX_USB_DEVICE_Init+0x58>)
 800953e:	480e      	ldr	r0, [pc, #56]	; (8009578 <MX_USB_DEVICE_Init+0x54>)
 8009540:	f7fe ff79 	bl	8008436 <USBD_RegisterClass>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800954a:	f7f7 fe89 	bl	8001260 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800954e:	490c      	ldr	r1, [pc, #48]	; (8009580 <MX_USB_DEVICE_Init+0x5c>)
 8009550:	4809      	ldr	r0, [pc, #36]	; (8009578 <MX_USB_DEVICE_Init+0x54>)
 8009552:	f7fe fea7 	bl	80082a4 <USBD_CDC_RegisterInterface>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800955c:	f7f7 fe80 	bl	8001260 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009560:	4805      	ldr	r0, [pc, #20]	; (8009578 <MX_USB_DEVICE_Init+0x54>)
 8009562:	f7fe ff82 	bl	800846a <USBD_Start>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800956c:	f7f7 fe78 	bl	8001260 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009570:	bf00      	nop
 8009572:	bd80      	pop	{r7, pc}
 8009574:	2000012c 	.word	0x2000012c
 8009578:	20000470 	.word	0x20000470
 800957c:	20000018 	.word	0x20000018
 8009580:	2000011c 	.word	0x2000011c

08009584 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009588:	2200      	movs	r2, #0
 800958a:	4905      	ldr	r1, [pc, #20]	; (80095a0 <CDC_Init_FS+0x1c>)
 800958c:	4805      	ldr	r0, [pc, #20]	; (80095a4 <CDC_Init_FS+0x20>)
 800958e:	f7fe fea0 	bl	80082d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009592:	4905      	ldr	r1, [pc, #20]	; (80095a8 <CDC_Init_FS+0x24>)
 8009594:	4803      	ldr	r0, [pc, #12]	; (80095a4 <CDC_Init_FS+0x20>)
 8009596:	f7fe feb6 	bl	8008306 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800959a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800959c:	4618      	mov	r0, r3
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20000b34 	.word	0x20000b34
 80095a4:	20000470 	.word	0x20000470
 80095a8:	20000734 	.word	0x20000734

080095ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	6039      	str	r1, [r7, #0]
 80095c6:	71fb      	strb	r3, [r7, #7]
 80095c8:	4613      	mov	r3, r2
 80095ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	2b23      	cmp	r3, #35	; 0x23
 80095d0:	d84a      	bhi.n	8009668 <CDC_Control_FS+0xac>
 80095d2:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <CDC_Control_FS+0x1c>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	08009669 	.word	0x08009669
 80095dc:	08009669 	.word	0x08009669
 80095e0:	08009669 	.word	0x08009669
 80095e4:	08009669 	.word	0x08009669
 80095e8:	08009669 	.word	0x08009669
 80095ec:	08009669 	.word	0x08009669
 80095f0:	08009669 	.word	0x08009669
 80095f4:	08009669 	.word	0x08009669
 80095f8:	08009669 	.word	0x08009669
 80095fc:	08009669 	.word	0x08009669
 8009600:	08009669 	.word	0x08009669
 8009604:	08009669 	.word	0x08009669
 8009608:	08009669 	.word	0x08009669
 800960c:	08009669 	.word	0x08009669
 8009610:	08009669 	.word	0x08009669
 8009614:	08009669 	.word	0x08009669
 8009618:	08009669 	.word	0x08009669
 800961c:	08009669 	.word	0x08009669
 8009620:	08009669 	.word	0x08009669
 8009624:	08009669 	.word	0x08009669
 8009628:	08009669 	.word	0x08009669
 800962c:	08009669 	.word	0x08009669
 8009630:	08009669 	.word	0x08009669
 8009634:	08009669 	.word	0x08009669
 8009638:	08009669 	.word	0x08009669
 800963c:	08009669 	.word	0x08009669
 8009640:	08009669 	.word	0x08009669
 8009644:	08009669 	.word	0x08009669
 8009648:	08009669 	.word	0x08009669
 800964c:	08009669 	.word	0x08009669
 8009650:	08009669 	.word	0x08009669
 8009654:	08009669 	.word	0x08009669
 8009658:	08009669 	.word	0x08009669
 800965c:	08009669 	.word	0x08009669
 8009660:	08009669 	.word	0x08009669
 8009664:	08009669 	.word	0x08009669
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009668:	bf00      	nop
  }

  return (USBD_OK);
 800966a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	4805      	ldr	r0, [pc, #20]	; (800969c <CDC_Receive_FS+0x24>)
 8009686:	f7fe fe3e 	bl	8008306 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800968a:	4804      	ldr	r0, [pc, #16]	; (800969c <CDC_Receive_FS+0x24>)
 800968c:	f7fe fe7e 	bl	800838c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009690:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20000470 	.word	0x20000470

080096a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096b0:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <CDC_Transmit_FS+0x48>)
 80096b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e00b      	b.n	80096de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096c6:	887b      	ldrh	r3, [r7, #2]
 80096c8:	461a      	mov	r2, r3
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4806      	ldr	r0, [pc, #24]	; (80096e8 <CDC_Transmit_FS+0x48>)
 80096ce:	f7fe fe00 	bl	80082d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096d2:	4805      	ldr	r0, [pc, #20]	; (80096e8 <CDC_Transmit_FS+0x48>)
 80096d4:	f7fe fe2b 	bl	800832e <USBD_CDC_TransmitPacket>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000470 	.word	0x20000470

080096ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	6039      	str	r1, [r7, #0]
 80096f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2212      	movs	r2, #18
 80096fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096fe:	4b03      	ldr	r3, [pc, #12]	; (800970c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009700:	4618      	mov	r0, r3
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	20000148 	.word	0x20000148

08009710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	6039      	str	r1, [r7, #0]
 800971a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2204      	movs	r2, #4
 8009720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009722:	4b03      	ldr	r3, [pc, #12]	; (8009730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	2000015c 	.word	0x2000015c

08009734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	6039      	str	r1, [r7, #0]
 800973e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d105      	bne.n	8009752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	4907      	ldr	r1, [pc, #28]	; (8009768 <USBD_FS_ProductStrDescriptor+0x34>)
 800974a:	4808      	ldr	r0, [pc, #32]	; (800976c <USBD_FS_ProductStrDescriptor+0x38>)
 800974c:	f7ff fe0b 	bl	8009366 <USBD_GetString>
 8009750:	e004      	b.n	800975c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	4904      	ldr	r1, [pc, #16]	; (8009768 <USBD_FS_ProductStrDescriptor+0x34>)
 8009756:	4805      	ldr	r0, [pc, #20]	; (800976c <USBD_FS_ProductStrDescriptor+0x38>)
 8009758:	f7ff fe05 	bl	8009366 <USBD_GetString>
  }
  return USBD_StrDesc;
 800975c:	4b02      	ldr	r3, [pc, #8]	; (8009768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000f34 	.word	0x20000f34
 800976c:	0800cbfc 	.word	0x0800cbfc

08009770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	4904      	ldr	r1, [pc, #16]	; (8009790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009780:	4804      	ldr	r0, [pc, #16]	; (8009794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009782:	f7ff fdf0 	bl	8009366 <USBD_GetString>
  return USBD_StrDesc;
 8009786:	4b02      	ldr	r3, [pc, #8]	; (8009790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20000f34 	.word	0x20000f34
 8009794:	0800cc14 	.word	0x0800cc14

08009798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	6039      	str	r1, [r7, #0]
 80097a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	221a      	movs	r2, #26
 80097a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097aa:	f000 f843 	bl	8009834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ae:	4b02      	ldr	r3, [pc, #8]	; (80097b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	20000160 	.word	0x20000160

080097bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	6039      	str	r1, [r7, #0]
 80097c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d105      	bne.n	80097da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	4907      	ldr	r1, [pc, #28]	; (80097f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097d2:	4808      	ldr	r0, [pc, #32]	; (80097f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097d4:	f7ff fdc7 	bl	8009366 <USBD_GetString>
 80097d8:	e004      	b.n	80097e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4904      	ldr	r1, [pc, #16]	; (80097f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097de:	4805      	ldr	r0, [pc, #20]	; (80097f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097e0:	f7ff fdc1 	bl	8009366 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000f34 	.word	0x20000f34
 80097f4:	0800cc28 	.word	0x0800cc28

080097f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4907      	ldr	r1, [pc, #28]	; (800982c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800980e:	4808      	ldr	r0, [pc, #32]	; (8009830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009810:	f7ff fda9 	bl	8009366 <USBD_GetString>
 8009814:	e004      	b.n	8009820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4904      	ldr	r1, [pc, #16]	; (800982c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800981a:	4805      	ldr	r0, [pc, #20]	; (8009830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800981c:	f7ff fda3 	bl	8009366 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009820:	4b02      	ldr	r3, [pc, #8]	; (800982c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000f34 	.word	0x20000f34
 8009830:	0800cc34 	.word	0x0800cc34

08009834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800983a:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <Get_SerialNum+0x44>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009840:	4b0e      	ldr	r3, [pc, #56]	; (800987c <Get_SerialNum+0x48>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009846:	4b0e      	ldr	r3, [pc, #56]	; (8009880 <Get_SerialNum+0x4c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4413      	add	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800985a:	2208      	movs	r2, #8
 800985c:	4909      	ldr	r1, [pc, #36]	; (8009884 <Get_SerialNum+0x50>)
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 f814 	bl	800988c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009864:	2204      	movs	r2, #4
 8009866:	4908      	ldr	r1, [pc, #32]	; (8009888 <Get_SerialNum+0x54>)
 8009868:	68b8      	ldr	r0, [r7, #8]
 800986a:	f000 f80f 	bl	800988c <IntToUnicode>
  }
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	1ffff7ac 	.word	0x1ffff7ac
 800987c:	1ffff7b0 	.word	0x1ffff7b0
 8009880:	1ffff7b4 	.word	0x1ffff7b4
 8009884:	20000162 	.word	0x20000162
 8009888:	20000172 	.word	0x20000172

0800988c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800989e:	2300      	movs	r3, #0
 80098a0:	75fb      	strb	r3, [r7, #23]
 80098a2:	e027      	b.n	80098f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	0f1b      	lsrs	r3, r3, #28
 80098a8:	2b09      	cmp	r3, #9
 80098aa:	d80b      	bhi.n	80098c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	0f1b      	lsrs	r3, r3, #28
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	005b      	lsls	r3, r3, #1
 80098b6:	4619      	mov	r1, r3
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	440b      	add	r3, r1
 80098bc:	3230      	adds	r2, #48	; 0x30
 80098be:	b2d2      	uxtb	r2, r2
 80098c0:	701a      	strb	r2, [r3, #0]
 80098c2:	e00a      	b.n	80098da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	0f1b      	lsrs	r3, r3, #28
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	4619      	mov	r1, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	440b      	add	r3, r1
 80098d4:	3237      	adds	r2, #55	; 0x37
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	005b      	lsls	r3, r3, #1
 80098e4:	3301      	adds	r3, #1
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	4413      	add	r3, r2
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	3301      	adds	r3, #1
 80098f2:	75fb      	strb	r3, [r7, #23]
 80098f4:	7dfa      	ldrb	r2, [r7, #23]
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d3d3      	bcc.n	80098a4 <IntToUnicode+0x18>
  }
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
	...

0800990c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009914:	f107 0314 	add.w	r3, r7, #20
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	605a      	str	r2, [r3, #4]
 800991e:	609a      	str	r2, [r3, #8]
 8009920:	60da      	str	r2, [r3, #12]
 8009922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a1c      	ldr	r2, [pc, #112]	; (800999c <HAL_PCD_MspInit+0x90>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d131      	bne.n	8009992 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800992e:	4b1c      	ldr	r3, [pc, #112]	; (80099a0 <HAL_PCD_MspInit+0x94>)
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	4a1b      	ldr	r2, [pc, #108]	; (80099a0 <HAL_PCD_MspInit+0x94>)
 8009934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009938:	6153      	str	r3, [r2, #20]
 800993a:	4b19      	ldr	r3, [pc, #100]	; (80099a0 <HAL_PCD_MspInit+0x94>)
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009942:	613b      	str	r3, [r7, #16]
 8009944:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009946:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800994a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800994c:	2302      	movs	r3, #2
 800994e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009954:	2303      	movs	r3, #3
 8009956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009958:	230e      	movs	r3, #14
 800995a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800995c:	f107 0314 	add.w	r3, r7, #20
 8009960:	4619      	mov	r1, r3
 8009962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009966:	f7f7 ffff 	bl	8001968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800996a:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <HAL_PCD_MspInit+0x94>)
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	4a0c      	ldr	r2, [pc, #48]	; (80099a0 <HAL_PCD_MspInit+0x94>)
 8009970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009974:	61d3      	str	r3, [r2, #28]
 8009976:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <HAL_PCD_MspInit+0x94>)
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009982:	2200      	movs	r2, #0
 8009984:	2100      	movs	r1, #0
 8009986:	2014      	movs	r0, #20
 8009988:	f7f7 ffb7 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800998c:	2014      	movs	r0, #20
 800998e:	f7f7 ffd0 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009992:	bf00      	nop
 8009994:	3728      	adds	r7, #40	; 0x28
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	40005c00 	.word	0x40005c00
 80099a0:	40021000 	.word	0x40021000

080099a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7fe fd9e 	bl	80084fc <USBD_LL_SetupStage>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	00db      	lsls	r3, r3, #3
 80099e6:	440b      	add	r3, r1
 80099e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	4619      	mov	r1, r3
 80099f2:	f7fe fdd0 	bl	8008596 <USBD_LL_DataOutStage>
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	460b      	mov	r3, r1
 8009a08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 8009a10:	78fa      	ldrb	r2, [r7, #3]
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	440b      	add	r3, r1
 8009a1e:	3324      	adds	r3, #36	; 0x24
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	4619      	mov	r1, r3
 8009a26:	f7fe fe27 	bl	8008678 <USBD_LL_DataInStage>
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe ff3a 	bl	80088ba <USBD_LL_SOF>
}
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a56:	2301      	movs	r3, #1
 8009a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	795b      	ldrb	r3, [r3, #5]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d001      	beq.n	8009a66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a62:	f7f7 fbfd 	bl	8001260 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009a6c:	7bfa      	ldrb	r2, [r7, #15]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fee7 	bl	8008844 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe fea0 	bl	80087c2 <USBD_LL_Reset>
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fee2 	bl	8008864 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	7a5b      	ldrb	r3, [r3, #9]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d005      	beq.n	8009ab4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009aa8:	4b04      	ldr	r3, [pc, #16]	; (8009abc <HAL_PCD_SuspendCallback+0x30>)
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	4a03      	ldr	r2, [pc, #12]	; (8009abc <HAL_PCD_SuspendCallback+0x30>)
 8009aae:	f043 0306 	orr.w	r3, r3, #6
 8009ab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	e000ed00 	.word	0xe000ed00

08009ac0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe fedd 	bl	800888e <USBD_LL_Resume>
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009ae4:	4a28      	ldr	r2, [pc, #160]	; (8009b88 <USBD_LL_Init+0xac>)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a26      	ldr	r2, [pc, #152]	; (8009b88 <USBD_LL_Init+0xac>)
 8009af0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009af4:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <USBD_LL_Init+0xac>)
 8009af6:	4a25      	ldr	r2, [pc, #148]	; (8009b8c <USBD_LL_Init+0xb0>)
 8009af8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009afa:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <USBD_LL_Init+0xac>)
 8009afc:	2208      	movs	r2, #8
 8009afe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b00:	4b21      	ldr	r3, [pc, #132]	; (8009b88 <USBD_LL_Init+0xac>)
 8009b02:	2202      	movs	r2, #2
 8009b04:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b06:	4b20      	ldr	r3, [pc, #128]	; (8009b88 <USBD_LL_Init+0xac>)
 8009b08:	2202      	movs	r2, #2
 8009b0a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b0c:	4b1e      	ldr	r3, [pc, #120]	; (8009b88 <USBD_LL_Init+0xac>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b12:	4b1d      	ldr	r3, [pc, #116]	; (8009b88 <USBD_LL_Init+0xac>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b18:	481b      	ldr	r0, [pc, #108]	; (8009b88 <USBD_LL_Init+0xac>)
 8009b1a:	f7f8 fa01 	bl	8001f20 <HAL_PCD_Init>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b24:	f7f7 fb9c 	bl	8001260 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b2e:	2318      	movs	r3, #24
 8009b30:	2200      	movs	r2, #0
 8009b32:	2100      	movs	r1, #0
 8009b34:	f7f9 fe7b 	bl	800382e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b3e:	2358      	movs	r3, #88	; 0x58
 8009b40:	2200      	movs	r2, #0
 8009b42:	2180      	movs	r1, #128	; 0x80
 8009b44:	f7f9 fe73 	bl	800382e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b4e:	23c0      	movs	r3, #192	; 0xc0
 8009b50:	2200      	movs	r2, #0
 8009b52:	2181      	movs	r1, #129	; 0x81
 8009b54:	f7f9 fe6b 	bl	800382e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b62:	2200      	movs	r2, #0
 8009b64:	2101      	movs	r1, #1
 8009b66:	f7f9 fe62 	bl	800382e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b74:	2200      	movs	r2, #0
 8009b76:	2182      	movs	r1, #130	; 0x82
 8009b78:	f7f9 fe59 	bl	800382e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20001134 	.word	0x20001134
 8009b8c:	40005c00 	.word	0x40005c00

08009b90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f8 fa81 	bl	80020ae <HAL_PCD_Start>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f952 	bl	8009e5c <USBD_Get_USB_Status>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	4608      	mov	r0, r1
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	70fb      	strb	r3, [r7, #3]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70bb      	strb	r3, [r7, #2]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bee:	78bb      	ldrb	r3, [r7, #2]
 8009bf0:	883a      	ldrh	r2, [r7, #0]
 8009bf2:	78f9      	ldrb	r1, [r7, #3]
 8009bf4:	f7f8 fb79 	bl	80022ea <HAL_PCD_EP_Open>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 f92c 	bl	8009e5c <USBD_Get_USB_Status>
 8009c04:	4603      	mov	r3, r0
 8009c06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c2c:	78fa      	ldrb	r2, [r7, #3]
 8009c2e:	4611      	mov	r1, r2
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7f8 fbb7 	bl	80023a4 <HAL_PCD_EP_Close>
 8009c36:	4603      	mov	r3, r0
 8009c38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 f90d 	bl	8009e5c <USBD_Get_USB_Status>
 8009c42:	4603      	mov	r3, r0
 8009c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c6a:	78fa      	ldrb	r2, [r7, #3]
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7f8 fc60 	bl	8002534 <HAL_PCD_EP_SetStall>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f8ee 	bl	8009e5c <USBD_Get_USB_Status>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	4611      	mov	r1, r2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7f8 fc93 	bl	80025d8 <HAL_PCD_EP_ClrStall>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f8cf 	bl	8009e5c <USBD_Get_USB_Status>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	da0b      	bge.n	8009d00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ce8:	78fb      	ldrb	r3, [r7, #3]
 8009cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cee:	68f9      	ldr	r1, [r7, #12]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	440b      	add	r3, r1
 8009cfa:	3312      	adds	r3, #18
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	e00b      	b.n	8009d18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	440b      	add	r3, r1
 8009d12:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8009d16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3e:	78fa      	ldrb	r2, [r7, #3]
 8009d40:	4611      	mov	r1, r2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f8 faad 	bl	80022a2 <HAL_PCD_SetAddress>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f884 	bl	8009e5c <USBD_Get_USB_Status>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b086      	sub	sp, #24
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	460b      	mov	r3, r1
 8009d70:	72fb      	strb	r3, [r7, #11]
 8009d72:	4613      	mov	r3, r2
 8009d74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d84:	893b      	ldrh	r3, [r7, #8]
 8009d86:	7af9      	ldrb	r1, [r7, #11]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	f7f8 fb9c 	bl	80024c6 <HAL_PCD_EP_Transmit>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 f861 	bl	8009e5c <USBD_Get_USB_Status>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	461a      	mov	r2, r3
 8009db4:	460b      	mov	r3, r1
 8009db6:	72fb      	strb	r3, [r7, #11]
 8009db8:	4613      	mov	r3, r2
 8009dba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dca:	893b      	ldrh	r3, [r7, #8]
 8009dcc:	7af9      	ldrb	r1, [r7, #11]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	f7f8 fb30 	bl	8002434 <HAL_PCD_EP_Receive>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f83e 	bl	8009e5c <USBD_Get_USB_Status>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009de4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e00:	78fa      	ldrb	r2, [r7, #3]
 8009e02:	4611      	mov	r1, r2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7f8 fb46 	bl	8002496 <HAL_PCD_EP_GetRxCount>
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e1c:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <USBD_static_malloc+0x18>)
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	20001408 	.word	0x20001408

08009e30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]

}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d817      	bhi.n	8009ea0 <USBD_Get_USB_Status+0x44>
 8009e70:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <USBD_Get_USB_Status+0x1c>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009e89 	.word	0x08009e89
 8009e7c:	08009e8f 	.word	0x08009e8f
 8009e80:	08009e95 	.word	0x08009e95
 8009e84:	08009e9b 	.word	0x08009e9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e8c:	e00b      	b.n	8009ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	73fb      	strb	r3, [r7, #15]
    break;
 8009e92:	e008      	b.n	8009ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e94:	2301      	movs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
    break;
 8009e98:	e005      	b.n	8009ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9e:	e002      	b.n	8009ea6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	bf00      	nop
  }
  return usb_status;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <__cvt>:
 8009eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	ec55 4b10 	vmov	r4, r5, d0
 8009ebc:	2d00      	cmp	r5, #0
 8009ebe:	460e      	mov	r6, r1
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	bfbb      	ittet	lt
 8009ec6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009eca:	461d      	movlt	r5, r3
 8009ecc:	2300      	movge	r3, #0
 8009ece:	232d      	movlt	r3, #45	; 0x2d
 8009ed0:	700b      	strb	r3, [r1, #0]
 8009ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ed4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ed8:	4691      	mov	r9, r2
 8009eda:	f023 0820 	bic.w	r8, r3, #32
 8009ede:	bfbc      	itt	lt
 8009ee0:	4622      	movlt	r2, r4
 8009ee2:	4614      	movlt	r4, r2
 8009ee4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ee8:	d005      	beq.n	8009ef6 <__cvt+0x42>
 8009eea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009eee:	d100      	bne.n	8009ef2 <__cvt+0x3e>
 8009ef0:	3601      	adds	r6, #1
 8009ef2:	2102      	movs	r1, #2
 8009ef4:	e000      	b.n	8009ef8 <__cvt+0x44>
 8009ef6:	2103      	movs	r1, #3
 8009ef8:	ab03      	add	r3, sp, #12
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	ab02      	add	r3, sp, #8
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	ec45 4b10 	vmov	d0, r4, r5
 8009f04:	4653      	mov	r3, sl
 8009f06:	4632      	mov	r2, r6
 8009f08:	f000 fe6a 	bl	800abe0 <_dtoa_r>
 8009f0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f10:	4607      	mov	r7, r0
 8009f12:	d102      	bne.n	8009f1a <__cvt+0x66>
 8009f14:	f019 0f01 	tst.w	r9, #1
 8009f18:	d022      	beq.n	8009f60 <__cvt+0xac>
 8009f1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f1e:	eb07 0906 	add.w	r9, r7, r6
 8009f22:	d110      	bne.n	8009f46 <__cvt+0x92>
 8009f24:	783b      	ldrb	r3, [r7, #0]
 8009f26:	2b30      	cmp	r3, #48	; 0x30
 8009f28:	d10a      	bne.n	8009f40 <__cvt+0x8c>
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7f6 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f36:	b918      	cbnz	r0, 8009f40 <__cvt+0x8c>
 8009f38:	f1c6 0601 	rsb	r6, r6, #1
 8009f3c:	f8ca 6000 	str.w	r6, [sl]
 8009f40:	f8da 3000 	ldr.w	r3, [sl]
 8009f44:	4499      	add	r9, r3
 8009f46:	2200      	movs	r2, #0
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	f7f6 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f52:	b108      	cbz	r0, 8009f58 <__cvt+0xa4>
 8009f54:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f58:	2230      	movs	r2, #48	; 0x30
 8009f5a:	9b03      	ldr	r3, [sp, #12]
 8009f5c:	454b      	cmp	r3, r9
 8009f5e:	d307      	bcc.n	8009f70 <__cvt+0xbc>
 8009f60:	9b03      	ldr	r3, [sp, #12]
 8009f62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f64:	1bdb      	subs	r3, r3, r7
 8009f66:	4638      	mov	r0, r7
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	b004      	add	sp, #16
 8009f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f70:	1c59      	adds	r1, r3, #1
 8009f72:	9103      	str	r1, [sp, #12]
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	e7f0      	b.n	8009f5a <__cvt+0xa6>

08009f78 <__exponent>:
 8009f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	bfb8      	it	lt
 8009f80:	4249      	neglt	r1, r1
 8009f82:	f803 2b02 	strb.w	r2, [r3], #2
 8009f86:	bfb4      	ite	lt
 8009f88:	222d      	movlt	r2, #45	; 0x2d
 8009f8a:	222b      	movge	r2, #43	; 0x2b
 8009f8c:	2909      	cmp	r1, #9
 8009f8e:	7042      	strb	r2, [r0, #1]
 8009f90:	dd2a      	ble.n	8009fe8 <__exponent+0x70>
 8009f92:	f10d 0207 	add.w	r2, sp, #7
 8009f96:	4617      	mov	r7, r2
 8009f98:	260a      	movs	r6, #10
 8009f9a:	4694      	mov	ip, r2
 8009f9c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009fa0:	fb06 1415 	mls	r4, r6, r5, r1
 8009fa4:	3430      	adds	r4, #48	; 0x30
 8009fa6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009faa:	460c      	mov	r4, r1
 8009fac:	2c63      	cmp	r4, #99	; 0x63
 8009fae:	f102 32ff 	add.w	r2, r2, #4294967295
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	dcf1      	bgt.n	8009f9a <__exponent+0x22>
 8009fb6:	3130      	adds	r1, #48	; 0x30
 8009fb8:	f1ac 0402 	sub.w	r4, ip, #2
 8009fbc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009fc0:	1c41      	adds	r1, r0, #1
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	42ba      	cmp	r2, r7
 8009fc6:	d30a      	bcc.n	8009fde <__exponent+0x66>
 8009fc8:	f10d 0209 	add.w	r2, sp, #9
 8009fcc:	eba2 020c 	sub.w	r2, r2, ip
 8009fd0:	42bc      	cmp	r4, r7
 8009fd2:	bf88      	it	hi
 8009fd4:	2200      	movhi	r2, #0
 8009fd6:	4413      	add	r3, r2
 8009fd8:	1a18      	subs	r0, r3, r0
 8009fda:	b003      	add	sp, #12
 8009fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fde:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009fe2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009fe6:	e7ed      	b.n	8009fc4 <__exponent+0x4c>
 8009fe8:	2330      	movs	r3, #48	; 0x30
 8009fea:	3130      	adds	r1, #48	; 0x30
 8009fec:	7083      	strb	r3, [r0, #2]
 8009fee:	70c1      	strb	r1, [r0, #3]
 8009ff0:	1d03      	adds	r3, r0, #4
 8009ff2:	e7f1      	b.n	8009fd8 <__exponent+0x60>

08009ff4 <_printf_float>:
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	ed2d 8b02 	vpush	{d8}
 8009ffc:	b08d      	sub	sp, #52	; 0x34
 8009ffe:	460c      	mov	r4, r1
 800a000:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a004:	4616      	mov	r6, r2
 800a006:	461f      	mov	r7, r3
 800a008:	4605      	mov	r5, r0
 800a00a:	f000 fce7 	bl	800a9dc <_localeconv_r>
 800a00e:	f8d0 a000 	ldr.w	sl, [r0]
 800a012:	4650      	mov	r0, sl
 800a014:	f7f6 f92c 	bl	8000270 <strlen>
 800a018:	2300      	movs	r3, #0
 800a01a:	930a      	str	r3, [sp, #40]	; 0x28
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	9305      	str	r3, [sp, #20]
 800a020:	f8d8 3000 	ldr.w	r3, [r8]
 800a024:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a028:	3307      	adds	r3, #7
 800a02a:	f023 0307 	bic.w	r3, r3, #7
 800a02e:	f103 0208 	add.w	r2, r3, #8
 800a032:	f8c8 2000 	str.w	r2, [r8]
 800a036:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a03a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a03e:	9307      	str	r3, [sp, #28]
 800a040:	f8cd 8018 	str.w	r8, [sp, #24]
 800a044:	ee08 0a10 	vmov	s16, r0
 800a048:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a04c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a050:	4b9e      	ldr	r3, [pc, #632]	; (800a2cc <_printf_float+0x2d8>)
 800a052:	f04f 32ff 	mov.w	r2, #4294967295
 800a056:	f7f6 fd69 	bl	8000b2c <__aeabi_dcmpun>
 800a05a:	bb88      	cbnz	r0, 800a0c0 <_printf_float+0xcc>
 800a05c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a060:	4b9a      	ldr	r3, [pc, #616]	; (800a2cc <_printf_float+0x2d8>)
 800a062:	f04f 32ff 	mov.w	r2, #4294967295
 800a066:	f7f6 fd43 	bl	8000af0 <__aeabi_dcmple>
 800a06a:	bb48      	cbnz	r0, 800a0c0 <_printf_float+0xcc>
 800a06c:	2200      	movs	r2, #0
 800a06e:	2300      	movs	r3, #0
 800a070:	4640      	mov	r0, r8
 800a072:	4649      	mov	r1, r9
 800a074:	f7f6 fd32 	bl	8000adc <__aeabi_dcmplt>
 800a078:	b110      	cbz	r0, 800a080 <_printf_float+0x8c>
 800a07a:	232d      	movs	r3, #45	; 0x2d
 800a07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a080:	4a93      	ldr	r2, [pc, #588]	; (800a2d0 <_printf_float+0x2dc>)
 800a082:	4b94      	ldr	r3, [pc, #592]	; (800a2d4 <_printf_float+0x2e0>)
 800a084:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a088:	bf94      	ite	ls
 800a08a:	4690      	movls	r8, r2
 800a08c:	4698      	movhi	r8, r3
 800a08e:	2303      	movs	r3, #3
 800a090:	6123      	str	r3, [r4, #16]
 800a092:	9b05      	ldr	r3, [sp, #20]
 800a094:	f023 0304 	bic.w	r3, r3, #4
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	f04f 0900 	mov.w	r9, #0
 800a09e:	9700      	str	r7, [sp, #0]
 800a0a0:	4633      	mov	r3, r6
 800a0a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 f9da 	bl	800a460 <_printf_common>
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f040 8090 	bne.w	800a1d2 <_printf_float+0x1de>
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b6:	b00d      	add	sp, #52	; 0x34
 800a0b8:	ecbd 8b02 	vpop	{d8}
 800a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	f7f6 fd30 	bl	8000b2c <__aeabi_dcmpun>
 800a0cc:	b140      	cbz	r0, 800a0e0 <_printf_float+0xec>
 800a0ce:	464b      	mov	r3, r9
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bfbc      	itt	lt
 800a0d4:	232d      	movlt	r3, #45	; 0x2d
 800a0d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0da:	4a7f      	ldr	r2, [pc, #508]	; (800a2d8 <_printf_float+0x2e4>)
 800a0dc:	4b7f      	ldr	r3, [pc, #508]	; (800a2dc <_printf_float+0x2e8>)
 800a0de:	e7d1      	b.n	800a084 <_printf_float+0x90>
 800a0e0:	6863      	ldr	r3, [r4, #4]
 800a0e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0e6:	9206      	str	r2, [sp, #24]
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	d13f      	bne.n	800a16c <_printf_float+0x178>
 800a0ec:	2306      	movs	r3, #6
 800a0ee:	6063      	str	r3, [r4, #4]
 800a0f0:	9b05      	ldr	r3, [sp, #20]
 800a0f2:	6861      	ldr	r1, [r4, #4]
 800a0f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	ab0a      	add	r3, sp, #40	; 0x28
 800a0fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a102:	ab09      	add	r3, sp, #36	; 0x24
 800a104:	ec49 8b10 	vmov	d0, r8, r9
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	6022      	str	r2, [r4, #0]
 800a10c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a110:	4628      	mov	r0, r5
 800a112:	f7ff fecf 	bl	8009eb4 <__cvt>
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a11a:	2b47      	cmp	r3, #71	; 0x47
 800a11c:	4680      	mov	r8, r0
 800a11e:	d108      	bne.n	800a132 <_printf_float+0x13e>
 800a120:	1cc8      	adds	r0, r1, #3
 800a122:	db02      	blt.n	800a12a <_printf_float+0x136>
 800a124:	6863      	ldr	r3, [r4, #4]
 800a126:	4299      	cmp	r1, r3
 800a128:	dd41      	ble.n	800a1ae <_printf_float+0x1ba>
 800a12a:	f1ab 0302 	sub.w	r3, fp, #2
 800a12e:	fa5f fb83 	uxtb.w	fp, r3
 800a132:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a136:	d820      	bhi.n	800a17a <_printf_float+0x186>
 800a138:	3901      	subs	r1, #1
 800a13a:	465a      	mov	r2, fp
 800a13c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a140:	9109      	str	r1, [sp, #36]	; 0x24
 800a142:	f7ff ff19 	bl	8009f78 <__exponent>
 800a146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a148:	1813      	adds	r3, r2, r0
 800a14a:	2a01      	cmp	r2, #1
 800a14c:	4681      	mov	r9, r0
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	dc02      	bgt.n	800a158 <_printf_float+0x164>
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	07d2      	lsls	r2, r2, #31
 800a156:	d501      	bpl.n	800a15c <_printf_float+0x168>
 800a158:	3301      	adds	r3, #1
 800a15a:	6123      	str	r3, [r4, #16]
 800a15c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a160:	2b00      	cmp	r3, #0
 800a162:	d09c      	beq.n	800a09e <_printf_float+0xaa>
 800a164:	232d      	movs	r3, #45	; 0x2d
 800a166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a16a:	e798      	b.n	800a09e <_printf_float+0xaa>
 800a16c:	9a06      	ldr	r2, [sp, #24]
 800a16e:	2a47      	cmp	r2, #71	; 0x47
 800a170:	d1be      	bne.n	800a0f0 <_printf_float+0xfc>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1bc      	bne.n	800a0f0 <_printf_float+0xfc>
 800a176:	2301      	movs	r3, #1
 800a178:	e7b9      	b.n	800a0ee <_printf_float+0xfa>
 800a17a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a17e:	d118      	bne.n	800a1b2 <_printf_float+0x1be>
 800a180:	2900      	cmp	r1, #0
 800a182:	6863      	ldr	r3, [r4, #4]
 800a184:	dd0b      	ble.n	800a19e <_printf_float+0x1aa>
 800a186:	6121      	str	r1, [r4, #16]
 800a188:	b913      	cbnz	r3, 800a190 <_printf_float+0x19c>
 800a18a:	6822      	ldr	r2, [r4, #0]
 800a18c:	07d0      	lsls	r0, r2, #31
 800a18e:	d502      	bpl.n	800a196 <_printf_float+0x1a2>
 800a190:	3301      	adds	r3, #1
 800a192:	440b      	add	r3, r1
 800a194:	6123      	str	r3, [r4, #16]
 800a196:	65a1      	str	r1, [r4, #88]	; 0x58
 800a198:	f04f 0900 	mov.w	r9, #0
 800a19c:	e7de      	b.n	800a15c <_printf_float+0x168>
 800a19e:	b913      	cbnz	r3, 800a1a6 <_printf_float+0x1b2>
 800a1a0:	6822      	ldr	r2, [r4, #0]
 800a1a2:	07d2      	lsls	r2, r2, #31
 800a1a4:	d501      	bpl.n	800a1aa <_printf_float+0x1b6>
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	e7f4      	b.n	800a194 <_printf_float+0x1a0>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e7f2      	b.n	800a194 <_printf_float+0x1a0>
 800a1ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b4:	4299      	cmp	r1, r3
 800a1b6:	db05      	blt.n	800a1c4 <_printf_float+0x1d0>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	6121      	str	r1, [r4, #16]
 800a1bc:	07d8      	lsls	r0, r3, #31
 800a1be:	d5ea      	bpl.n	800a196 <_printf_float+0x1a2>
 800a1c0:	1c4b      	adds	r3, r1, #1
 800a1c2:	e7e7      	b.n	800a194 <_printf_float+0x1a0>
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	bfd4      	ite	le
 800a1c8:	f1c1 0202 	rsble	r2, r1, #2
 800a1cc:	2201      	movgt	r2, #1
 800a1ce:	4413      	add	r3, r2
 800a1d0:	e7e0      	b.n	800a194 <_printf_float+0x1a0>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	055a      	lsls	r2, r3, #21
 800a1d6:	d407      	bmi.n	800a1e8 <_printf_float+0x1f4>
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	4642      	mov	r2, r8
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	d12c      	bne.n	800a240 <_printf_float+0x24c>
 800a1e6:	e764      	b.n	800a0b2 <_printf_float+0xbe>
 800a1e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1ec:	f240 80e0 	bls.w	800a3b0 <_printf_float+0x3bc>
 800a1f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f7f6 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d034      	beq.n	800a26a <_printf_float+0x276>
 800a200:	4a37      	ldr	r2, [pc, #220]	; (800a2e0 <_printf_float+0x2ec>)
 800a202:	2301      	movs	r3, #1
 800a204:	4631      	mov	r1, r6
 800a206:	4628      	mov	r0, r5
 800a208:	47b8      	blx	r7
 800a20a:	3001      	adds	r0, #1
 800a20c:	f43f af51 	beq.w	800a0b2 <_printf_float+0xbe>
 800a210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a214:	429a      	cmp	r2, r3
 800a216:	db02      	blt.n	800a21e <_printf_float+0x22a>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	07d8      	lsls	r0, r3, #31
 800a21c:	d510      	bpl.n	800a240 <_printf_float+0x24c>
 800a21e:	ee18 3a10 	vmov	r3, s16
 800a222:	4652      	mov	r2, sl
 800a224:	4631      	mov	r1, r6
 800a226:	4628      	mov	r0, r5
 800a228:	47b8      	blx	r7
 800a22a:	3001      	adds	r0, #1
 800a22c:	f43f af41 	beq.w	800a0b2 <_printf_float+0xbe>
 800a230:	f04f 0800 	mov.w	r8, #0
 800a234:	f104 091a 	add.w	r9, r4, #26
 800a238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a23a:	3b01      	subs	r3, #1
 800a23c:	4543      	cmp	r3, r8
 800a23e:	dc09      	bgt.n	800a254 <_printf_float+0x260>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	079b      	lsls	r3, r3, #30
 800a244:	f100 8107 	bmi.w	800a456 <_printf_float+0x462>
 800a248:	68e0      	ldr	r0, [r4, #12]
 800a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24c:	4298      	cmp	r0, r3
 800a24e:	bfb8      	it	lt
 800a250:	4618      	movlt	r0, r3
 800a252:	e730      	b.n	800a0b6 <_printf_float+0xc2>
 800a254:	2301      	movs	r3, #1
 800a256:	464a      	mov	r2, r9
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b8      	blx	r7
 800a25e:	3001      	adds	r0, #1
 800a260:	f43f af27 	beq.w	800a0b2 <_printf_float+0xbe>
 800a264:	f108 0801 	add.w	r8, r8, #1
 800a268:	e7e6      	b.n	800a238 <_printf_float+0x244>
 800a26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dc39      	bgt.n	800a2e4 <_printf_float+0x2f0>
 800a270:	4a1b      	ldr	r2, [pc, #108]	; (800a2e0 <_printf_float+0x2ec>)
 800a272:	2301      	movs	r3, #1
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	f43f af19 	beq.w	800a0b2 <_printf_float+0xbe>
 800a280:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a284:	4313      	orrs	r3, r2
 800a286:	d102      	bne.n	800a28e <_printf_float+0x29a>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	07d9      	lsls	r1, r3, #31
 800a28c:	d5d8      	bpl.n	800a240 <_printf_float+0x24c>
 800a28e:	ee18 3a10 	vmov	r3, s16
 800a292:	4652      	mov	r2, sl
 800a294:	4631      	mov	r1, r6
 800a296:	4628      	mov	r0, r5
 800a298:	47b8      	blx	r7
 800a29a:	3001      	adds	r0, #1
 800a29c:	f43f af09 	beq.w	800a0b2 <_printf_float+0xbe>
 800a2a0:	f04f 0900 	mov.w	r9, #0
 800a2a4:	f104 0a1a 	add.w	sl, r4, #26
 800a2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2aa:	425b      	negs	r3, r3
 800a2ac:	454b      	cmp	r3, r9
 800a2ae:	dc01      	bgt.n	800a2b4 <_printf_float+0x2c0>
 800a2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b2:	e792      	b.n	800a1da <_printf_float+0x1e6>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4652      	mov	r2, sl
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f aef7 	beq.w	800a0b2 <_printf_float+0xbe>
 800a2c4:	f109 0901 	add.w	r9, r9, #1
 800a2c8:	e7ee      	b.n	800a2a8 <_printf_float+0x2b4>
 800a2ca:	bf00      	nop
 800a2cc:	7fefffff 	.word	0x7fefffff
 800a2d0:	0800cc74 	.word	0x0800cc74
 800a2d4:	0800cc78 	.word	0x0800cc78
 800a2d8:	0800cc7c 	.word	0x0800cc7c
 800a2dc:	0800cc80 	.word	0x0800cc80
 800a2e0:	0800cc84 	.word	0x0800cc84
 800a2e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	bfa8      	it	ge
 800a2ec:	461a      	movge	r2, r3
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	4691      	mov	r9, r2
 800a2f2:	dc37      	bgt.n	800a364 <_printf_float+0x370>
 800a2f4:	f04f 0b00 	mov.w	fp, #0
 800a2f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2fc:	f104 021a 	add.w	r2, r4, #26
 800a300:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a302:	9305      	str	r3, [sp, #20]
 800a304:	eba3 0309 	sub.w	r3, r3, r9
 800a308:	455b      	cmp	r3, fp
 800a30a:	dc33      	bgt.n	800a374 <_printf_float+0x380>
 800a30c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a310:	429a      	cmp	r2, r3
 800a312:	db3b      	blt.n	800a38c <_printf_float+0x398>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	07da      	lsls	r2, r3, #31
 800a318:	d438      	bmi.n	800a38c <_printf_float+0x398>
 800a31a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a31e:	eba2 0903 	sub.w	r9, r2, r3
 800a322:	9b05      	ldr	r3, [sp, #20]
 800a324:	1ad2      	subs	r2, r2, r3
 800a326:	4591      	cmp	r9, r2
 800a328:	bfa8      	it	ge
 800a32a:	4691      	movge	r9, r2
 800a32c:	f1b9 0f00 	cmp.w	r9, #0
 800a330:	dc35      	bgt.n	800a39e <_printf_float+0x3aa>
 800a332:	f04f 0800 	mov.w	r8, #0
 800a336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a33a:	f104 0a1a 	add.w	sl, r4, #26
 800a33e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a342:	1a9b      	subs	r3, r3, r2
 800a344:	eba3 0309 	sub.w	r3, r3, r9
 800a348:	4543      	cmp	r3, r8
 800a34a:	f77f af79 	ble.w	800a240 <_printf_float+0x24c>
 800a34e:	2301      	movs	r3, #1
 800a350:	4652      	mov	r2, sl
 800a352:	4631      	mov	r1, r6
 800a354:	4628      	mov	r0, r5
 800a356:	47b8      	blx	r7
 800a358:	3001      	adds	r0, #1
 800a35a:	f43f aeaa 	beq.w	800a0b2 <_printf_float+0xbe>
 800a35e:	f108 0801 	add.w	r8, r8, #1
 800a362:	e7ec      	b.n	800a33e <_printf_float+0x34a>
 800a364:	4613      	mov	r3, r2
 800a366:	4631      	mov	r1, r6
 800a368:	4642      	mov	r2, r8
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	d1c0      	bne.n	800a2f4 <_printf_float+0x300>
 800a372:	e69e      	b.n	800a0b2 <_printf_float+0xbe>
 800a374:	2301      	movs	r3, #1
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	9205      	str	r2, [sp, #20]
 800a37c:	47b8      	blx	r7
 800a37e:	3001      	adds	r0, #1
 800a380:	f43f ae97 	beq.w	800a0b2 <_printf_float+0xbe>
 800a384:	9a05      	ldr	r2, [sp, #20]
 800a386:	f10b 0b01 	add.w	fp, fp, #1
 800a38a:	e7b9      	b.n	800a300 <_printf_float+0x30c>
 800a38c:	ee18 3a10 	vmov	r3, s16
 800a390:	4652      	mov	r2, sl
 800a392:	4631      	mov	r1, r6
 800a394:	4628      	mov	r0, r5
 800a396:	47b8      	blx	r7
 800a398:	3001      	adds	r0, #1
 800a39a:	d1be      	bne.n	800a31a <_printf_float+0x326>
 800a39c:	e689      	b.n	800a0b2 <_printf_float+0xbe>
 800a39e:	9a05      	ldr	r2, [sp, #20]
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	4442      	add	r2, r8
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	47b8      	blx	r7
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	d1c1      	bne.n	800a332 <_printf_float+0x33e>
 800a3ae:	e680      	b.n	800a0b2 <_printf_float+0xbe>
 800a3b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b2:	2a01      	cmp	r2, #1
 800a3b4:	dc01      	bgt.n	800a3ba <_printf_float+0x3c6>
 800a3b6:	07db      	lsls	r3, r3, #31
 800a3b8:	d53a      	bpl.n	800a430 <_printf_float+0x43c>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	4642      	mov	r2, r8
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	f43f ae74 	beq.w	800a0b2 <_printf_float+0xbe>
 800a3ca:	ee18 3a10 	vmov	r3, s16
 800a3ce:	4652      	mov	r2, sl
 800a3d0:	4631      	mov	r1, r6
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b8      	blx	r7
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	f43f ae6b 	beq.w	800a0b2 <_printf_float+0xbe>
 800a3dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a3e8:	f7f6 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ec:	b9d8      	cbnz	r0, 800a426 <_printf_float+0x432>
 800a3ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a3f2:	f108 0201 	add.w	r2, r8, #1
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	47b8      	blx	r7
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	d10e      	bne.n	800a41e <_printf_float+0x42a>
 800a400:	e657      	b.n	800a0b2 <_printf_float+0xbe>
 800a402:	2301      	movs	r3, #1
 800a404:	4652      	mov	r2, sl
 800a406:	4631      	mov	r1, r6
 800a408:	4628      	mov	r0, r5
 800a40a:	47b8      	blx	r7
 800a40c:	3001      	adds	r0, #1
 800a40e:	f43f ae50 	beq.w	800a0b2 <_printf_float+0xbe>
 800a412:	f108 0801 	add.w	r8, r8, #1
 800a416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a418:	3b01      	subs	r3, #1
 800a41a:	4543      	cmp	r3, r8
 800a41c:	dcf1      	bgt.n	800a402 <_printf_float+0x40e>
 800a41e:	464b      	mov	r3, r9
 800a420:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a424:	e6da      	b.n	800a1dc <_printf_float+0x1e8>
 800a426:	f04f 0800 	mov.w	r8, #0
 800a42a:	f104 0a1a 	add.w	sl, r4, #26
 800a42e:	e7f2      	b.n	800a416 <_printf_float+0x422>
 800a430:	2301      	movs	r3, #1
 800a432:	4642      	mov	r2, r8
 800a434:	e7df      	b.n	800a3f6 <_printf_float+0x402>
 800a436:	2301      	movs	r3, #1
 800a438:	464a      	mov	r2, r9
 800a43a:	4631      	mov	r1, r6
 800a43c:	4628      	mov	r0, r5
 800a43e:	47b8      	blx	r7
 800a440:	3001      	adds	r0, #1
 800a442:	f43f ae36 	beq.w	800a0b2 <_printf_float+0xbe>
 800a446:	f108 0801 	add.w	r8, r8, #1
 800a44a:	68e3      	ldr	r3, [r4, #12]
 800a44c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a44e:	1a5b      	subs	r3, r3, r1
 800a450:	4543      	cmp	r3, r8
 800a452:	dcf0      	bgt.n	800a436 <_printf_float+0x442>
 800a454:	e6f8      	b.n	800a248 <_printf_float+0x254>
 800a456:	f04f 0800 	mov.w	r8, #0
 800a45a:	f104 0919 	add.w	r9, r4, #25
 800a45e:	e7f4      	b.n	800a44a <_printf_float+0x456>

0800a460 <_printf_common>:
 800a460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	4616      	mov	r6, r2
 800a466:	4699      	mov	r9, r3
 800a468:	688a      	ldr	r2, [r1, #8]
 800a46a:	690b      	ldr	r3, [r1, #16]
 800a46c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a470:	4293      	cmp	r3, r2
 800a472:	bfb8      	it	lt
 800a474:	4613      	movlt	r3, r2
 800a476:	6033      	str	r3, [r6, #0]
 800a478:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a47c:	4607      	mov	r7, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	b10a      	cbz	r2, 800a486 <_printf_common+0x26>
 800a482:	3301      	adds	r3, #1
 800a484:	6033      	str	r3, [r6, #0]
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	0699      	lsls	r1, r3, #26
 800a48a:	bf42      	ittt	mi
 800a48c:	6833      	ldrmi	r3, [r6, #0]
 800a48e:	3302      	addmi	r3, #2
 800a490:	6033      	strmi	r3, [r6, #0]
 800a492:	6825      	ldr	r5, [r4, #0]
 800a494:	f015 0506 	ands.w	r5, r5, #6
 800a498:	d106      	bne.n	800a4a8 <_printf_common+0x48>
 800a49a:	f104 0a19 	add.w	sl, r4, #25
 800a49e:	68e3      	ldr	r3, [r4, #12]
 800a4a0:	6832      	ldr	r2, [r6, #0]
 800a4a2:	1a9b      	subs	r3, r3, r2
 800a4a4:	42ab      	cmp	r3, r5
 800a4a6:	dc26      	bgt.n	800a4f6 <_printf_common+0x96>
 800a4a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4ac:	1e13      	subs	r3, r2, #0
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	bf18      	it	ne
 800a4b2:	2301      	movne	r3, #1
 800a4b4:	0692      	lsls	r2, r2, #26
 800a4b6:	d42b      	bmi.n	800a510 <_printf_common+0xb0>
 800a4b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4bc:	4649      	mov	r1, r9
 800a4be:	4638      	mov	r0, r7
 800a4c0:	47c0      	blx	r8
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	d01e      	beq.n	800a504 <_printf_common+0xa4>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	6922      	ldr	r2, [r4, #16]
 800a4ca:	f003 0306 	and.w	r3, r3, #6
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	bf02      	ittt	eq
 800a4d2:	68e5      	ldreq	r5, [r4, #12]
 800a4d4:	6833      	ldreq	r3, [r6, #0]
 800a4d6:	1aed      	subeq	r5, r5, r3
 800a4d8:	68a3      	ldr	r3, [r4, #8]
 800a4da:	bf0c      	ite	eq
 800a4dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4e0:	2500      	movne	r5, #0
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	bfc4      	itt	gt
 800a4e6:	1a9b      	subgt	r3, r3, r2
 800a4e8:	18ed      	addgt	r5, r5, r3
 800a4ea:	2600      	movs	r6, #0
 800a4ec:	341a      	adds	r4, #26
 800a4ee:	42b5      	cmp	r5, r6
 800a4f0:	d11a      	bne.n	800a528 <_printf_common+0xc8>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e008      	b.n	800a508 <_printf_common+0xa8>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4652      	mov	r2, sl
 800a4fa:	4649      	mov	r1, r9
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	47c0      	blx	r8
 800a500:	3001      	adds	r0, #1
 800a502:	d103      	bne.n	800a50c <_printf_common+0xac>
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50c:	3501      	adds	r5, #1
 800a50e:	e7c6      	b.n	800a49e <_printf_common+0x3e>
 800a510:	18e1      	adds	r1, r4, r3
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	2030      	movs	r0, #48	; 0x30
 800a516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a51a:	4422      	add	r2, r4
 800a51c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a524:	3302      	adds	r3, #2
 800a526:	e7c7      	b.n	800a4b8 <_printf_common+0x58>
 800a528:	2301      	movs	r3, #1
 800a52a:	4622      	mov	r2, r4
 800a52c:	4649      	mov	r1, r9
 800a52e:	4638      	mov	r0, r7
 800a530:	47c0      	blx	r8
 800a532:	3001      	adds	r0, #1
 800a534:	d0e6      	beq.n	800a504 <_printf_common+0xa4>
 800a536:	3601      	adds	r6, #1
 800a538:	e7d9      	b.n	800a4ee <_printf_common+0x8e>
	...

0800a53c <_printf_i>:
 800a53c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a540:	7e0f      	ldrb	r7, [r1, #24]
 800a542:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a544:	2f78      	cmp	r7, #120	; 0x78
 800a546:	4691      	mov	r9, r2
 800a548:	4680      	mov	r8, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	469a      	mov	sl, r3
 800a54e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a552:	d807      	bhi.n	800a564 <_printf_i+0x28>
 800a554:	2f62      	cmp	r7, #98	; 0x62
 800a556:	d80a      	bhi.n	800a56e <_printf_i+0x32>
 800a558:	2f00      	cmp	r7, #0
 800a55a:	f000 80d4 	beq.w	800a706 <_printf_i+0x1ca>
 800a55e:	2f58      	cmp	r7, #88	; 0x58
 800a560:	f000 80c0 	beq.w	800a6e4 <_printf_i+0x1a8>
 800a564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a568:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a56c:	e03a      	b.n	800a5e4 <_printf_i+0xa8>
 800a56e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a572:	2b15      	cmp	r3, #21
 800a574:	d8f6      	bhi.n	800a564 <_printf_i+0x28>
 800a576:	a101      	add	r1, pc, #4	; (adr r1, 800a57c <_printf_i+0x40>)
 800a578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a57c:	0800a5d5 	.word	0x0800a5d5
 800a580:	0800a5e9 	.word	0x0800a5e9
 800a584:	0800a565 	.word	0x0800a565
 800a588:	0800a565 	.word	0x0800a565
 800a58c:	0800a565 	.word	0x0800a565
 800a590:	0800a565 	.word	0x0800a565
 800a594:	0800a5e9 	.word	0x0800a5e9
 800a598:	0800a565 	.word	0x0800a565
 800a59c:	0800a565 	.word	0x0800a565
 800a5a0:	0800a565 	.word	0x0800a565
 800a5a4:	0800a565 	.word	0x0800a565
 800a5a8:	0800a6ed 	.word	0x0800a6ed
 800a5ac:	0800a615 	.word	0x0800a615
 800a5b0:	0800a6a7 	.word	0x0800a6a7
 800a5b4:	0800a565 	.word	0x0800a565
 800a5b8:	0800a565 	.word	0x0800a565
 800a5bc:	0800a70f 	.word	0x0800a70f
 800a5c0:	0800a565 	.word	0x0800a565
 800a5c4:	0800a615 	.word	0x0800a615
 800a5c8:	0800a565 	.word	0x0800a565
 800a5cc:	0800a565 	.word	0x0800a565
 800a5d0:	0800a6af 	.word	0x0800a6af
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	602a      	str	r2, [r5, #0]
 800a5dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e09f      	b.n	800a728 <_printf_i+0x1ec>
 800a5e8:	6820      	ldr	r0, [r4, #0]
 800a5ea:	682b      	ldr	r3, [r5, #0]
 800a5ec:	0607      	lsls	r7, r0, #24
 800a5ee:	f103 0104 	add.w	r1, r3, #4
 800a5f2:	6029      	str	r1, [r5, #0]
 800a5f4:	d501      	bpl.n	800a5fa <_printf_i+0xbe>
 800a5f6:	681e      	ldr	r6, [r3, #0]
 800a5f8:	e003      	b.n	800a602 <_printf_i+0xc6>
 800a5fa:	0646      	lsls	r6, r0, #25
 800a5fc:	d5fb      	bpl.n	800a5f6 <_printf_i+0xba>
 800a5fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a602:	2e00      	cmp	r6, #0
 800a604:	da03      	bge.n	800a60e <_printf_i+0xd2>
 800a606:	232d      	movs	r3, #45	; 0x2d
 800a608:	4276      	negs	r6, r6
 800a60a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a60e:	485a      	ldr	r0, [pc, #360]	; (800a778 <_printf_i+0x23c>)
 800a610:	230a      	movs	r3, #10
 800a612:	e012      	b.n	800a63a <_printf_i+0xfe>
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	6820      	ldr	r0, [r4, #0]
 800a618:	1d19      	adds	r1, r3, #4
 800a61a:	6029      	str	r1, [r5, #0]
 800a61c:	0605      	lsls	r5, r0, #24
 800a61e:	d501      	bpl.n	800a624 <_printf_i+0xe8>
 800a620:	681e      	ldr	r6, [r3, #0]
 800a622:	e002      	b.n	800a62a <_printf_i+0xee>
 800a624:	0641      	lsls	r1, r0, #25
 800a626:	d5fb      	bpl.n	800a620 <_printf_i+0xe4>
 800a628:	881e      	ldrh	r6, [r3, #0]
 800a62a:	4853      	ldr	r0, [pc, #332]	; (800a778 <_printf_i+0x23c>)
 800a62c:	2f6f      	cmp	r7, #111	; 0x6f
 800a62e:	bf0c      	ite	eq
 800a630:	2308      	moveq	r3, #8
 800a632:	230a      	movne	r3, #10
 800a634:	2100      	movs	r1, #0
 800a636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a63a:	6865      	ldr	r5, [r4, #4]
 800a63c:	60a5      	str	r5, [r4, #8]
 800a63e:	2d00      	cmp	r5, #0
 800a640:	bfa2      	ittt	ge
 800a642:	6821      	ldrge	r1, [r4, #0]
 800a644:	f021 0104 	bicge.w	r1, r1, #4
 800a648:	6021      	strge	r1, [r4, #0]
 800a64a:	b90e      	cbnz	r6, 800a650 <_printf_i+0x114>
 800a64c:	2d00      	cmp	r5, #0
 800a64e:	d04b      	beq.n	800a6e8 <_printf_i+0x1ac>
 800a650:	4615      	mov	r5, r2
 800a652:	fbb6 f1f3 	udiv	r1, r6, r3
 800a656:	fb03 6711 	mls	r7, r3, r1, r6
 800a65a:	5dc7      	ldrb	r7, [r0, r7]
 800a65c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a660:	4637      	mov	r7, r6
 800a662:	42bb      	cmp	r3, r7
 800a664:	460e      	mov	r6, r1
 800a666:	d9f4      	bls.n	800a652 <_printf_i+0x116>
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d10b      	bne.n	800a684 <_printf_i+0x148>
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	07de      	lsls	r6, r3, #31
 800a670:	d508      	bpl.n	800a684 <_printf_i+0x148>
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	6861      	ldr	r1, [r4, #4]
 800a676:	4299      	cmp	r1, r3
 800a678:	bfde      	ittt	le
 800a67a:	2330      	movle	r3, #48	; 0x30
 800a67c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a680:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a684:	1b52      	subs	r2, r2, r5
 800a686:	6122      	str	r2, [r4, #16]
 800a688:	f8cd a000 	str.w	sl, [sp]
 800a68c:	464b      	mov	r3, r9
 800a68e:	aa03      	add	r2, sp, #12
 800a690:	4621      	mov	r1, r4
 800a692:	4640      	mov	r0, r8
 800a694:	f7ff fee4 	bl	800a460 <_printf_common>
 800a698:	3001      	adds	r0, #1
 800a69a:	d14a      	bne.n	800a732 <_printf_i+0x1f6>
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a0:	b004      	add	sp, #16
 800a6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	f043 0320 	orr.w	r3, r3, #32
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	4833      	ldr	r0, [pc, #204]	; (800a77c <_printf_i+0x240>)
 800a6b0:	2778      	movs	r7, #120	; 0x78
 800a6b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	6829      	ldr	r1, [r5, #0]
 800a6ba:	061f      	lsls	r7, r3, #24
 800a6bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6c0:	d402      	bmi.n	800a6c8 <_printf_i+0x18c>
 800a6c2:	065f      	lsls	r7, r3, #25
 800a6c4:	bf48      	it	mi
 800a6c6:	b2b6      	uxthmi	r6, r6
 800a6c8:	07df      	lsls	r7, r3, #31
 800a6ca:	bf48      	it	mi
 800a6cc:	f043 0320 	orrmi.w	r3, r3, #32
 800a6d0:	6029      	str	r1, [r5, #0]
 800a6d2:	bf48      	it	mi
 800a6d4:	6023      	strmi	r3, [r4, #0]
 800a6d6:	b91e      	cbnz	r6, 800a6e0 <_printf_i+0x1a4>
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	f023 0320 	bic.w	r3, r3, #32
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	2310      	movs	r3, #16
 800a6e2:	e7a7      	b.n	800a634 <_printf_i+0xf8>
 800a6e4:	4824      	ldr	r0, [pc, #144]	; (800a778 <_printf_i+0x23c>)
 800a6e6:	e7e4      	b.n	800a6b2 <_printf_i+0x176>
 800a6e8:	4615      	mov	r5, r2
 800a6ea:	e7bd      	b.n	800a668 <_printf_i+0x12c>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	6826      	ldr	r6, [r4, #0]
 800a6f0:	6961      	ldr	r1, [r4, #20]
 800a6f2:	1d18      	adds	r0, r3, #4
 800a6f4:	6028      	str	r0, [r5, #0]
 800a6f6:	0635      	lsls	r5, r6, #24
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	d501      	bpl.n	800a700 <_printf_i+0x1c4>
 800a6fc:	6019      	str	r1, [r3, #0]
 800a6fe:	e002      	b.n	800a706 <_printf_i+0x1ca>
 800a700:	0670      	lsls	r0, r6, #25
 800a702:	d5fb      	bpl.n	800a6fc <_printf_i+0x1c0>
 800a704:	8019      	strh	r1, [r3, #0]
 800a706:	2300      	movs	r3, #0
 800a708:	6123      	str	r3, [r4, #16]
 800a70a:	4615      	mov	r5, r2
 800a70c:	e7bc      	b.n	800a688 <_printf_i+0x14c>
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	1d1a      	adds	r2, r3, #4
 800a712:	602a      	str	r2, [r5, #0]
 800a714:	681d      	ldr	r5, [r3, #0]
 800a716:	6862      	ldr	r2, [r4, #4]
 800a718:	2100      	movs	r1, #0
 800a71a:	4628      	mov	r0, r5
 800a71c:	f7f5 fd58 	bl	80001d0 <memchr>
 800a720:	b108      	cbz	r0, 800a726 <_printf_i+0x1ea>
 800a722:	1b40      	subs	r0, r0, r5
 800a724:	6060      	str	r0, [r4, #4]
 800a726:	6863      	ldr	r3, [r4, #4]
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	2300      	movs	r3, #0
 800a72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a730:	e7aa      	b.n	800a688 <_printf_i+0x14c>
 800a732:	6923      	ldr	r3, [r4, #16]
 800a734:	462a      	mov	r2, r5
 800a736:	4649      	mov	r1, r9
 800a738:	4640      	mov	r0, r8
 800a73a:	47d0      	blx	sl
 800a73c:	3001      	adds	r0, #1
 800a73e:	d0ad      	beq.n	800a69c <_printf_i+0x160>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	079b      	lsls	r3, r3, #30
 800a744:	d413      	bmi.n	800a76e <_printf_i+0x232>
 800a746:	68e0      	ldr	r0, [r4, #12]
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	4298      	cmp	r0, r3
 800a74c:	bfb8      	it	lt
 800a74e:	4618      	movlt	r0, r3
 800a750:	e7a6      	b.n	800a6a0 <_printf_i+0x164>
 800a752:	2301      	movs	r3, #1
 800a754:	4632      	mov	r2, r6
 800a756:	4649      	mov	r1, r9
 800a758:	4640      	mov	r0, r8
 800a75a:	47d0      	blx	sl
 800a75c:	3001      	adds	r0, #1
 800a75e:	d09d      	beq.n	800a69c <_printf_i+0x160>
 800a760:	3501      	adds	r5, #1
 800a762:	68e3      	ldr	r3, [r4, #12]
 800a764:	9903      	ldr	r1, [sp, #12]
 800a766:	1a5b      	subs	r3, r3, r1
 800a768:	42ab      	cmp	r3, r5
 800a76a:	dcf2      	bgt.n	800a752 <_printf_i+0x216>
 800a76c:	e7eb      	b.n	800a746 <_printf_i+0x20a>
 800a76e:	2500      	movs	r5, #0
 800a770:	f104 0619 	add.w	r6, r4, #25
 800a774:	e7f5      	b.n	800a762 <_printf_i+0x226>
 800a776:	bf00      	nop
 800a778:	0800cc86 	.word	0x0800cc86
 800a77c:	0800cc97 	.word	0x0800cc97

0800a780 <std>:
 800a780:	2300      	movs	r3, #0
 800a782:	b510      	push	{r4, lr}
 800a784:	4604      	mov	r4, r0
 800a786:	e9c0 3300 	strd	r3, r3, [r0]
 800a78a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a78e:	6083      	str	r3, [r0, #8]
 800a790:	8181      	strh	r1, [r0, #12]
 800a792:	6643      	str	r3, [r0, #100]	; 0x64
 800a794:	81c2      	strh	r2, [r0, #14]
 800a796:	6183      	str	r3, [r0, #24]
 800a798:	4619      	mov	r1, r3
 800a79a:	2208      	movs	r2, #8
 800a79c:	305c      	adds	r0, #92	; 0x5c
 800a79e:	f000 f914 	bl	800a9ca <memset>
 800a7a2:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <std+0x58>)
 800a7a4:	6263      	str	r3, [r4, #36]	; 0x24
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <std+0x5c>)
 800a7a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7aa:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <std+0x60>)
 800a7ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7ae:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <std+0x64>)
 800a7b0:	6323      	str	r3, [r4, #48]	; 0x30
 800a7b2:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <std+0x68>)
 800a7b4:	6224      	str	r4, [r4, #32]
 800a7b6:	429c      	cmp	r4, r3
 800a7b8:	d006      	beq.n	800a7c8 <std+0x48>
 800a7ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a7be:	4294      	cmp	r4, r2
 800a7c0:	d002      	beq.n	800a7c8 <std+0x48>
 800a7c2:	33d0      	adds	r3, #208	; 0xd0
 800a7c4:	429c      	cmp	r4, r3
 800a7c6:	d105      	bne.n	800a7d4 <std+0x54>
 800a7c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7d0:	f000 b978 	b.w	800aac4 <__retarget_lock_init_recursive>
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	bf00      	nop
 800a7d8:	0800a945 	.word	0x0800a945
 800a7dc:	0800a967 	.word	0x0800a967
 800a7e0:	0800a99f 	.word	0x0800a99f
 800a7e4:	0800a9c3 	.word	0x0800a9c3
 800a7e8:	20001628 	.word	0x20001628

0800a7ec <stdio_exit_handler>:
 800a7ec:	4a02      	ldr	r2, [pc, #8]	; (800a7f8 <stdio_exit_handler+0xc>)
 800a7ee:	4903      	ldr	r1, [pc, #12]	; (800a7fc <stdio_exit_handler+0x10>)
 800a7f0:	4803      	ldr	r0, [pc, #12]	; (800a800 <stdio_exit_handler+0x14>)
 800a7f2:	f000 b869 	b.w	800a8c8 <_fwalk_sglue>
 800a7f6:	bf00      	nop
 800a7f8:	2000017c 	.word	0x2000017c
 800a7fc:	0800c479 	.word	0x0800c479
 800a800:	20000188 	.word	0x20000188

0800a804 <cleanup_stdio>:
 800a804:	6841      	ldr	r1, [r0, #4]
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <cleanup_stdio+0x34>)
 800a808:	4299      	cmp	r1, r3
 800a80a:	b510      	push	{r4, lr}
 800a80c:	4604      	mov	r4, r0
 800a80e:	d001      	beq.n	800a814 <cleanup_stdio+0x10>
 800a810:	f001 fe32 	bl	800c478 <_fflush_r>
 800a814:	68a1      	ldr	r1, [r4, #8]
 800a816:	4b09      	ldr	r3, [pc, #36]	; (800a83c <cleanup_stdio+0x38>)
 800a818:	4299      	cmp	r1, r3
 800a81a:	d002      	beq.n	800a822 <cleanup_stdio+0x1e>
 800a81c:	4620      	mov	r0, r4
 800a81e:	f001 fe2b 	bl	800c478 <_fflush_r>
 800a822:	68e1      	ldr	r1, [r4, #12]
 800a824:	4b06      	ldr	r3, [pc, #24]	; (800a840 <cleanup_stdio+0x3c>)
 800a826:	4299      	cmp	r1, r3
 800a828:	d004      	beq.n	800a834 <cleanup_stdio+0x30>
 800a82a:	4620      	mov	r0, r4
 800a82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a830:	f001 be22 	b.w	800c478 <_fflush_r>
 800a834:	bd10      	pop	{r4, pc}
 800a836:	bf00      	nop
 800a838:	20001628 	.word	0x20001628
 800a83c:	20001690 	.word	0x20001690
 800a840:	200016f8 	.word	0x200016f8

0800a844 <global_stdio_init.part.0>:
 800a844:	b510      	push	{r4, lr}
 800a846:	4b0b      	ldr	r3, [pc, #44]	; (800a874 <global_stdio_init.part.0+0x30>)
 800a848:	4c0b      	ldr	r4, [pc, #44]	; (800a878 <global_stdio_init.part.0+0x34>)
 800a84a:	4a0c      	ldr	r2, [pc, #48]	; (800a87c <global_stdio_init.part.0+0x38>)
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	4620      	mov	r0, r4
 800a850:	2200      	movs	r2, #0
 800a852:	2104      	movs	r1, #4
 800a854:	f7ff ff94 	bl	800a780 <std>
 800a858:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a85c:	2201      	movs	r2, #1
 800a85e:	2109      	movs	r1, #9
 800a860:	f7ff ff8e 	bl	800a780 <std>
 800a864:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a868:	2202      	movs	r2, #2
 800a86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a86e:	2112      	movs	r1, #18
 800a870:	f7ff bf86 	b.w	800a780 <std>
 800a874:	20001760 	.word	0x20001760
 800a878:	20001628 	.word	0x20001628
 800a87c:	0800a7ed 	.word	0x0800a7ed

0800a880 <__sfp_lock_acquire>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__sfp_lock_acquire+0x8>)
 800a882:	f000 b920 	b.w	800aac6 <__retarget_lock_acquire_recursive>
 800a886:	bf00      	nop
 800a888:	20001769 	.word	0x20001769

0800a88c <__sfp_lock_release>:
 800a88c:	4801      	ldr	r0, [pc, #4]	; (800a894 <__sfp_lock_release+0x8>)
 800a88e:	f000 b91b 	b.w	800aac8 <__retarget_lock_release_recursive>
 800a892:	bf00      	nop
 800a894:	20001769 	.word	0x20001769

0800a898 <__sinit>:
 800a898:	b510      	push	{r4, lr}
 800a89a:	4604      	mov	r4, r0
 800a89c:	f7ff fff0 	bl	800a880 <__sfp_lock_acquire>
 800a8a0:	6a23      	ldr	r3, [r4, #32]
 800a8a2:	b11b      	cbz	r3, 800a8ac <__sinit+0x14>
 800a8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8a8:	f7ff bff0 	b.w	800a88c <__sfp_lock_release>
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <__sinit+0x28>)
 800a8ae:	6223      	str	r3, [r4, #32]
 800a8b0:	4b04      	ldr	r3, [pc, #16]	; (800a8c4 <__sinit+0x2c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f5      	bne.n	800a8a4 <__sinit+0xc>
 800a8b8:	f7ff ffc4 	bl	800a844 <global_stdio_init.part.0>
 800a8bc:	e7f2      	b.n	800a8a4 <__sinit+0xc>
 800a8be:	bf00      	nop
 800a8c0:	0800a805 	.word	0x0800a805
 800a8c4:	20001760 	.word	0x20001760

0800a8c8 <_fwalk_sglue>:
 800a8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	4688      	mov	r8, r1
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	2600      	movs	r6, #0
 800a8d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8d8:	f1b9 0901 	subs.w	r9, r9, #1
 800a8dc:	d505      	bpl.n	800a8ea <_fwalk_sglue+0x22>
 800a8de:	6824      	ldr	r4, [r4, #0]
 800a8e0:	2c00      	cmp	r4, #0
 800a8e2:	d1f7      	bne.n	800a8d4 <_fwalk_sglue+0xc>
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ea:	89ab      	ldrh	r3, [r5, #12]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d907      	bls.n	800a900 <_fwalk_sglue+0x38>
 800a8f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	d003      	beq.n	800a900 <_fwalk_sglue+0x38>
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	47c0      	blx	r8
 800a8fe:	4306      	orrs	r6, r0
 800a900:	3568      	adds	r5, #104	; 0x68
 800a902:	e7e9      	b.n	800a8d8 <_fwalk_sglue+0x10>

0800a904 <siprintf>:
 800a904:	b40e      	push	{r1, r2, r3}
 800a906:	b500      	push	{lr}
 800a908:	b09c      	sub	sp, #112	; 0x70
 800a90a:	ab1d      	add	r3, sp, #116	; 0x74
 800a90c:	9002      	str	r0, [sp, #8]
 800a90e:	9006      	str	r0, [sp, #24]
 800a910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a914:	4809      	ldr	r0, [pc, #36]	; (800a93c <siprintf+0x38>)
 800a916:	9107      	str	r1, [sp, #28]
 800a918:	9104      	str	r1, [sp, #16]
 800a91a:	4909      	ldr	r1, [pc, #36]	; (800a940 <siprintf+0x3c>)
 800a91c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a920:	9105      	str	r1, [sp, #20]
 800a922:	6800      	ldr	r0, [r0, #0]
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	a902      	add	r1, sp, #8
 800a928:	f001 fc22 	bl	800c170 <_svfiprintf_r>
 800a92c:	9b02      	ldr	r3, [sp, #8]
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	b01c      	add	sp, #112	; 0x70
 800a934:	f85d eb04 	ldr.w	lr, [sp], #4
 800a938:	b003      	add	sp, #12
 800a93a:	4770      	bx	lr
 800a93c:	200001d4 	.word	0x200001d4
 800a940:	ffff0208 	.word	0xffff0208

0800a944 <__sread>:
 800a944:	b510      	push	{r4, lr}
 800a946:	460c      	mov	r4, r1
 800a948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94c:	f000 f86c 	bl	800aa28 <_read_r>
 800a950:	2800      	cmp	r0, #0
 800a952:	bfab      	itete	ge
 800a954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a956:	89a3      	ldrhlt	r3, [r4, #12]
 800a958:	181b      	addge	r3, r3, r0
 800a95a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a95e:	bfac      	ite	ge
 800a960:	6563      	strge	r3, [r4, #84]	; 0x54
 800a962:	81a3      	strhlt	r3, [r4, #12]
 800a964:	bd10      	pop	{r4, pc}

0800a966 <__swrite>:
 800a966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96a:	461f      	mov	r7, r3
 800a96c:	898b      	ldrh	r3, [r1, #12]
 800a96e:	05db      	lsls	r3, r3, #23
 800a970:	4605      	mov	r5, r0
 800a972:	460c      	mov	r4, r1
 800a974:	4616      	mov	r6, r2
 800a976:	d505      	bpl.n	800a984 <__swrite+0x1e>
 800a978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97c:	2302      	movs	r3, #2
 800a97e:	2200      	movs	r2, #0
 800a980:	f000 f840 	bl	800aa04 <_lseek_r>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a98a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	4628      	mov	r0, r5
 800a996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a99a:	f000 b857 	b.w	800aa4c <_write_r>

0800a99e <__sseek>:
 800a99e:	b510      	push	{r4, lr}
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a6:	f000 f82d 	bl	800aa04 <_lseek_r>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	bf15      	itete	ne
 800a9b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ba:	81a3      	strheq	r3, [r4, #12]
 800a9bc:	bf18      	it	ne
 800a9be:	81a3      	strhne	r3, [r4, #12]
 800a9c0:	bd10      	pop	{r4, pc}

0800a9c2 <__sclose>:
 800a9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c6:	f000 b80d 	b.w	800a9e4 <_close_r>

0800a9ca <memset>:
 800a9ca:	4402      	add	r2, r0
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d100      	bne.n	800a9d4 <memset+0xa>
 800a9d2:	4770      	bx	lr
 800a9d4:	f803 1b01 	strb.w	r1, [r3], #1
 800a9d8:	e7f9      	b.n	800a9ce <memset+0x4>
	...

0800a9dc <_localeconv_r>:
 800a9dc:	4800      	ldr	r0, [pc, #0]	; (800a9e0 <_localeconv_r+0x4>)
 800a9de:	4770      	bx	lr
 800a9e0:	200002c8 	.word	0x200002c8

0800a9e4 <_close_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d06      	ldr	r5, [pc, #24]	; (800aa00 <_close_r+0x1c>)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	602b      	str	r3, [r5, #0]
 800a9f0:	f7f6 fd77 	bl	80014e2 <_close>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_close_r+0x1a>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_close_r+0x1a>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	20001764 	.word	0x20001764

0800aa04 <_lseek_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d07      	ldr	r5, [pc, #28]	; (800aa24 <_lseek_r+0x20>)
 800aa08:	4604      	mov	r4, r0
 800aa0a:	4608      	mov	r0, r1
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	2200      	movs	r2, #0
 800aa10:	602a      	str	r2, [r5, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f7f6 fd8c 	bl	8001530 <_lseek>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_lseek_r+0x1e>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_lseek_r+0x1e>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	20001764 	.word	0x20001764

0800aa28 <_read_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d07      	ldr	r5, [pc, #28]	; (800aa48 <_read_r+0x20>)
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	4608      	mov	r0, r1
 800aa30:	4611      	mov	r1, r2
 800aa32:	2200      	movs	r2, #0
 800aa34:	602a      	str	r2, [r5, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f7f6 fd1a 	bl	8001470 <_read>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_read_r+0x1e>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_read_r+0x1e>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	20001764 	.word	0x20001764

0800aa4c <_write_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d07      	ldr	r5, [pc, #28]	; (800aa6c <_write_r+0x20>)
 800aa50:	4604      	mov	r4, r0
 800aa52:	4608      	mov	r0, r1
 800aa54:	4611      	mov	r1, r2
 800aa56:	2200      	movs	r2, #0
 800aa58:	602a      	str	r2, [r5, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f7f6 fd25 	bl	80014aa <_write>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_write_r+0x1e>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_write_r+0x1e>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	20001764 	.word	0x20001764

0800aa70 <__errno>:
 800aa70:	4b01      	ldr	r3, [pc, #4]	; (800aa78 <__errno+0x8>)
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	200001d4 	.word	0x200001d4

0800aa7c <__libc_init_array>:
 800aa7c:	b570      	push	{r4, r5, r6, lr}
 800aa7e:	4d0d      	ldr	r5, [pc, #52]	; (800aab4 <__libc_init_array+0x38>)
 800aa80:	4c0d      	ldr	r4, [pc, #52]	; (800aab8 <__libc_init_array+0x3c>)
 800aa82:	1b64      	subs	r4, r4, r5
 800aa84:	10a4      	asrs	r4, r4, #2
 800aa86:	2600      	movs	r6, #0
 800aa88:	42a6      	cmp	r6, r4
 800aa8a:	d109      	bne.n	800aaa0 <__libc_init_array+0x24>
 800aa8c:	4d0b      	ldr	r5, [pc, #44]	; (800aabc <__libc_init_array+0x40>)
 800aa8e:	4c0c      	ldr	r4, [pc, #48]	; (800aac0 <__libc_init_array+0x44>)
 800aa90:	f002 f896 	bl	800cbc0 <_init>
 800aa94:	1b64      	subs	r4, r4, r5
 800aa96:	10a4      	asrs	r4, r4, #2
 800aa98:	2600      	movs	r6, #0
 800aa9a:	42a6      	cmp	r6, r4
 800aa9c:	d105      	bne.n	800aaaa <__libc_init_array+0x2e>
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa4:	4798      	blx	r3
 800aaa6:	3601      	adds	r6, #1
 800aaa8:	e7ee      	b.n	800aa88 <__libc_init_array+0xc>
 800aaaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaae:	4798      	blx	r3
 800aab0:	3601      	adds	r6, #1
 800aab2:	e7f2      	b.n	800aa9a <__libc_init_array+0x1e>
 800aab4:	0800cfe4 	.word	0x0800cfe4
 800aab8:	0800cfe4 	.word	0x0800cfe4
 800aabc:	0800cfe4 	.word	0x0800cfe4
 800aac0:	0800cfe8 	.word	0x0800cfe8

0800aac4 <__retarget_lock_init_recursive>:
 800aac4:	4770      	bx	lr

0800aac6 <__retarget_lock_acquire_recursive>:
 800aac6:	4770      	bx	lr

0800aac8 <__retarget_lock_release_recursive>:
 800aac8:	4770      	bx	lr

0800aaca <quorem>:
 800aaca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aace:	6903      	ldr	r3, [r0, #16]
 800aad0:	690c      	ldr	r4, [r1, #16]
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	4607      	mov	r7, r0
 800aad6:	db7e      	blt.n	800abd6 <quorem+0x10c>
 800aad8:	3c01      	subs	r4, #1
 800aada:	f101 0814 	add.w	r8, r1, #20
 800aade:	f100 0514 	add.w	r5, r0, #20
 800aae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aaec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aaf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aafc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab00:	d331      	bcc.n	800ab66 <quorem+0x9c>
 800ab02:	f04f 0e00 	mov.w	lr, #0
 800ab06:	4640      	mov	r0, r8
 800ab08:	46ac      	mov	ip, r5
 800ab0a:	46f2      	mov	sl, lr
 800ab0c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab10:	b293      	uxth	r3, r2
 800ab12:	fb06 e303 	mla	r3, r6, r3, lr
 800ab16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab1a:	0c1a      	lsrs	r2, r3, #16
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	ebaa 0303 	sub.w	r3, sl, r3
 800ab22:	f8dc a000 	ldr.w	sl, [ip]
 800ab26:	fa13 f38a 	uxtah	r3, r3, sl
 800ab2a:	fb06 220e 	mla	r2, r6, lr, r2
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	9b00      	ldr	r3, [sp, #0]
 800ab32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab36:	b292      	uxth	r2, r2
 800ab38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab40:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab44:	4581      	cmp	r9, r0
 800ab46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab4a:	f84c 3b04 	str.w	r3, [ip], #4
 800ab4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab52:	d2db      	bcs.n	800ab0c <quorem+0x42>
 800ab54:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab58:	b92b      	cbnz	r3, 800ab66 <quorem+0x9c>
 800ab5a:	9b01      	ldr	r3, [sp, #4]
 800ab5c:	3b04      	subs	r3, #4
 800ab5e:	429d      	cmp	r5, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	d32c      	bcc.n	800abbe <quorem+0xf4>
 800ab64:	613c      	str	r4, [r7, #16]
 800ab66:	4638      	mov	r0, r7
 800ab68:	f001 f9a8 	bl	800bebc <__mcmp>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	db22      	blt.n	800abb6 <quorem+0xec>
 800ab70:	3601      	adds	r6, #1
 800ab72:	4629      	mov	r1, r5
 800ab74:	2000      	movs	r0, #0
 800ab76:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab7a:	f8d1 c000 	ldr.w	ip, [r1]
 800ab7e:	b293      	uxth	r3, r2
 800ab80:	1ac3      	subs	r3, r0, r3
 800ab82:	0c12      	lsrs	r2, r2, #16
 800ab84:	fa13 f38c 	uxtah	r3, r3, ip
 800ab88:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ab8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab96:	45c1      	cmp	r9, r8
 800ab98:	f841 3b04 	str.w	r3, [r1], #4
 800ab9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aba0:	d2e9      	bcs.n	800ab76 <quorem+0xac>
 800aba2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abaa:	b922      	cbnz	r2, 800abb6 <quorem+0xec>
 800abac:	3b04      	subs	r3, #4
 800abae:	429d      	cmp	r5, r3
 800abb0:	461a      	mov	r2, r3
 800abb2:	d30a      	bcc.n	800abca <quorem+0x100>
 800abb4:	613c      	str	r4, [r7, #16]
 800abb6:	4630      	mov	r0, r6
 800abb8:	b003      	add	sp, #12
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	6812      	ldr	r2, [r2, #0]
 800abc0:	3b04      	subs	r3, #4
 800abc2:	2a00      	cmp	r2, #0
 800abc4:	d1ce      	bne.n	800ab64 <quorem+0x9a>
 800abc6:	3c01      	subs	r4, #1
 800abc8:	e7c9      	b.n	800ab5e <quorem+0x94>
 800abca:	6812      	ldr	r2, [r2, #0]
 800abcc:	3b04      	subs	r3, #4
 800abce:	2a00      	cmp	r2, #0
 800abd0:	d1f0      	bne.n	800abb4 <quorem+0xea>
 800abd2:	3c01      	subs	r4, #1
 800abd4:	e7eb      	b.n	800abae <quorem+0xe4>
 800abd6:	2000      	movs	r0, #0
 800abd8:	e7ee      	b.n	800abb8 <quorem+0xee>
 800abda:	0000      	movs	r0, r0
 800abdc:	0000      	movs	r0, r0
	...

0800abe0 <_dtoa_r>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	ed2d 8b04 	vpush	{d8-d9}
 800abe8:	69c5      	ldr	r5, [r0, #28]
 800abea:	b093      	sub	sp, #76	; 0x4c
 800abec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800abf0:	ec57 6b10 	vmov	r6, r7, d0
 800abf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800abf8:	9107      	str	r1, [sp, #28]
 800abfa:	4604      	mov	r4, r0
 800abfc:	920a      	str	r2, [sp, #40]	; 0x28
 800abfe:	930d      	str	r3, [sp, #52]	; 0x34
 800ac00:	b975      	cbnz	r5, 800ac20 <_dtoa_r+0x40>
 800ac02:	2010      	movs	r0, #16
 800ac04:	f000 fe2a 	bl	800b85c <malloc>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	61e0      	str	r0, [r4, #28]
 800ac0c:	b920      	cbnz	r0, 800ac18 <_dtoa_r+0x38>
 800ac0e:	4bae      	ldr	r3, [pc, #696]	; (800aec8 <_dtoa_r+0x2e8>)
 800ac10:	21ef      	movs	r1, #239	; 0xef
 800ac12:	48ae      	ldr	r0, [pc, #696]	; (800aecc <_dtoa_r+0x2ec>)
 800ac14:	f001 fc90 	bl	800c538 <__assert_func>
 800ac18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac1c:	6005      	str	r5, [r0, #0]
 800ac1e:	60c5      	str	r5, [r0, #12]
 800ac20:	69e3      	ldr	r3, [r4, #28]
 800ac22:	6819      	ldr	r1, [r3, #0]
 800ac24:	b151      	cbz	r1, 800ac3c <_dtoa_r+0x5c>
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	604a      	str	r2, [r1, #4]
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4093      	lsls	r3, r2
 800ac2e:	608b      	str	r3, [r1, #8]
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 ff07 	bl	800ba44 <_Bfree>
 800ac36:	69e3      	ldr	r3, [r4, #28]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	1e3b      	subs	r3, r7, #0
 800ac3e:	bfbb      	ittet	lt
 800ac40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ac44:	9303      	strlt	r3, [sp, #12]
 800ac46:	2300      	movge	r3, #0
 800ac48:	2201      	movlt	r2, #1
 800ac4a:	bfac      	ite	ge
 800ac4c:	f8c8 3000 	strge.w	r3, [r8]
 800ac50:	f8c8 2000 	strlt.w	r2, [r8]
 800ac54:	4b9e      	ldr	r3, [pc, #632]	; (800aed0 <_dtoa_r+0x2f0>)
 800ac56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ac5a:	ea33 0308 	bics.w	r3, r3, r8
 800ac5e:	d11b      	bne.n	800ac98 <_dtoa_r+0xb8>
 800ac60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac62:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ac6c:	4333      	orrs	r3, r6
 800ac6e:	f000 8593 	beq.w	800b798 <_dtoa_r+0xbb8>
 800ac72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac74:	b963      	cbnz	r3, 800ac90 <_dtoa_r+0xb0>
 800ac76:	4b97      	ldr	r3, [pc, #604]	; (800aed4 <_dtoa_r+0x2f4>)
 800ac78:	e027      	b.n	800acca <_dtoa_r+0xea>
 800ac7a:	4b97      	ldr	r3, [pc, #604]	; (800aed8 <_dtoa_r+0x2f8>)
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	3308      	adds	r3, #8
 800ac80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	9800      	ldr	r0, [sp, #0]
 800ac86:	b013      	add	sp, #76	; 0x4c
 800ac88:	ecbd 8b04 	vpop	{d8-d9}
 800ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	4b90      	ldr	r3, [pc, #576]	; (800aed4 <_dtoa_r+0x2f4>)
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	3303      	adds	r3, #3
 800ac96:	e7f3      	b.n	800ac80 <_dtoa_r+0xa0>
 800ac98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	ec51 0b17 	vmov	r0, r1, d7
 800aca2:	eeb0 8a47 	vmov.f32	s16, s14
 800aca6:	eef0 8a67 	vmov.f32	s17, s15
 800acaa:	2300      	movs	r3, #0
 800acac:	f7f5 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800acb0:	4681      	mov	r9, r0
 800acb2:	b160      	cbz	r0, 800acce <_dtoa_r+0xee>
 800acb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acb6:	2301      	movs	r3, #1
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 8568 	beq.w	800b792 <_dtoa_r+0xbb2>
 800acc2:	4b86      	ldr	r3, [pc, #536]	; (800aedc <_dtoa_r+0x2fc>)
 800acc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	3b01      	subs	r3, #1
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	e7da      	b.n	800ac84 <_dtoa_r+0xa4>
 800acce:	aa10      	add	r2, sp, #64	; 0x40
 800acd0:	a911      	add	r1, sp, #68	; 0x44
 800acd2:	4620      	mov	r0, r4
 800acd4:	eeb0 0a48 	vmov.f32	s0, s16
 800acd8:	eef0 0a68 	vmov.f32	s1, s17
 800acdc:	f001 f994 	bl	800c008 <__d2b>
 800ace0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ace4:	4682      	mov	sl, r0
 800ace6:	2d00      	cmp	r5, #0
 800ace8:	d07f      	beq.n	800adea <_dtoa_r+0x20a>
 800acea:	ee18 3a90 	vmov	r3, s17
 800acee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acf2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800acf6:	ec51 0b18 	vmov	r0, r1, d8
 800acfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800acfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ad06:	4619      	mov	r1, r3
 800ad08:	2200      	movs	r2, #0
 800ad0a:	4b75      	ldr	r3, [pc, #468]	; (800aee0 <_dtoa_r+0x300>)
 800ad0c:	f7f5 fabc 	bl	8000288 <__aeabi_dsub>
 800ad10:	a367      	add	r3, pc, #412	; (adr r3, 800aeb0 <_dtoa_r+0x2d0>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	f7f5 fc6f 	bl	80005f8 <__aeabi_dmul>
 800ad1a:	a367      	add	r3, pc, #412	; (adr r3, 800aeb8 <_dtoa_r+0x2d8>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f7f5 fab4 	bl	800028c <__adddf3>
 800ad24:	4606      	mov	r6, r0
 800ad26:	4628      	mov	r0, r5
 800ad28:	460f      	mov	r7, r1
 800ad2a:	f7f5 fbfb 	bl	8000524 <__aeabi_i2d>
 800ad2e:	a364      	add	r3, pc, #400	; (adr r3, 800aec0 <_dtoa_r+0x2e0>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f7f5 fc60 	bl	80005f8 <__aeabi_dmul>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	4639      	mov	r1, r7
 800ad40:	f7f5 faa4 	bl	800028c <__adddf3>
 800ad44:	4606      	mov	r6, r0
 800ad46:	460f      	mov	r7, r1
 800ad48:	f7f5 ff06 	bl	8000b58 <__aeabi_d2iz>
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4683      	mov	fp, r0
 800ad50:	2300      	movs	r3, #0
 800ad52:	4630      	mov	r0, r6
 800ad54:	4639      	mov	r1, r7
 800ad56:	f7f5 fec1 	bl	8000adc <__aeabi_dcmplt>
 800ad5a:	b148      	cbz	r0, 800ad70 <_dtoa_r+0x190>
 800ad5c:	4658      	mov	r0, fp
 800ad5e:	f7f5 fbe1 	bl	8000524 <__aeabi_i2d>
 800ad62:	4632      	mov	r2, r6
 800ad64:	463b      	mov	r3, r7
 800ad66:	f7f5 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad6a:	b908      	cbnz	r0, 800ad70 <_dtoa_r+0x190>
 800ad6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad70:	f1bb 0f16 	cmp.w	fp, #22
 800ad74:	d857      	bhi.n	800ae26 <_dtoa_r+0x246>
 800ad76:	4b5b      	ldr	r3, [pc, #364]	; (800aee4 <_dtoa_r+0x304>)
 800ad78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	ec51 0b18 	vmov	r0, r1, d8
 800ad84:	f7f5 feaa 	bl	8000adc <__aeabi_dcmplt>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d04e      	beq.n	800ae2a <_dtoa_r+0x24a>
 800ad8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad90:	2300      	movs	r3, #0
 800ad92:	930c      	str	r3, [sp, #48]	; 0x30
 800ad94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad96:	1b5b      	subs	r3, r3, r5
 800ad98:	1e5a      	subs	r2, r3, #1
 800ad9a:	bf45      	ittet	mi
 800ad9c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ada0:	9305      	strmi	r3, [sp, #20]
 800ada2:	2300      	movpl	r3, #0
 800ada4:	2300      	movmi	r3, #0
 800ada6:	9206      	str	r2, [sp, #24]
 800ada8:	bf54      	ite	pl
 800adaa:	9305      	strpl	r3, [sp, #20]
 800adac:	9306      	strmi	r3, [sp, #24]
 800adae:	f1bb 0f00 	cmp.w	fp, #0
 800adb2:	db3c      	blt.n	800ae2e <_dtoa_r+0x24e>
 800adb4:	9b06      	ldr	r3, [sp, #24]
 800adb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800adba:	445b      	add	r3, fp
 800adbc:	9306      	str	r3, [sp, #24]
 800adbe:	2300      	movs	r3, #0
 800adc0:	9308      	str	r3, [sp, #32]
 800adc2:	9b07      	ldr	r3, [sp, #28]
 800adc4:	2b09      	cmp	r3, #9
 800adc6:	d868      	bhi.n	800ae9a <_dtoa_r+0x2ba>
 800adc8:	2b05      	cmp	r3, #5
 800adca:	bfc4      	itt	gt
 800adcc:	3b04      	subgt	r3, #4
 800adce:	9307      	strgt	r3, [sp, #28]
 800add0:	9b07      	ldr	r3, [sp, #28]
 800add2:	f1a3 0302 	sub.w	r3, r3, #2
 800add6:	bfcc      	ite	gt
 800add8:	2500      	movgt	r5, #0
 800adda:	2501      	movle	r5, #1
 800addc:	2b03      	cmp	r3, #3
 800adde:	f200 8085 	bhi.w	800aeec <_dtoa_r+0x30c>
 800ade2:	e8df f003 	tbb	[pc, r3]
 800ade6:	3b2e      	.short	0x3b2e
 800ade8:	5839      	.short	0x5839
 800adea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800adee:	441d      	add	r5, r3
 800adf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800adf4:	2b20      	cmp	r3, #32
 800adf6:	bfc1      	itttt	gt
 800adf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800adfc:	fa08 f803 	lslgt.w	r8, r8, r3
 800ae00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ae04:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ae08:	bfd6      	itet	le
 800ae0a:	f1c3 0320 	rsble	r3, r3, #32
 800ae0e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ae12:	fa06 f003 	lslle.w	r0, r6, r3
 800ae16:	f7f5 fb75 	bl	8000504 <__aeabi_ui2d>
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ae20:	3d01      	subs	r5, #1
 800ae22:	920e      	str	r2, [sp, #56]	; 0x38
 800ae24:	e76f      	b.n	800ad06 <_dtoa_r+0x126>
 800ae26:	2301      	movs	r3, #1
 800ae28:	e7b3      	b.n	800ad92 <_dtoa_r+0x1b2>
 800ae2a:	900c      	str	r0, [sp, #48]	; 0x30
 800ae2c:	e7b2      	b.n	800ad94 <_dtoa_r+0x1b4>
 800ae2e:	9b05      	ldr	r3, [sp, #20]
 800ae30:	eba3 030b 	sub.w	r3, r3, fp
 800ae34:	9305      	str	r3, [sp, #20]
 800ae36:	f1cb 0300 	rsb	r3, fp, #0
 800ae3a:	9308      	str	r3, [sp, #32]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae40:	e7bf      	b.n	800adc2 <_dtoa_r+0x1e2>
 800ae42:	2300      	movs	r3, #0
 800ae44:	9309      	str	r3, [sp, #36]	; 0x24
 800ae46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dc52      	bgt.n	800aef2 <_dtoa_r+0x312>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	461a      	mov	r2, r3
 800ae54:	920a      	str	r2, [sp, #40]	; 0x28
 800ae56:	e00b      	b.n	800ae70 <_dtoa_r+0x290>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e7f3      	b.n	800ae44 <_dtoa_r+0x264>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae62:	445b      	add	r3, fp
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	3301      	adds	r3, #1
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	bfb8      	it	lt
 800ae6e:	2301      	movlt	r3, #1
 800ae70:	69e0      	ldr	r0, [r4, #28]
 800ae72:	2100      	movs	r1, #0
 800ae74:	2204      	movs	r2, #4
 800ae76:	f102 0614 	add.w	r6, r2, #20
 800ae7a:	429e      	cmp	r6, r3
 800ae7c:	d93d      	bls.n	800aefa <_dtoa_r+0x31a>
 800ae7e:	6041      	str	r1, [r0, #4]
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 fd9f 	bl	800b9c4 <_Balloc>
 800ae86:	9000      	str	r0, [sp, #0]
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d139      	bne.n	800af00 <_dtoa_r+0x320>
 800ae8c:	4b16      	ldr	r3, [pc, #88]	; (800aee8 <_dtoa_r+0x308>)
 800ae8e:	4602      	mov	r2, r0
 800ae90:	f240 11af 	movw	r1, #431	; 0x1af
 800ae94:	e6bd      	b.n	800ac12 <_dtoa_r+0x32>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e7e1      	b.n	800ae5e <_dtoa_r+0x27e>
 800ae9a:	2501      	movs	r5, #1
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9307      	str	r3, [sp, #28]
 800aea0:	9509      	str	r5, [sp, #36]	; 0x24
 800aea2:	f04f 33ff 	mov.w	r3, #4294967295
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2312      	movs	r3, #18
 800aeae:	e7d1      	b.n	800ae54 <_dtoa_r+0x274>
 800aeb0:	636f4361 	.word	0x636f4361
 800aeb4:	3fd287a7 	.word	0x3fd287a7
 800aeb8:	8b60c8b3 	.word	0x8b60c8b3
 800aebc:	3fc68a28 	.word	0x3fc68a28
 800aec0:	509f79fb 	.word	0x509f79fb
 800aec4:	3fd34413 	.word	0x3fd34413
 800aec8:	0800ccb5 	.word	0x0800ccb5
 800aecc:	0800cccc 	.word	0x0800cccc
 800aed0:	7ff00000 	.word	0x7ff00000
 800aed4:	0800ccb1 	.word	0x0800ccb1
 800aed8:	0800cca8 	.word	0x0800cca8
 800aedc:	0800cc85 	.word	0x0800cc85
 800aee0:	3ff80000 	.word	0x3ff80000
 800aee4:	0800cdb8 	.word	0x0800cdb8
 800aee8:	0800cd24 	.word	0x0800cd24
 800aeec:	2301      	movs	r3, #1
 800aeee:	9309      	str	r3, [sp, #36]	; 0x24
 800aef0:	e7d7      	b.n	800aea2 <_dtoa_r+0x2c2>
 800aef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	9304      	str	r3, [sp, #16]
 800aef8:	e7ba      	b.n	800ae70 <_dtoa_r+0x290>
 800aefa:	3101      	adds	r1, #1
 800aefc:	0052      	lsls	r2, r2, #1
 800aefe:	e7ba      	b.n	800ae76 <_dtoa_r+0x296>
 800af00:	69e3      	ldr	r3, [r4, #28]
 800af02:	9a00      	ldr	r2, [sp, #0]
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	2b0e      	cmp	r3, #14
 800af0a:	f200 80a8 	bhi.w	800b05e <_dtoa_r+0x47e>
 800af0e:	2d00      	cmp	r5, #0
 800af10:	f000 80a5 	beq.w	800b05e <_dtoa_r+0x47e>
 800af14:	f1bb 0f00 	cmp.w	fp, #0
 800af18:	dd38      	ble.n	800af8c <_dtoa_r+0x3ac>
 800af1a:	4bc0      	ldr	r3, [pc, #768]	; (800b21c <_dtoa_r+0x63c>)
 800af1c:	f00b 020f 	and.w	r2, fp, #15
 800af20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800af28:	e9d3 6700 	ldrd	r6, r7, [r3]
 800af2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800af30:	d019      	beq.n	800af66 <_dtoa_r+0x386>
 800af32:	4bbb      	ldr	r3, [pc, #748]	; (800b220 <_dtoa_r+0x640>)
 800af34:	ec51 0b18 	vmov	r0, r1, d8
 800af38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af3c:	f7f5 fc86 	bl	800084c <__aeabi_ddiv>
 800af40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af44:	f008 080f 	and.w	r8, r8, #15
 800af48:	2503      	movs	r5, #3
 800af4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b220 <_dtoa_r+0x640>
 800af4e:	f1b8 0f00 	cmp.w	r8, #0
 800af52:	d10a      	bne.n	800af6a <_dtoa_r+0x38a>
 800af54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af58:	4632      	mov	r2, r6
 800af5a:	463b      	mov	r3, r7
 800af5c:	f7f5 fc76 	bl	800084c <__aeabi_ddiv>
 800af60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af64:	e02b      	b.n	800afbe <_dtoa_r+0x3de>
 800af66:	2502      	movs	r5, #2
 800af68:	e7ef      	b.n	800af4a <_dtoa_r+0x36a>
 800af6a:	f018 0f01 	tst.w	r8, #1
 800af6e:	d008      	beq.n	800af82 <_dtoa_r+0x3a2>
 800af70:	4630      	mov	r0, r6
 800af72:	4639      	mov	r1, r7
 800af74:	e9d9 2300 	ldrd	r2, r3, [r9]
 800af78:	f7f5 fb3e 	bl	80005f8 <__aeabi_dmul>
 800af7c:	3501      	adds	r5, #1
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800af86:	f109 0908 	add.w	r9, r9, #8
 800af8a:	e7e0      	b.n	800af4e <_dtoa_r+0x36e>
 800af8c:	f000 809f 	beq.w	800b0ce <_dtoa_r+0x4ee>
 800af90:	f1cb 0600 	rsb	r6, fp, #0
 800af94:	4ba1      	ldr	r3, [pc, #644]	; (800b21c <_dtoa_r+0x63c>)
 800af96:	4fa2      	ldr	r7, [pc, #648]	; (800b220 <_dtoa_r+0x640>)
 800af98:	f006 020f 	and.w	r2, r6, #15
 800af9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	ec51 0b18 	vmov	r0, r1, d8
 800afa8:	f7f5 fb26 	bl	80005f8 <__aeabi_dmul>
 800afac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afb0:	1136      	asrs	r6, r6, #4
 800afb2:	2300      	movs	r3, #0
 800afb4:	2502      	movs	r5, #2
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	d17e      	bne.n	800b0b8 <_dtoa_r+0x4d8>
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1d0      	bne.n	800af60 <_dtoa_r+0x380>
 800afbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 8084 	beq.w	800b0d2 <_dtoa_r+0x4f2>
 800afca:	4b96      	ldr	r3, [pc, #600]	; (800b224 <_dtoa_r+0x644>)
 800afcc:	2200      	movs	r2, #0
 800afce:	4640      	mov	r0, r8
 800afd0:	4649      	mov	r1, r9
 800afd2:	f7f5 fd83 	bl	8000adc <__aeabi_dcmplt>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d07b      	beq.n	800b0d2 <_dtoa_r+0x4f2>
 800afda:	9b04      	ldr	r3, [sp, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d078      	beq.n	800b0d2 <_dtoa_r+0x4f2>
 800afe0:	9b01      	ldr	r3, [sp, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dd39      	ble.n	800b05a <_dtoa_r+0x47a>
 800afe6:	4b90      	ldr	r3, [pc, #576]	; (800b228 <_dtoa_r+0x648>)
 800afe8:	2200      	movs	r2, #0
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 fb03 	bl	80005f8 <__aeabi_dmul>
 800aff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aff6:	9e01      	ldr	r6, [sp, #4]
 800aff8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800affc:	3501      	adds	r5, #1
 800affe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b002:	4628      	mov	r0, r5
 800b004:	f7f5 fa8e 	bl	8000524 <__aeabi_i2d>
 800b008:	4642      	mov	r2, r8
 800b00a:	464b      	mov	r3, r9
 800b00c:	f7f5 faf4 	bl	80005f8 <__aeabi_dmul>
 800b010:	4b86      	ldr	r3, [pc, #536]	; (800b22c <_dtoa_r+0x64c>)
 800b012:	2200      	movs	r2, #0
 800b014:	f7f5 f93a 	bl	800028c <__adddf3>
 800b018:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b01c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b020:	9303      	str	r3, [sp, #12]
 800b022:	2e00      	cmp	r6, #0
 800b024:	d158      	bne.n	800b0d8 <_dtoa_r+0x4f8>
 800b026:	4b82      	ldr	r3, [pc, #520]	; (800b230 <_dtoa_r+0x650>)
 800b028:	2200      	movs	r2, #0
 800b02a:	4640      	mov	r0, r8
 800b02c:	4649      	mov	r1, r9
 800b02e:	f7f5 f92b 	bl	8000288 <__aeabi_dsub>
 800b032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b036:	4680      	mov	r8, r0
 800b038:	4689      	mov	r9, r1
 800b03a:	f7f5 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f040 8296 	bne.w	800b570 <_dtoa_r+0x990>
 800b044:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b048:	4640      	mov	r0, r8
 800b04a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b04e:	4649      	mov	r1, r9
 800b050:	f7f5 fd44 	bl	8000adc <__aeabi_dcmplt>
 800b054:	2800      	cmp	r0, #0
 800b056:	f040 8289 	bne.w	800b56c <_dtoa_r+0x98c>
 800b05a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b05e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b060:	2b00      	cmp	r3, #0
 800b062:	f2c0 814e 	blt.w	800b302 <_dtoa_r+0x722>
 800b066:	f1bb 0f0e 	cmp.w	fp, #14
 800b06a:	f300 814a 	bgt.w	800b302 <_dtoa_r+0x722>
 800b06e:	4b6b      	ldr	r3, [pc, #428]	; (800b21c <_dtoa_r+0x63c>)
 800b070:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b074:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f280 80dc 	bge.w	800b238 <_dtoa_r+0x658>
 800b080:	9b04      	ldr	r3, [sp, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f300 80d8 	bgt.w	800b238 <_dtoa_r+0x658>
 800b088:	f040 826f 	bne.w	800b56a <_dtoa_r+0x98a>
 800b08c:	4b68      	ldr	r3, [pc, #416]	; (800b230 <_dtoa_r+0x650>)
 800b08e:	2200      	movs	r2, #0
 800b090:	4640      	mov	r0, r8
 800b092:	4649      	mov	r1, r9
 800b094:	f7f5 fab0 	bl	80005f8 <__aeabi_dmul>
 800b098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b09c:	f7f5 fd32 	bl	8000b04 <__aeabi_dcmpge>
 800b0a0:	9e04      	ldr	r6, [sp, #16]
 800b0a2:	4637      	mov	r7, r6
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	f040 8245 	bne.w	800b534 <_dtoa_r+0x954>
 800b0aa:	9d00      	ldr	r5, [sp, #0]
 800b0ac:	2331      	movs	r3, #49	; 0x31
 800b0ae:	f805 3b01 	strb.w	r3, [r5], #1
 800b0b2:	f10b 0b01 	add.w	fp, fp, #1
 800b0b6:	e241      	b.n	800b53c <_dtoa_r+0x95c>
 800b0b8:	07f2      	lsls	r2, r6, #31
 800b0ba:	d505      	bpl.n	800b0c8 <_dtoa_r+0x4e8>
 800b0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0c0:	f7f5 fa9a 	bl	80005f8 <__aeabi_dmul>
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	1076      	asrs	r6, r6, #1
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	e773      	b.n	800afb6 <_dtoa_r+0x3d6>
 800b0ce:	2502      	movs	r5, #2
 800b0d0:	e775      	b.n	800afbe <_dtoa_r+0x3de>
 800b0d2:	9e04      	ldr	r6, [sp, #16]
 800b0d4:	465f      	mov	r7, fp
 800b0d6:	e792      	b.n	800affe <_dtoa_r+0x41e>
 800b0d8:	9900      	ldr	r1, [sp, #0]
 800b0da:	4b50      	ldr	r3, [pc, #320]	; (800b21c <_dtoa_r+0x63c>)
 800b0dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0e0:	4431      	add	r1, r6
 800b0e2:	9102      	str	r1, [sp, #8]
 800b0e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0e6:	eeb0 9a47 	vmov.f32	s18, s14
 800b0ea:	eef0 9a67 	vmov.f32	s19, s15
 800b0ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b0f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0f6:	2900      	cmp	r1, #0
 800b0f8:	d044      	beq.n	800b184 <_dtoa_r+0x5a4>
 800b0fa:	494e      	ldr	r1, [pc, #312]	; (800b234 <_dtoa_r+0x654>)
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	f7f5 fba5 	bl	800084c <__aeabi_ddiv>
 800b102:	ec53 2b19 	vmov	r2, r3, d9
 800b106:	f7f5 f8bf 	bl	8000288 <__aeabi_dsub>
 800b10a:	9d00      	ldr	r5, [sp, #0]
 800b10c:	ec41 0b19 	vmov	d9, r0, r1
 800b110:	4649      	mov	r1, r9
 800b112:	4640      	mov	r0, r8
 800b114:	f7f5 fd20 	bl	8000b58 <__aeabi_d2iz>
 800b118:	4606      	mov	r6, r0
 800b11a:	f7f5 fa03 	bl	8000524 <__aeabi_i2d>
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	4640      	mov	r0, r8
 800b124:	4649      	mov	r1, r9
 800b126:	f7f5 f8af 	bl	8000288 <__aeabi_dsub>
 800b12a:	3630      	adds	r6, #48	; 0x30
 800b12c:	f805 6b01 	strb.w	r6, [r5], #1
 800b130:	ec53 2b19 	vmov	r2, r3, d9
 800b134:	4680      	mov	r8, r0
 800b136:	4689      	mov	r9, r1
 800b138:	f7f5 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d164      	bne.n	800b20a <_dtoa_r+0x62a>
 800b140:	4642      	mov	r2, r8
 800b142:	464b      	mov	r3, r9
 800b144:	4937      	ldr	r1, [pc, #220]	; (800b224 <_dtoa_r+0x644>)
 800b146:	2000      	movs	r0, #0
 800b148:	f7f5 f89e 	bl	8000288 <__aeabi_dsub>
 800b14c:	ec53 2b19 	vmov	r2, r3, d9
 800b150:	f7f5 fcc4 	bl	8000adc <__aeabi_dcmplt>
 800b154:	2800      	cmp	r0, #0
 800b156:	f040 80b6 	bne.w	800b2c6 <_dtoa_r+0x6e6>
 800b15a:	9b02      	ldr	r3, [sp, #8]
 800b15c:	429d      	cmp	r5, r3
 800b15e:	f43f af7c 	beq.w	800b05a <_dtoa_r+0x47a>
 800b162:	4b31      	ldr	r3, [pc, #196]	; (800b228 <_dtoa_r+0x648>)
 800b164:	ec51 0b19 	vmov	r0, r1, d9
 800b168:	2200      	movs	r2, #0
 800b16a:	f7f5 fa45 	bl	80005f8 <__aeabi_dmul>
 800b16e:	4b2e      	ldr	r3, [pc, #184]	; (800b228 <_dtoa_r+0x648>)
 800b170:	ec41 0b19 	vmov	d9, r0, r1
 800b174:	2200      	movs	r2, #0
 800b176:	4640      	mov	r0, r8
 800b178:	4649      	mov	r1, r9
 800b17a:	f7f5 fa3d 	bl	80005f8 <__aeabi_dmul>
 800b17e:	4680      	mov	r8, r0
 800b180:	4689      	mov	r9, r1
 800b182:	e7c5      	b.n	800b110 <_dtoa_r+0x530>
 800b184:	ec51 0b17 	vmov	r0, r1, d7
 800b188:	f7f5 fa36 	bl	80005f8 <__aeabi_dmul>
 800b18c:	9b02      	ldr	r3, [sp, #8]
 800b18e:	9d00      	ldr	r5, [sp, #0]
 800b190:	930f      	str	r3, [sp, #60]	; 0x3c
 800b192:	ec41 0b19 	vmov	d9, r0, r1
 800b196:	4649      	mov	r1, r9
 800b198:	4640      	mov	r0, r8
 800b19a:	f7f5 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800b19e:	4606      	mov	r6, r0
 800b1a0:	f7f5 f9c0 	bl	8000524 <__aeabi_i2d>
 800b1a4:	3630      	adds	r6, #48	; 0x30
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 f86b 	bl	8000288 <__aeabi_dsub>
 800b1b2:	f805 6b01 	strb.w	r6, [r5], #1
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	429d      	cmp	r5, r3
 800b1ba:	4680      	mov	r8, r0
 800b1bc:	4689      	mov	r9, r1
 800b1be:	f04f 0200 	mov.w	r2, #0
 800b1c2:	d124      	bne.n	800b20e <_dtoa_r+0x62e>
 800b1c4:	4b1b      	ldr	r3, [pc, #108]	; (800b234 <_dtoa_r+0x654>)
 800b1c6:	ec51 0b19 	vmov	r0, r1, d9
 800b1ca:	f7f5 f85f 	bl	800028c <__adddf3>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	f7f5 fc9f 	bl	8000b18 <__aeabi_dcmpgt>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d173      	bne.n	800b2c6 <_dtoa_r+0x6e6>
 800b1de:	ec53 2b19 	vmov	r2, r3, d9
 800b1e2:	4914      	ldr	r1, [pc, #80]	; (800b234 <_dtoa_r+0x654>)
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	f7f5 f84f 	bl	8000288 <__aeabi_dsub>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4640      	mov	r0, r8
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	f7f5 fc73 	bl	8000adc <__aeabi_dcmplt>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	f43f af2f 	beq.w	800b05a <_dtoa_r+0x47a>
 800b1fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b1fe:	1e6b      	subs	r3, r5, #1
 800b200:	930f      	str	r3, [sp, #60]	; 0x3c
 800b202:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b206:	2b30      	cmp	r3, #48	; 0x30
 800b208:	d0f8      	beq.n	800b1fc <_dtoa_r+0x61c>
 800b20a:	46bb      	mov	fp, r7
 800b20c:	e04a      	b.n	800b2a4 <_dtoa_r+0x6c4>
 800b20e:	4b06      	ldr	r3, [pc, #24]	; (800b228 <_dtoa_r+0x648>)
 800b210:	f7f5 f9f2 	bl	80005f8 <__aeabi_dmul>
 800b214:	4680      	mov	r8, r0
 800b216:	4689      	mov	r9, r1
 800b218:	e7bd      	b.n	800b196 <_dtoa_r+0x5b6>
 800b21a:	bf00      	nop
 800b21c:	0800cdb8 	.word	0x0800cdb8
 800b220:	0800cd90 	.word	0x0800cd90
 800b224:	3ff00000 	.word	0x3ff00000
 800b228:	40240000 	.word	0x40240000
 800b22c:	401c0000 	.word	0x401c0000
 800b230:	40140000 	.word	0x40140000
 800b234:	3fe00000 	.word	0x3fe00000
 800b238:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b23c:	9d00      	ldr	r5, [sp, #0]
 800b23e:	4642      	mov	r2, r8
 800b240:	464b      	mov	r3, r9
 800b242:	4630      	mov	r0, r6
 800b244:	4639      	mov	r1, r7
 800b246:	f7f5 fb01 	bl	800084c <__aeabi_ddiv>
 800b24a:	f7f5 fc85 	bl	8000b58 <__aeabi_d2iz>
 800b24e:	9001      	str	r0, [sp, #4]
 800b250:	f7f5 f968 	bl	8000524 <__aeabi_i2d>
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	f7f5 f9ce 	bl	80005f8 <__aeabi_dmul>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4630      	mov	r0, r6
 800b262:	4639      	mov	r1, r7
 800b264:	f7f5 f810 	bl	8000288 <__aeabi_dsub>
 800b268:	9e01      	ldr	r6, [sp, #4]
 800b26a:	9f04      	ldr	r7, [sp, #16]
 800b26c:	3630      	adds	r6, #48	; 0x30
 800b26e:	f805 6b01 	strb.w	r6, [r5], #1
 800b272:	9e00      	ldr	r6, [sp, #0]
 800b274:	1bae      	subs	r6, r5, r6
 800b276:	42b7      	cmp	r7, r6
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	d134      	bne.n	800b2e8 <_dtoa_r+0x708>
 800b27e:	f7f5 f805 	bl	800028c <__adddf3>
 800b282:	4642      	mov	r2, r8
 800b284:	464b      	mov	r3, r9
 800b286:	4606      	mov	r6, r0
 800b288:	460f      	mov	r7, r1
 800b28a:	f7f5 fc45 	bl	8000b18 <__aeabi_dcmpgt>
 800b28e:	b9c8      	cbnz	r0, 800b2c4 <_dtoa_r+0x6e4>
 800b290:	4642      	mov	r2, r8
 800b292:	464b      	mov	r3, r9
 800b294:	4630      	mov	r0, r6
 800b296:	4639      	mov	r1, r7
 800b298:	f7f5 fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800b29c:	b110      	cbz	r0, 800b2a4 <_dtoa_r+0x6c4>
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	07db      	lsls	r3, r3, #31
 800b2a2:	d40f      	bmi.n	800b2c4 <_dtoa_r+0x6e4>
 800b2a4:	4651      	mov	r1, sl
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 fbcc 	bl	800ba44 <_Bfree>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2b0:	702b      	strb	r3, [r5, #0]
 800b2b2:	f10b 0301 	add.w	r3, fp, #1
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f43f ace2 	beq.w	800ac84 <_dtoa_r+0xa4>
 800b2c0:	601d      	str	r5, [r3, #0]
 800b2c2:	e4df      	b.n	800ac84 <_dtoa_r+0xa4>
 800b2c4:	465f      	mov	r7, fp
 800b2c6:	462b      	mov	r3, r5
 800b2c8:	461d      	mov	r5, r3
 800b2ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2ce:	2a39      	cmp	r2, #57	; 0x39
 800b2d0:	d106      	bne.n	800b2e0 <_dtoa_r+0x700>
 800b2d2:	9a00      	ldr	r2, [sp, #0]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d1f7      	bne.n	800b2c8 <_dtoa_r+0x6e8>
 800b2d8:	9900      	ldr	r1, [sp, #0]
 800b2da:	2230      	movs	r2, #48	; 0x30
 800b2dc:	3701      	adds	r7, #1
 800b2de:	700a      	strb	r2, [r1, #0]
 800b2e0:	781a      	ldrb	r2, [r3, #0]
 800b2e2:	3201      	adds	r2, #1
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	e790      	b.n	800b20a <_dtoa_r+0x62a>
 800b2e8:	4ba3      	ldr	r3, [pc, #652]	; (800b578 <_dtoa_r+0x998>)
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f7f5 f984 	bl	80005f8 <__aeabi_dmul>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	460f      	mov	r7, r1
 800b2f8:	f7f5 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d09e      	beq.n	800b23e <_dtoa_r+0x65e>
 800b300:	e7d0      	b.n	800b2a4 <_dtoa_r+0x6c4>
 800b302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b304:	2a00      	cmp	r2, #0
 800b306:	f000 80ca 	beq.w	800b49e <_dtoa_r+0x8be>
 800b30a:	9a07      	ldr	r2, [sp, #28]
 800b30c:	2a01      	cmp	r2, #1
 800b30e:	f300 80ad 	bgt.w	800b46c <_dtoa_r+0x88c>
 800b312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b314:	2a00      	cmp	r2, #0
 800b316:	f000 80a5 	beq.w	800b464 <_dtoa_r+0x884>
 800b31a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b31e:	9e08      	ldr	r6, [sp, #32]
 800b320:	9d05      	ldr	r5, [sp, #20]
 800b322:	9a05      	ldr	r2, [sp, #20]
 800b324:	441a      	add	r2, r3
 800b326:	9205      	str	r2, [sp, #20]
 800b328:	9a06      	ldr	r2, [sp, #24]
 800b32a:	2101      	movs	r1, #1
 800b32c:	441a      	add	r2, r3
 800b32e:	4620      	mov	r0, r4
 800b330:	9206      	str	r2, [sp, #24]
 800b332:	f000 fc3d 	bl	800bbb0 <__i2b>
 800b336:	4607      	mov	r7, r0
 800b338:	b165      	cbz	r5, 800b354 <_dtoa_r+0x774>
 800b33a:	9b06      	ldr	r3, [sp, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dd09      	ble.n	800b354 <_dtoa_r+0x774>
 800b340:	42ab      	cmp	r3, r5
 800b342:	9a05      	ldr	r2, [sp, #20]
 800b344:	bfa8      	it	ge
 800b346:	462b      	movge	r3, r5
 800b348:	1ad2      	subs	r2, r2, r3
 800b34a:	9205      	str	r2, [sp, #20]
 800b34c:	9a06      	ldr	r2, [sp, #24]
 800b34e:	1aed      	subs	r5, r5, r3
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	9306      	str	r3, [sp, #24]
 800b354:	9b08      	ldr	r3, [sp, #32]
 800b356:	b1f3      	cbz	r3, 800b396 <_dtoa_r+0x7b6>
 800b358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f000 80a3 	beq.w	800b4a6 <_dtoa_r+0x8c6>
 800b360:	2e00      	cmp	r6, #0
 800b362:	dd10      	ble.n	800b386 <_dtoa_r+0x7a6>
 800b364:	4639      	mov	r1, r7
 800b366:	4632      	mov	r2, r6
 800b368:	4620      	mov	r0, r4
 800b36a:	f000 fce1 	bl	800bd30 <__pow5mult>
 800b36e:	4652      	mov	r2, sl
 800b370:	4601      	mov	r1, r0
 800b372:	4607      	mov	r7, r0
 800b374:	4620      	mov	r0, r4
 800b376:	f000 fc31 	bl	800bbdc <__multiply>
 800b37a:	4651      	mov	r1, sl
 800b37c:	4680      	mov	r8, r0
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 fb60 	bl	800ba44 <_Bfree>
 800b384:	46c2      	mov	sl, r8
 800b386:	9b08      	ldr	r3, [sp, #32]
 800b388:	1b9a      	subs	r2, r3, r6
 800b38a:	d004      	beq.n	800b396 <_dtoa_r+0x7b6>
 800b38c:	4651      	mov	r1, sl
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fcce 	bl	800bd30 <__pow5mult>
 800b394:	4682      	mov	sl, r0
 800b396:	2101      	movs	r1, #1
 800b398:	4620      	mov	r0, r4
 800b39a:	f000 fc09 	bl	800bbb0 <__i2b>
 800b39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	f340 8081 	ble.w	800b4aa <_dtoa_r+0x8ca>
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	4601      	mov	r1, r0
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 fcbf 	bl	800bd30 <__pow5mult>
 800b3b2:	9b07      	ldr	r3, [sp, #28]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	dd7a      	ble.n	800b4b0 <_dtoa_r+0x8d0>
 800b3ba:	f04f 0800 	mov.w	r8, #0
 800b3be:	6933      	ldr	r3, [r6, #16]
 800b3c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3c4:	6918      	ldr	r0, [r3, #16]
 800b3c6:	f000 fba5 	bl	800bb14 <__hi0bits>
 800b3ca:	f1c0 0020 	rsb	r0, r0, #32
 800b3ce:	9b06      	ldr	r3, [sp, #24]
 800b3d0:	4418      	add	r0, r3
 800b3d2:	f010 001f 	ands.w	r0, r0, #31
 800b3d6:	f000 8094 	beq.w	800b502 <_dtoa_r+0x922>
 800b3da:	f1c0 0320 	rsb	r3, r0, #32
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	f340 8085 	ble.w	800b4ee <_dtoa_r+0x90e>
 800b3e4:	9b05      	ldr	r3, [sp, #20]
 800b3e6:	f1c0 001c 	rsb	r0, r0, #28
 800b3ea:	4403      	add	r3, r0
 800b3ec:	9305      	str	r3, [sp, #20]
 800b3ee:	9b06      	ldr	r3, [sp, #24]
 800b3f0:	4403      	add	r3, r0
 800b3f2:	4405      	add	r5, r0
 800b3f4:	9306      	str	r3, [sp, #24]
 800b3f6:	9b05      	ldr	r3, [sp, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	dd05      	ble.n	800b408 <_dtoa_r+0x828>
 800b3fc:	4651      	mov	r1, sl
 800b3fe:	461a      	mov	r2, r3
 800b400:	4620      	mov	r0, r4
 800b402:	f000 fcef 	bl	800bde4 <__lshift>
 800b406:	4682      	mov	sl, r0
 800b408:	9b06      	ldr	r3, [sp, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	dd05      	ble.n	800b41a <_dtoa_r+0x83a>
 800b40e:	4631      	mov	r1, r6
 800b410:	461a      	mov	r2, r3
 800b412:	4620      	mov	r0, r4
 800b414:	f000 fce6 	bl	800bde4 <__lshift>
 800b418:	4606      	mov	r6, r0
 800b41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d072      	beq.n	800b506 <_dtoa_r+0x926>
 800b420:	4631      	mov	r1, r6
 800b422:	4650      	mov	r0, sl
 800b424:	f000 fd4a 	bl	800bebc <__mcmp>
 800b428:	2800      	cmp	r0, #0
 800b42a:	da6c      	bge.n	800b506 <_dtoa_r+0x926>
 800b42c:	2300      	movs	r3, #0
 800b42e:	4651      	mov	r1, sl
 800b430:	220a      	movs	r2, #10
 800b432:	4620      	mov	r0, r4
 800b434:	f000 fb28 	bl	800ba88 <__multadd>
 800b438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b43e:	4682      	mov	sl, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 81b0 	beq.w	800b7a6 <_dtoa_r+0xbc6>
 800b446:	2300      	movs	r3, #0
 800b448:	4639      	mov	r1, r7
 800b44a:	220a      	movs	r2, #10
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 fb1b 	bl	800ba88 <__multadd>
 800b452:	9b01      	ldr	r3, [sp, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	4607      	mov	r7, r0
 800b458:	f300 8096 	bgt.w	800b588 <_dtoa_r+0x9a8>
 800b45c:	9b07      	ldr	r3, [sp, #28]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	dc59      	bgt.n	800b516 <_dtoa_r+0x936>
 800b462:	e091      	b.n	800b588 <_dtoa_r+0x9a8>
 800b464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b46a:	e758      	b.n	800b31e <_dtoa_r+0x73e>
 800b46c:	9b04      	ldr	r3, [sp, #16]
 800b46e:	1e5e      	subs	r6, r3, #1
 800b470:	9b08      	ldr	r3, [sp, #32]
 800b472:	42b3      	cmp	r3, r6
 800b474:	bfbf      	itttt	lt
 800b476:	9b08      	ldrlt	r3, [sp, #32]
 800b478:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b47a:	9608      	strlt	r6, [sp, #32]
 800b47c:	1af3      	sublt	r3, r6, r3
 800b47e:	bfb4      	ite	lt
 800b480:	18d2      	addlt	r2, r2, r3
 800b482:	1b9e      	subge	r6, r3, r6
 800b484:	9b04      	ldr	r3, [sp, #16]
 800b486:	bfbc      	itt	lt
 800b488:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b48a:	2600      	movlt	r6, #0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfb7      	itett	lt
 800b490:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b494:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b498:	1a9d      	sublt	r5, r3, r2
 800b49a:	2300      	movlt	r3, #0
 800b49c:	e741      	b.n	800b322 <_dtoa_r+0x742>
 800b49e:	9e08      	ldr	r6, [sp, #32]
 800b4a0:	9d05      	ldr	r5, [sp, #20]
 800b4a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b4a4:	e748      	b.n	800b338 <_dtoa_r+0x758>
 800b4a6:	9a08      	ldr	r2, [sp, #32]
 800b4a8:	e770      	b.n	800b38c <_dtoa_r+0x7ac>
 800b4aa:	9b07      	ldr	r3, [sp, #28]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	dc19      	bgt.n	800b4e4 <_dtoa_r+0x904>
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	b9bb      	cbnz	r3, 800b4e4 <_dtoa_r+0x904>
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4ba:	b99b      	cbnz	r3, 800b4e4 <_dtoa_r+0x904>
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4c2:	0d1b      	lsrs	r3, r3, #20
 800b4c4:	051b      	lsls	r3, r3, #20
 800b4c6:	b183      	cbz	r3, 800b4ea <_dtoa_r+0x90a>
 800b4c8:	9b05      	ldr	r3, [sp, #20]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	9b06      	ldr	r3, [sp, #24]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	9306      	str	r3, [sp, #24]
 800b4d4:	f04f 0801 	mov.w	r8, #1
 800b4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f47f af6f 	bne.w	800b3be <_dtoa_r+0x7de>
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	e774      	b.n	800b3ce <_dtoa_r+0x7ee>
 800b4e4:	f04f 0800 	mov.w	r8, #0
 800b4e8:	e7f6      	b.n	800b4d8 <_dtoa_r+0x8f8>
 800b4ea:	4698      	mov	r8, r3
 800b4ec:	e7f4      	b.n	800b4d8 <_dtoa_r+0x8f8>
 800b4ee:	d082      	beq.n	800b3f6 <_dtoa_r+0x816>
 800b4f0:	9a05      	ldr	r2, [sp, #20]
 800b4f2:	331c      	adds	r3, #28
 800b4f4:	441a      	add	r2, r3
 800b4f6:	9205      	str	r2, [sp, #20]
 800b4f8:	9a06      	ldr	r2, [sp, #24]
 800b4fa:	441a      	add	r2, r3
 800b4fc:	441d      	add	r5, r3
 800b4fe:	9206      	str	r2, [sp, #24]
 800b500:	e779      	b.n	800b3f6 <_dtoa_r+0x816>
 800b502:	4603      	mov	r3, r0
 800b504:	e7f4      	b.n	800b4f0 <_dtoa_r+0x910>
 800b506:	9b04      	ldr	r3, [sp, #16]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dc37      	bgt.n	800b57c <_dtoa_r+0x99c>
 800b50c:	9b07      	ldr	r3, [sp, #28]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	dd34      	ble.n	800b57c <_dtoa_r+0x99c>
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	9b01      	ldr	r3, [sp, #4]
 800b518:	b963      	cbnz	r3, 800b534 <_dtoa_r+0x954>
 800b51a:	4631      	mov	r1, r6
 800b51c:	2205      	movs	r2, #5
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fab2 	bl	800ba88 <__multadd>
 800b524:	4601      	mov	r1, r0
 800b526:	4606      	mov	r6, r0
 800b528:	4650      	mov	r0, sl
 800b52a:	f000 fcc7 	bl	800bebc <__mcmp>
 800b52e:	2800      	cmp	r0, #0
 800b530:	f73f adbb 	bgt.w	800b0aa <_dtoa_r+0x4ca>
 800b534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b536:	9d00      	ldr	r5, [sp, #0]
 800b538:	ea6f 0b03 	mvn.w	fp, r3
 800b53c:	f04f 0800 	mov.w	r8, #0
 800b540:	4631      	mov	r1, r6
 800b542:	4620      	mov	r0, r4
 800b544:	f000 fa7e 	bl	800ba44 <_Bfree>
 800b548:	2f00      	cmp	r7, #0
 800b54a:	f43f aeab 	beq.w	800b2a4 <_dtoa_r+0x6c4>
 800b54e:	f1b8 0f00 	cmp.w	r8, #0
 800b552:	d005      	beq.n	800b560 <_dtoa_r+0x980>
 800b554:	45b8      	cmp	r8, r7
 800b556:	d003      	beq.n	800b560 <_dtoa_r+0x980>
 800b558:	4641      	mov	r1, r8
 800b55a:	4620      	mov	r0, r4
 800b55c:	f000 fa72 	bl	800ba44 <_Bfree>
 800b560:	4639      	mov	r1, r7
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fa6e 	bl	800ba44 <_Bfree>
 800b568:	e69c      	b.n	800b2a4 <_dtoa_r+0x6c4>
 800b56a:	2600      	movs	r6, #0
 800b56c:	4637      	mov	r7, r6
 800b56e:	e7e1      	b.n	800b534 <_dtoa_r+0x954>
 800b570:	46bb      	mov	fp, r7
 800b572:	4637      	mov	r7, r6
 800b574:	e599      	b.n	800b0aa <_dtoa_r+0x4ca>
 800b576:	bf00      	nop
 800b578:	40240000 	.word	0x40240000
 800b57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 80c8 	beq.w	800b714 <_dtoa_r+0xb34>
 800b584:	9b04      	ldr	r3, [sp, #16]
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	2d00      	cmp	r5, #0
 800b58a:	dd05      	ble.n	800b598 <_dtoa_r+0x9b8>
 800b58c:	4639      	mov	r1, r7
 800b58e:	462a      	mov	r2, r5
 800b590:	4620      	mov	r0, r4
 800b592:	f000 fc27 	bl	800bde4 <__lshift>
 800b596:	4607      	mov	r7, r0
 800b598:	f1b8 0f00 	cmp.w	r8, #0
 800b59c:	d05b      	beq.n	800b656 <_dtoa_r+0xa76>
 800b59e:	6879      	ldr	r1, [r7, #4]
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 fa0f 	bl	800b9c4 <_Balloc>
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	b928      	cbnz	r0, 800b5b6 <_dtoa_r+0x9d6>
 800b5aa:	4b83      	ldr	r3, [pc, #524]	; (800b7b8 <_dtoa_r+0xbd8>)
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b5b2:	f7ff bb2e 	b.w	800ac12 <_dtoa_r+0x32>
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	3202      	adds	r2, #2
 800b5ba:	0092      	lsls	r2, r2, #2
 800b5bc:	f107 010c 	add.w	r1, r7, #12
 800b5c0:	300c      	adds	r0, #12
 800b5c2:	f000 ffab 	bl	800c51c <memcpy>
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 fc0a 	bl	800bde4 <__lshift>
 800b5d0:	9b00      	ldr	r3, [sp, #0]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	9304      	str	r3, [sp, #16]
 800b5d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5da:	4413      	add	r3, r2
 800b5dc:	9308      	str	r3, [sp, #32]
 800b5de:	9b02      	ldr	r3, [sp, #8]
 800b5e0:	f003 0301 	and.w	r3, r3, #1
 800b5e4:	46b8      	mov	r8, r7
 800b5e6:	9306      	str	r3, [sp, #24]
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	9b04      	ldr	r3, [sp, #16]
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	4650      	mov	r0, sl
 800b5f2:	9301      	str	r3, [sp, #4]
 800b5f4:	f7ff fa69 	bl	800aaca <quorem>
 800b5f8:	4641      	mov	r1, r8
 800b5fa:	9002      	str	r0, [sp, #8]
 800b5fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b600:	4650      	mov	r0, sl
 800b602:	f000 fc5b 	bl	800bebc <__mcmp>
 800b606:	463a      	mov	r2, r7
 800b608:	9005      	str	r0, [sp, #20]
 800b60a:	4631      	mov	r1, r6
 800b60c:	4620      	mov	r0, r4
 800b60e:	f000 fc71 	bl	800bef4 <__mdiff>
 800b612:	68c2      	ldr	r2, [r0, #12]
 800b614:	4605      	mov	r5, r0
 800b616:	bb02      	cbnz	r2, 800b65a <_dtoa_r+0xa7a>
 800b618:	4601      	mov	r1, r0
 800b61a:	4650      	mov	r0, sl
 800b61c:	f000 fc4e 	bl	800bebc <__mcmp>
 800b620:	4602      	mov	r2, r0
 800b622:	4629      	mov	r1, r5
 800b624:	4620      	mov	r0, r4
 800b626:	9209      	str	r2, [sp, #36]	; 0x24
 800b628:	f000 fa0c 	bl	800ba44 <_Bfree>
 800b62c:	9b07      	ldr	r3, [sp, #28]
 800b62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b630:	9d04      	ldr	r5, [sp, #16]
 800b632:	ea43 0102 	orr.w	r1, r3, r2
 800b636:	9b06      	ldr	r3, [sp, #24]
 800b638:	4319      	orrs	r1, r3
 800b63a:	d110      	bne.n	800b65e <_dtoa_r+0xa7e>
 800b63c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b640:	d029      	beq.n	800b696 <_dtoa_r+0xab6>
 800b642:	9b05      	ldr	r3, [sp, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dd02      	ble.n	800b64e <_dtoa_r+0xa6e>
 800b648:	9b02      	ldr	r3, [sp, #8]
 800b64a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b64e:	9b01      	ldr	r3, [sp, #4]
 800b650:	f883 9000 	strb.w	r9, [r3]
 800b654:	e774      	b.n	800b540 <_dtoa_r+0x960>
 800b656:	4638      	mov	r0, r7
 800b658:	e7ba      	b.n	800b5d0 <_dtoa_r+0x9f0>
 800b65a:	2201      	movs	r2, #1
 800b65c:	e7e1      	b.n	800b622 <_dtoa_r+0xa42>
 800b65e:	9b05      	ldr	r3, [sp, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	db04      	blt.n	800b66e <_dtoa_r+0xa8e>
 800b664:	9907      	ldr	r1, [sp, #28]
 800b666:	430b      	orrs	r3, r1
 800b668:	9906      	ldr	r1, [sp, #24]
 800b66a:	430b      	orrs	r3, r1
 800b66c:	d120      	bne.n	800b6b0 <_dtoa_r+0xad0>
 800b66e:	2a00      	cmp	r2, #0
 800b670:	dded      	ble.n	800b64e <_dtoa_r+0xa6e>
 800b672:	4651      	mov	r1, sl
 800b674:	2201      	movs	r2, #1
 800b676:	4620      	mov	r0, r4
 800b678:	f000 fbb4 	bl	800bde4 <__lshift>
 800b67c:	4631      	mov	r1, r6
 800b67e:	4682      	mov	sl, r0
 800b680:	f000 fc1c 	bl	800bebc <__mcmp>
 800b684:	2800      	cmp	r0, #0
 800b686:	dc03      	bgt.n	800b690 <_dtoa_r+0xab0>
 800b688:	d1e1      	bne.n	800b64e <_dtoa_r+0xa6e>
 800b68a:	f019 0f01 	tst.w	r9, #1
 800b68e:	d0de      	beq.n	800b64e <_dtoa_r+0xa6e>
 800b690:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b694:	d1d8      	bne.n	800b648 <_dtoa_r+0xa68>
 800b696:	9a01      	ldr	r2, [sp, #4]
 800b698:	2339      	movs	r3, #57	; 0x39
 800b69a:	7013      	strb	r3, [r2, #0]
 800b69c:	462b      	mov	r3, r5
 800b69e:	461d      	mov	r5, r3
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6a6:	2a39      	cmp	r2, #57	; 0x39
 800b6a8:	d06c      	beq.n	800b784 <_dtoa_r+0xba4>
 800b6aa:	3201      	adds	r2, #1
 800b6ac:	701a      	strb	r2, [r3, #0]
 800b6ae:	e747      	b.n	800b540 <_dtoa_r+0x960>
 800b6b0:	2a00      	cmp	r2, #0
 800b6b2:	dd07      	ble.n	800b6c4 <_dtoa_r+0xae4>
 800b6b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b6b8:	d0ed      	beq.n	800b696 <_dtoa_r+0xab6>
 800b6ba:	9a01      	ldr	r2, [sp, #4]
 800b6bc:	f109 0301 	add.w	r3, r9, #1
 800b6c0:	7013      	strb	r3, [r2, #0]
 800b6c2:	e73d      	b.n	800b540 <_dtoa_r+0x960>
 800b6c4:	9b04      	ldr	r3, [sp, #16]
 800b6c6:	9a08      	ldr	r2, [sp, #32]
 800b6c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d043      	beq.n	800b758 <_dtoa_r+0xb78>
 800b6d0:	4651      	mov	r1, sl
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	220a      	movs	r2, #10
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f000 f9d6 	bl	800ba88 <__multadd>
 800b6dc:	45b8      	cmp	r8, r7
 800b6de:	4682      	mov	sl, r0
 800b6e0:	f04f 0300 	mov.w	r3, #0
 800b6e4:	f04f 020a 	mov.w	r2, #10
 800b6e8:	4641      	mov	r1, r8
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	d107      	bne.n	800b6fe <_dtoa_r+0xb1e>
 800b6ee:	f000 f9cb 	bl	800ba88 <__multadd>
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	e775      	b.n	800b5ea <_dtoa_r+0xa0a>
 800b6fe:	f000 f9c3 	bl	800ba88 <__multadd>
 800b702:	4639      	mov	r1, r7
 800b704:	4680      	mov	r8, r0
 800b706:	2300      	movs	r3, #0
 800b708:	220a      	movs	r2, #10
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 f9bc 	bl	800ba88 <__multadd>
 800b710:	4607      	mov	r7, r0
 800b712:	e7f0      	b.n	800b6f6 <_dtoa_r+0xb16>
 800b714:	9b04      	ldr	r3, [sp, #16]
 800b716:	9301      	str	r3, [sp, #4]
 800b718:	9d00      	ldr	r5, [sp, #0]
 800b71a:	4631      	mov	r1, r6
 800b71c:	4650      	mov	r0, sl
 800b71e:	f7ff f9d4 	bl	800aaca <quorem>
 800b722:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	f805 9b01 	strb.w	r9, [r5], #1
 800b72c:	1aea      	subs	r2, r5, r3
 800b72e:	9b01      	ldr	r3, [sp, #4]
 800b730:	4293      	cmp	r3, r2
 800b732:	dd07      	ble.n	800b744 <_dtoa_r+0xb64>
 800b734:	4651      	mov	r1, sl
 800b736:	2300      	movs	r3, #0
 800b738:	220a      	movs	r2, #10
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 f9a4 	bl	800ba88 <__multadd>
 800b740:	4682      	mov	sl, r0
 800b742:	e7ea      	b.n	800b71a <_dtoa_r+0xb3a>
 800b744:	9b01      	ldr	r3, [sp, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	bfc8      	it	gt
 800b74a:	461d      	movgt	r5, r3
 800b74c:	9b00      	ldr	r3, [sp, #0]
 800b74e:	bfd8      	it	le
 800b750:	2501      	movle	r5, #1
 800b752:	441d      	add	r5, r3
 800b754:	f04f 0800 	mov.w	r8, #0
 800b758:	4651      	mov	r1, sl
 800b75a:	2201      	movs	r2, #1
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fb41 	bl	800bde4 <__lshift>
 800b762:	4631      	mov	r1, r6
 800b764:	4682      	mov	sl, r0
 800b766:	f000 fba9 	bl	800bebc <__mcmp>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	dc96      	bgt.n	800b69c <_dtoa_r+0xabc>
 800b76e:	d102      	bne.n	800b776 <_dtoa_r+0xb96>
 800b770:	f019 0f01 	tst.w	r9, #1
 800b774:	d192      	bne.n	800b69c <_dtoa_r+0xabc>
 800b776:	462b      	mov	r3, r5
 800b778:	461d      	mov	r5, r3
 800b77a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b77e:	2a30      	cmp	r2, #48	; 0x30
 800b780:	d0fa      	beq.n	800b778 <_dtoa_r+0xb98>
 800b782:	e6dd      	b.n	800b540 <_dtoa_r+0x960>
 800b784:	9a00      	ldr	r2, [sp, #0]
 800b786:	429a      	cmp	r2, r3
 800b788:	d189      	bne.n	800b69e <_dtoa_r+0xabe>
 800b78a:	f10b 0b01 	add.w	fp, fp, #1
 800b78e:	2331      	movs	r3, #49	; 0x31
 800b790:	e796      	b.n	800b6c0 <_dtoa_r+0xae0>
 800b792:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <_dtoa_r+0xbdc>)
 800b794:	f7ff ba99 	b.w	800acca <_dtoa_r+0xea>
 800b798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f47f aa6d 	bne.w	800ac7a <_dtoa_r+0x9a>
 800b7a0:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <_dtoa_r+0xbe0>)
 800b7a2:	f7ff ba92 	b.w	800acca <_dtoa_r+0xea>
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	dcb5      	bgt.n	800b718 <_dtoa_r+0xb38>
 800b7ac:	9b07      	ldr	r3, [sp, #28]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	f73f aeb1 	bgt.w	800b516 <_dtoa_r+0x936>
 800b7b4:	e7b0      	b.n	800b718 <_dtoa_r+0xb38>
 800b7b6:	bf00      	nop
 800b7b8:	0800cd24 	.word	0x0800cd24
 800b7bc:	0800cc84 	.word	0x0800cc84
 800b7c0:	0800cca8 	.word	0x0800cca8

0800b7c4 <_free_r>:
 800b7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7c6:	2900      	cmp	r1, #0
 800b7c8:	d044      	beq.n	800b854 <_free_r+0x90>
 800b7ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7ce:	9001      	str	r0, [sp, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b7d6:	bfb8      	it	lt
 800b7d8:	18e4      	addlt	r4, r4, r3
 800b7da:	f000 f8e7 	bl	800b9ac <__malloc_lock>
 800b7de:	4a1e      	ldr	r2, [pc, #120]	; (800b858 <_free_r+0x94>)
 800b7e0:	9801      	ldr	r0, [sp, #4]
 800b7e2:	6813      	ldr	r3, [r2, #0]
 800b7e4:	b933      	cbnz	r3, 800b7f4 <_free_r+0x30>
 800b7e6:	6063      	str	r3, [r4, #4]
 800b7e8:	6014      	str	r4, [r2, #0]
 800b7ea:	b003      	add	sp, #12
 800b7ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7f0:	f000 b8e2 	b.w	800b9b8 <__malloc_unlock>
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	d908      	bls.n	800b80a <_free_r+0x46>
 800b7f8:	6825      	ldr	r5, [r4, #0]
 800b7fa:	1961      	adds	r1, r4, r5
 800b7fc:	428b      	cmp	r3, r1
 800b7fe:	bf01      	itttt	eq
 800b800:	6819      	ldreq	r1, [r3, #0]
 800b802:	685b      	ldreq	r3, [r3, #4]
 800b804:	1949      	addeq	r1, r1, r5
 800b806:	6021      	streq	r1, [r4, #0]
 800b808:	e7ed      	b.n	800b7e6 <_free_r+0x22>
 800b80a:	461a      	mov	r2, r3
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	b10b      	cbz	r3, 800b814 <_free_r+0x50>
 800b810:	42a3      	cmp	r3, r4
 800b812:	d9fa      	bls.n	800b80a <_free_r+0x46>
 800b814:	6811      	ldr	r1, [r2, #0]
 800b816:	1855      	adds	r5, r2, r1
 800b818:	42a5      	cmp	r5, r4
 800b81a:	d10b      	bne.n	800b834 <_free_r+0x70>
 800b81c:	6824      	ldr	r4, [r4, #0]
 800b81e:	4421      	add	r1, r4
 800b820:	1854      	adds	r4, r2, r1
 800b822:	42a3      	cmp	r3, r4
 800b824:	6011      	str	r1, [r2, #0]
 800b826:	d1e0      	bne.n	800b7ea <_free_r+0x26>
 800b828:	681c      	ldr	r4, [r3, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	6053      	str	r3, [r2, #4]
 800b82e:	440c      	add	r4, r1
 800b830:	6014      	str	r4, [r2, #0]
 800b832:	e7da      	b.n	800b7ea <_free_r+0x26>
 800b834:	d902      	bls.n	800b83c <_free_r+0x78>
 800b836:	230c      	movs	r3, #12
 800b838:	6003      	str	r3, [r0, #0]
 800b83a:	e7d6      	b.n	800b7ea <_free_r+0x26>
 800b83c:	6825      	ldr	r5, [r4, #0]
 800b83e:	1961      	adds	r1, r4, r5
 800b840:	428b      	cmp	r3, r1
 800b842:	bf04      	itt	eq
 800b844:	6819      	ldreq	r1, [r3, #0]
 800b846:	685b      	ldreq	r3, [r3, #4]
 800b848:	6063      	str	r3, [r4, #4]
 800b84a:	bf04      	itt	eq
 800b84c:	1949      	addeq	r1, r1, r5
 800b84e:	6021      	streq	r1, [r4, #0]
 800b850:	6054      	str	r4, [r2, #4]
 800b852:	e7ca      	b.n	800b7ea <_free_r+0x26>
 800b854:	b003      	add	sp, #12
 800b856:	bd30      	pop	{r4, r5, pc}
 800b858:	2000176c 	.word	0x2000176c

0800b85c <malloc>:
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <malloc+0xc>)
 800b85e:	4601      	mov	r1, r0
 800b860:	6818      	ldr	r0, [r3, #0]
 800b862:	f000 b823 	b.w	800b8ac <_malloc_r>
 800b866:	bf00      	nop
 800b868:	200001d4 	.word	0x200001d4

0800b86c <sbrk_aligned>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	4e0e      	ldr	r6, [pc, #56]	; (800b8a8 <sbrk_aligned+0x3c>)
 800b870:	460c      	mov	r4, r1
 800b872:	6831      	ldr	r1, [r6, #0]
 800b874:	4605      	mov	r5, r0
 800b876:	b911      	cbnz	r1, 800b87e <sbrk_aligned+0x12>
 800b878:	f000 fe40 	bl	800c4fc <_sbrk_r>
 800b87c:	6030      	str	r0, [r6, #0]
 800b87e:	4621      	mov	r1, r4
 800b880:	4628      	mov	r0, r5
 800b882:	f000 fe3b 	bl	800c4fc <_sbrk_r>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	d00a      	beq.n	800b8a0 <sbrk_aligned+0x34>
 800b88a:	1cc4      	adds	r4, r0, #3
 800b88c:	f024 0403 	bic.w	r4, r4, #3
 800b890:	42a0      	cmp	r0, r4
 800b892:	d007      	beq.n	800b8a4 <sbrk_aligned+0x38>
 800b894:	1a21      	subs	r1, r4, r0
 800b896:	4628      	mov	r0, r5
 800b898:	f000 fe30 	bl	800c4fc <_sbrk_r>
 800b89c:	3001      	adds	r0, #1
 800b89e:	d101      	bne.n	800b8a4 <sbrk_aligned+0x38>
 800b8a0:	f04f 34ff 	mov.w	r4, #4294967295
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}
 800b8a8:	20001770 	.word	0x20001770

0800b8ac <_malloc_r>:
 800b8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b0:	1ccd      	adds	r5, r1, #3
 800b8b2:	f025 0503 	bic.w	r5, r5, #3
 800b8b6:	3508      	adds	r5, #8
 800b8b8:	2d0c      	cmp	r5, #12
 800b8ba:	bf38      	it	cc
 800b8bc:	250c      	movcc	r5, #12
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	4607      	mov	r7, r0
 800b8c2:	db01      	blt.n	800b8c8 <_malloc_r+0x1c>
 800b8c4:	42a9      	cmp	r1, r5
 800b8c6:	d905      	bls.n	800b8d4 <_malloc_r+0x28>
 800b8c8:	230c      	movs	r3, #12
 800b8ca:	603b      	str	r3, [r7, #0]
 800b8cc:	2600      	movs	r6, #0
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b9a8 <_malloc_r+0xfc>
 800b8d8:	f000 f868 	bl	800b9ac <__malloc_lock>
 800b8dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b8e0:	461c      	mov	r4, r3
 800b8e2:	bb5c      	cbnz	r4, 800b93c <_malloc_r+0x90>
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	f7ff ffc0 	bl	800b86c <sbrk_aligned>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	d155      	bne.n	800b99e <_malloc_r+0xf2>
 800b8f2:	f8d8 4000 	ldr.w	r4, [r8]
 800b8f6:	4626      	mov	r6, r4
 800b8f8:	2e00      	cmp	r6, #0
 800b8fa:	d145      	bne.n	800b988 <_malloc_r+0xdc>
 800b8fc:	2c00      	cmp	r4, #0
 800b8fe:	d048      	beq.n	800b992 <_malloc_r+0xe6>
 800b900:	6823      	ldr	r3, [r4, #0]
 800b902:	4631      	mov	r1, r6
 800b904:	4638      	mov	r0, r7
 800b906:	eb04 0903 	add.w	r9, r4, r3
 800b90a:	f000 fdf7 	bl	800c4fc <_sbrk_r>
 800b90e:	4581      	cmp	r9, r0
 800b910:	d13f      	bne.n	800b992 <_malloc_r+0xe6>
 800b912:	6821      	ldr	r1, [r4, #0]
 800b914:	1a6d      	subs	r5, r5, r1
 800b916:	4629      	mov	r1, r5
 800b918:	4638      	mov	r0, r7
 800b91a:	f7ff ffa7 	bl	800b86c <sbrk_aligned>
 800b91e:	3001      	adds	r0, #1
 800b920:	d037      	beq.n	800b992 <_malloc_r+0xe6>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	442b      	add	r3, r5
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	f8d8 3000 	ldr.w	r3, [r8]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d038      	beq.n	800b9a2 <_malloc_r+0xf6>
 800b930:	685a      	ldr	r2, [r3, #4]
 800b932:	42a2      	cmp	r2, r4
 800b934:	d12b      	bne.n	800b98e <_malloc_r+0xe2>
 800b936:	2200      	movs	r2, #0
 800b938:	605a      	str	r2, [r3, #4]
 800b93a:	e00f      	b.n	800b95c <_malloc_r+0xb0>
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	1b52      	subs	r2, r2, r5
 800b940:	d41f      	bmi.n	800b982 <_malloc_r+0xd6>
 800b942:	2a0b      	cmp	r2, #11
 800b944:	d917      	bls.n	800b976 <_malloc_r+0xca>
 800b946:	1961      	adds	r1, r4, r5
 800b948:	42a3      	cmp	r3, r4
 800b94a:	6025      	str	r5, [r4, #0]
 800b94c:	bf18      	it	ne
 800b94e:	6059      	strne	r1, [r3, #4]
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	bf08      	it	eq
 800b954:	f8c8 1000 	streq.w	r1, [r8]
 800b958:	5162      	str	r2, [r4, r5]
 800b95a:	604b      	str	r3, [r1, #4]
 800b95c:	4638      	mov	r0, r7
 800b95e:	f104 060b 	add.w	r6, r4, #11
 800b962:	f000 f829 	bl	800b9b8 <__malloc_unlock>
 800b966:	f026 0607 	bic.w	r6, r6, #7
 800b96a:	1d23      	adds	r3, r4, #4
 800b96c:	1af2      	subs	r2, r6, r3
 800b96e:	d0ae      	beq.n	800b8ce <_malloc_r+0x22>
 800b970:	1b9b      	subs	r3, r3, r6
 800b972:	50a3      	str	r3, [r4, r2]
 800b974:	e7ab      	b.n	800b8ce <_malloc_r+0x22>
 800b976:	42a3      	cmp	r3, r4
 800b978:	6862      	ldr	r2, [r4, #4]
 800b97a:	d1dd      	bne.n	800b938 <_malloc_r+0x8c>
 800b97c:	f8c8 2000 	str.w	r2, [r8]
 800b980:	e7ec      	b.n	800b95c <_malloc_r+0xb0>
 800b982:	4623      	mov	r3, r4
 800b984:	6864      	ldr	r4, [r4, #4]
 800b986:	e7ac      	b.n	800b8e2 <_malloc_r+0x36>
 800b988:	4634      	mov	r4, r6
 800b98a:	6876      	ldr	r6, [r6, #4]
 800b98c:	e7b4      	b.n	800b8f8 <_malloc_r+0x4c>
 800b98e:	4613      	mov	r3, r2
 800b990:	e7cc      	b.n	800b92c <_malloc_r+0x80>
 800b992:	230c      	movs	r3, #12
 800b994:	603b      	str	r3, [r7, #0]
 800b996:	4638      	mov	r0, r7
 800b998:	f000 f80e 	bl	800b9b8 <__malloc_unlock>
 800b99c:	e797      	b.n	800b8ce <_malloc_r+0x22>
 800b99e:	6025      	str	r5, [r4, #0]
 800b9a0:	e7dc      	b.n	800b95c <_malloc_r+0xb0>
 800b9a2:	605b      	str	r3, [r3, #4]
 800b9a4:	deff      	udf	#255	; 0xff
 800b9a6:	bf00      	nop
 800b9a8:	2000176c 	.word	0x2000176c

0800b9ac <__malloc_lock>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__malloc_lock+0x8>)
 800b9ae:	f7ff b88a 	b.w	800aac6 <__retarget_lock_acquire_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	20001768 	.word	0x20001768

0800b9b8 <__malloc_unlock>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__malloc_unlock+0x8>)
 800b9ba:	f7ff b885 	b.w	800aac8 <__retarget_lock_release_recursive>
 800b9be:	bf00      	nop
 800b9c0:	20001768 	.word	0x20001768

0800b9c4 <_Balloc>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	69c6      	ldr	r6, [r0, #28]
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	b976      	cbnz	r6, 800b9ec <_Balloc+0x28>
 800b9ce:	2010      	movs	r0, #16
 800b9d0:	f7ff ff44 	bl	800b85c <malloc>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	61e0      	str	r0, [r4, #28]
 800b9d8:	b920      	cbnz	r0, 800b9e4 <_Balloc+0x20>
 800b9da:	4b18      	ldr	r3, [pc, #96]	; (800ba3c <_Balloc+0x78>)
 800b9dc:	4818      	ldr	r0, [pc, #96]	; (800ba40 <_Balloc+0x7c>)
 800b9de:	216b      	movs	r1, #107	; 0x6b
 800b9e0:	f000 fdaa 	bl	800c538 <__assert_func>
 800b9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9e8:	6006      	str	r6, [r0, #0]
 800b9ea:	60c6      	str	r6, [r0, #12]
 800b9ec:	69e6      	ldr	r6, [r4, #28]
 800b9ee:	68f3      	ldr	r3, [r6, #12]
 800b9f0:	b183      	cbz	r3, 800ba14 <_Balloc+0x50>
 800b9f2:	69e3      	ldr	r3, [r4, #28]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9fa:	b9b8      	cbnz	r0, 800ba2c <_Balloc+0x68>
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	fa01 f605 	lsl.w	r6, r1, r5
 800ba02:	1d72      	adds	r2, r6, #5
 800ba04:	0092      	lsls	r2, r2, #2
 800ba06:	4620      	mov	r0, r4
 800ba08:	f000 fdb4 	bl	800c574 <_calloc_r>
 800ba0c:	b160      	cbz	r0, 800ba28 <_Balloc+0x64>
 800ba0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba12:	e00e      	b.n	800ba32 <_Balloc+0x6e>
 800ba14:	2221      	movs	r2, #33	; 0x21
 800ba16:	2104      	movs	r1, #4
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 fdab 	bl	800c574 <_calloc_r>
 800ba1e:	69e3      	ldr	r3, [r4, #28]
 800ba20:	60f0      	str	r0, [r6, #12]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1e4      	bne.n	800b9f2 <_Balloc+0x2e>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	6802      	ldr	r2, [r0, #0]
 800ba2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba32:	2300      	movs	r3, #0
 800ba34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba38:	e7f7      	b.n	800ba2a <_Balloc+0x66>
 800ba3a:	bf00      	nop
 800ba3c:	0800ccb5 	.word	0x0800ccb5
 800ba40:	0800cd35 	.word	0x0800cd35

0800ba44 <_Bfree>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	69c6      	ldr	r6, [r0, #28]
 800ba48:	4605      	mov	r5, r0
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	b976      	cbnz	r6, 800ba6c <_Bfree+0x28>
 800ba4e:	2010      	movs	r0, #16
 800ba50:	f7ff ff04 	bl	800b85c <malloc>
 800ba54:	4602      	mov	r2, r0
 800ba56:	61e8      	str	r0, [r5, #28]
 800ba58:	b920      	cbnz	r0, 800ba64 <_Bfree+0x20>
 800ba5a:	4b09      	ldr	r3, [pc, #36]	; (800ba80 <_Bfree+0x3c>)
 800ba5c:	4809      	ldr	r0, [pc, #36]	; (800ba84 <_Bfree+0x40>)
 800ba5e:	218f      	movs	r1, #143	; 0x8f
 800ba60:	f000 fd6a 	bl	800c538 <__assert_func>
 800ba64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba68:	6006      	str	r6, [r0, #0]
 800ba6a:	60c6      	str	r6, [r0, #12]
 800ba6c:	b13c      	cbz	r4, 800ba7e <_Bfree+0x3a>
 800ba6e:	69eb      	ldr	r3, [r5, #28]
 800ba70:	6862      	ldr	r2, [r4, #4]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba78:	6021      	str	r1, [r4, #0]
 800ba7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}
 800ba80:	0800ccb5 	.word	0x0800ccb5
 800ba84:	0800cd35 	.word	0x0800cd35

0800ba88 <__multadd>:
 800ba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8c:	690d      	ldr	r5, [r1, #16]
 800ba8e:	4607      	mov	r7, r0
 800ba90:	460c      	mov	r4, r1
 800ba92:	461e      	mov	r6, r3
 800ba94:	f101 0c14 	add.w	ip, r1, #20
 800ba98:	2000      	movs	r0, #0
 800ba9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba9e:	b299      	uxth	r1, r3
 800baa0:	fb02 6101 	mla	r1, r2, r1, r6
 800baa4:	0c1e      	lsrs	r6, r3, #16
 800baa6:	0c0b      	lsrs	r3, r1, #16
 800baa8:	fb02 3306 	mla	r3, r2, r6, r3
 800baac:	b289      	uxth	r1, r1
 800baae:	3001      	adds	r0, #1
 800bab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bab4:	4285      	cmp	r5, r0
 800bab6:	f84c 1b04 	str.w	r1, [ip], #4
 800baba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800babe:	dcec      	bgt.n	800ba9a <__multadd+0x12>
 800bac0:	b30e      	cbz	r6, 800bb06 <__multadd+0x7e>
 800bac2:	68a3      	ldr	r3, [r4, #8]
 800bac4:	42ab      	cmp	r3, r5
 800bac6:	dc19      	bgt.n	800bafc <__multadd+0x74>
 800bac8:	6861      	ldr	r1, [r4, #4]
 800baca:	4638      	mov	r0, r7
 800bacc:	3101      	adds	r1, #1
 800bace:	f7ff ff79 	bl	800b9c4 <_Balloc>
 800bad2:	4680      	mov	r8, r0
 800bad4:	b928      	cbnz	r0, 800bae2 <__multadd+0x5a>
 800bad6:	4602      	mov	r2, r0
 800bad8:	4b0c      	ldr	r3, [pc, #48]	; (800bb0c <__multadd+0x84>)
 800bada:	480d      	ldr	r0, [pc, #52]	; (800bb10 <__multadd+0x88>)
 800badc:	21ba      	movs	r1, #186	; 0xba
 800bade:	f000 fd2b 	bl	800c538 <__assert_func>
 800bae2:	6922      	ldr	r2, [r4, #16]
 800bae4:	3202      	adds	r2, #2
 800bae6:	f104 010c 	add.w	r1, r4, #12
 800baea:	0092      	lsls	r2, r2, #2
 800baec:	300c      	adds	r0, #12
 800baee:	f000 fd15 	bl	800c51c <memcpy>
 800baf2:	4621      	mov	r1, r4
 800baf4:	4638      	mov	r0, r7
 800baf6:	f7ff ffa5 	bl	800ba44 <_Bfree>
 800bafa:	4644      	mov	r4, r8
 800bafc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb00:	3501      	adds	r5, #1
 800bb02:	615e      	str	r6, [r3, #20]
 800bb04:	6125      	str	r5, [r4, #16]
 800bb06:	4620      	mov	r0, r4
 800bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0c:	0800cd24 	.word	0x0800cd24
 800bb10:	0800cd35 	.word	0x0800cd35

0800bb14 <__hi0bits>:
 800bb14:	0c03      	lsrs	r3, r0, #16
 800bb16:	041b      	lsls	r3, r3, #16
 800bb18:	b9d3      	cbnz	r3, 800bb50 <__hi0bits+0x3c>
 800bb1a:	0400      	lsls	r0, r0, #16
 800bb1c:	2310      	movs	r3, #16
 800bb1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb22:	bf04      	itt	eq
 800bb24:	0200      	lsleq	r0, r0, #8
 800bb26:	3308      	addeq	r3, #8
 800bb28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb2c:	bf04      	itt	eq
 800bb2e:	0100      	lsleq	r0, r0, #4
 800bb30:	3304      	addeq	r3, #4
 800bb32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb36:	bf04      	itt	eq
 800bb38:	0080      	lsleq	r0, r0, #2
 800bb3a:	3302      	addeq	r3, #2
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	db05      	blt.n	800bb4c <__hi0bits+0x38>
 800bb40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb44:	f103 0301 	add.w	r3, r3, #1
 800bb48:	bf08      	it	eq
 800bb4a:	2320      	moveq	r3, #32
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	4770      	bx	lr
 800bb50:	2300      	movs	r3, #0
 800bb52:	e7e4      	b.n	800bb1e <__hi0bits+0xa>

0800bb54 <__lo0bits>:
 800bb54:	6803      	ldr	r3, [r0, #0]
 800bb56:	f013 0207 	ands.w	r2, r3, #7
 800bb5a:	d00c      	beq.n	800bb76 <__lo0bits+0x22>
 800bb5c:	07d9      	lsls	r1, r3, #31
 800bb5e:	d422      	bmi.n	800bba6 <__lo0bits+0x52>
 800bb60:	079a      	lsls	r2, r3, #30
 800bb62:	bf49      	itett	mi
 800bb64:	085b      	lsrmi	r3, r3, #1
 800bb66:	089b      	lsrpl	r3, r3, #2
 800bb68:	6003      	strmi	r3, [r0, #0]
 800bb6a:	2201      	movmi	r2, #1
 800bb6c:	bf5c      	itt	pl
 800bb6e:	6003      	strpl	r3, [r0, #0]
 800bb70:	2202      	movpl	r2, #2
 800bb72:	4610      	mov	r0, r2
 800bb74:	4770      	bx	lr
 800bb76:	b299      	uxth	r1, r3
 800bb78:	b909      	cbnz	r1, 800bb7e <__lo0bits+0x2a>
 800bb7a:	0c1b      	lsrs	r3, r3, #16
 800bb7c:	2210      	movs	r2, #16
 800bb7e:	b2d9      	uxtb	r1, r3
 800bb80:	b909      	cbnz	r1, 800bb86 <__lo0bits+0x32>
 800bb82:	3208      	adds	r2, #8
 800bb84:	0a1b      	lsrs	r3, r3, #8
 800bb86:	0719      	lsls	r1, r3, #28
 800bb88:	bf04      	itt	eq
 800bb8a:	091b      	lsreq	r3, r3, #4
 800bb8c:	3204      	addeq	r2, #4
 800bb8e:	0799      	lsls	r1, r3, #30
 800bb90:	bf04      	itt	eq
 800bb92:	089b      	lsreq	r3, r3, #2
 800bb94:	3202      	addeq	r2, #2
 800bb96:	07d9      	lsls	r1, r3, #31
 800bb98:	d403      	bmi.n	800bba2 <__lo0bits+0x4e>
 800bb9a:	085b      	lsrs	r3, r3, #1
 800bb9c:	f102 0201 	add.w	r2, r2, #1
 800bba0:	d003      	beq.n	800bbaa <__lo0bits+0x56>
 800bba2:	6003      	str	r3, [r0, #0]
 800bba4:	e7e5      	b.n	800bb72 <__lo0bits+0x1e>
 800bba6:	2200      	movs	r2, #0
 800bba8:	e7e3      	b.n	800bb72 <__lo0bits+0x1e>
 800bbaa:	2220      	movs	r2, #32
 800bbac:	e7e1      	b.n	800bb72 <__lo0bits+0x1e>
	...

0800bbb0 <__i2b>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	f7ff ff05 	bl	800b9c4 <_Balloc>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	b928      	cbnz	r0, 800bbca <__i2b+0x1a>
 800bbbe:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <__i2b+0x24>)
 800bbc0:	4805      	ldr	r0, [pc, #20]	; (800bbd8 <__i2b+0x28>)
 800bbc2:	f240 1145 	movw	r1, #325	; 0x145
 800bbc6:	f000 fcb7 	bl	800c538 <__assert_func>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	6144      	str	r4, [r0, #20]
 800bbce:	6103      	str	r3, [r0, #16]
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	bf00      	nop
 800bbd4:	0800cd24 	.word	0x0800cd24
 800bbd8:	0800cd35 	.word	0x0800cd35

0800bbdc <__multiply>:
 800bbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe0:	4691      	mov	r9, r2
 800bbe2:	690a      	ldr	r2, [r1, #16]
 800bbe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	bfb8      	it	lt
 800bbec:	460b      	movlt	r3, r1
 800bbee:	460c      	mov	r4, r1
 800bbf0:	bfbc      	itt	lt
 800bbf2:	464c      	movlt	r4, r9
 800bbf4:	4699      	movlt	r9, r3
 800bbf6:	6927      	ldr	r7, [r4, #16]
 800bbf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbfc:	68a3      	ldr	r3, [r4, #8]
 800bbfe:	6861      	ldr	r1, [r4, #4]
 800bc00:	eb07 060a 	add.w	r6, r7, sl
 800bc04:	42b3      	cmp	r3, r6
 800bc06:	b085      	sub	sp, #20
 800bc08:	bfb8      	it	lt
 800bc0a:	3101      	addlt	r1, #1
 800bc0c:	f7ff feda 	bl	800b9c4 <_Balloc>
 800bc10:	b930      	cbnz	r0, 800bc20 <__multiply+0x44>
 800bc12:	4602      	mov	r2, r0
 800bc14:	4b44      	ldr	r3, [pc, #272]	; (800bd28 <__multiply+0x14c>)
 800bc16:	4845      	ldr	r0, [pc, #276]	; (800bd2c <__multiply+0x150>)
 800bc18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bc1c:	f000 fc8c 	bl	800c538 <__assert_func>
 800bc20:	f100 0514 	add.w	r5, r0, #20
 800bc24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc28:	462b      	mov	r3, r5
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	4543      	cmp	r3, r8
 800bc2e:	d321      	bcc.n	800bc74 <__multiply+0x98>
 800bc30:	f104 0314 	add.w	r3, r4, #20
 800bc34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc38:	f109 0314 	add.w	r3, r9, #20
 800bc3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc40:	9202      	str	r2, [sp, #8]
 800bc42:	1b3a      	subs	r2, r7, r4
 800bc44:	3a15      	subs	r2, #21
 800bc46:	f022 0203 	bic.w	r2, r2, #3
 800bc4a:	3204      	adds	r2, #4
 800bc4c:	f104 0115 	add.w	r1, r4, #21
 800bc50:	428f      	cmp	r7, r1
 800bc52:	bf38      	it	cc
 800bc54:	2204      	movcc	r2, #4
 800bc56:	9201      	str	r2, [sp, #4]
 800bc58:	9a02      	ldr	r2, [sp, #8]
 800bc5a:	9303      	str	r3, [sp, #12]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d80c      	bhi.n	800bc7a <__multiply+0x9e>
 800bc60:	2e00      	cmp	r6, #0
 800bc62:	dd03      	ble.n	800bc6c <__multiply+0x90>
 800bc64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d05b      	beq.n	800bd24 <__multiply+0x148>
 800bc6c:	6106      	str	r6, [r0, #16]
 800bc6e:	b005      	add	sp, #20
 800bc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc74:	f843 2b04 	str.w	r2, [r3], #4
 800bc78:	e7d8      	b.n	800bc2c <__multiply+0x50>
 800bc7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc7e:	f1ba 0f00 	cmp.w	sl, #0
 800bc82:	d024      	beq.n	800bcce <__multiply+0xf2>
 800bc84:	f104 0e14 	add.w	lr, r4, #20
 800bc88:	46a9      	mov	r9, r5
 800bc8a:	f04f 0c00 	mov.w	ip, #0
 800bc8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc92:	f8d9 1000 	ldr.w	r1, [r9]
 800bc96:	fa1f fb82 	uxth.w	fp, r2
 800bc9a:	b289      	uxth	r1, r1
 800bc9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bca0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bca4:	f8d9 2000 	ldr.w	r2, [r9]
 800bca8:	4461      	add	r1, ip
 800bcaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcae:	fb0a c20b 	mla	r2, sl, fp, ip
 800bcb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bcb6:	b289      	uxth	r1, r1
 800bcb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bcbc:	4577      	cmp	r7, lr
 800bcbe:	f849 1b04 	str.w	r1, [r9], #4
 800bcc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcc6:	d8e2      	bhi.n	800bc8e <__multiply+0xb2>
 800bcc8:	9a01      	ldr	r2, [sp, #4]
 800bcca:	f845 c002 	str.w	ip, [r5, r2]
 800bcce:	9a03      	ldr	r2, [sp, #12]
 800bcd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	f1b9 0f00 	cmp.w	r9, #0
 800bcda:	d021      	beq.n	800bd20 <__multiply+0x144>
 800bcdc:	6829      	ldr	r1, [r5, #0]
 800bcde:	f104 0c14 	add.w	ip, r4, #20
 800bce2:	46ae      	mov	lr, r5
 800bce4:	f04f 0a00 	mov.w	sl, #0
 800bce8:	f8bc b000 	ldrh.w	fp, [ip]
 800bcec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bcf0:	fb09 220b 	mla	r2, r9, fp, r2
 800bcf4:	4452      	add	r2, sl
 800bcf6:	b289      	uxth	r1, r1
 800bcf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bcfc:	f84e 1b04 	str.w	r1, [lr], #4
 800bd00:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd08:	f8be 1000 	ldrh.w	r1, [lr]
 800bd0c:	fb09 110a 	mla	r1, r9, sl, r1
 800bd10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bd14:	4567      	cmp	r7, ip
 800bd16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd1a:	d8e5      	bhi.n	800bce8 <__multiply+0x10c>
 800bd1c:	9a01      	ldr	r2, [sp, #4]
 800bd1e:	50a9      	str	r1, [r5, r2]
 800bd20:	3504      	adds	r5, #4
 800bd22:	e799      	b.n	800bc58 <__multiply+0x7c>
 800bd24:	3e01      	subs	r6, #1
 800bd26:	e79b      	b.n	800bc60 <__multiply+0x84>
 800bd28:	0800cd24 	.word	0x0800cd24
 800bd2c:	0800cd35 	.word	0x0800cd35

0800bd30 <__pow5mult>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	4615      	mov	r5, r2
 800bd36:	f012 0203 	ands.w	r2, r2, #3
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	460f      	mov	r7, r1
 800bd3e:	d007      	beq.n	800bd50 <__pow5mult+0x20>
 800bd40:	4c25      	ldr	r4, [pc, #148]	; (800bdd8 <__pow5mult+0xa8>)
 800bd42:	3a01      	subs	r2, #1
 800bd44:	2300      	movs	r3, #0
 800bd46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd4a:	f7ff fe9d 	bl	800ba88 <__multadd>
 800bd4e:	4607      	mov	r7, r0
 800bd50:	10ad      	asrs	r5, r5, #2
 800bd52:	d03d      	beq.n	800bdd0 <__pow5mult+0xa0>
 800bd54:	69f4      	ldr	r4, [r6, #28]
 800bd56:	b97c      	cbnz	r4, 800bd78 <__pow5mult+0x48>
 800bd58:	2010      	movs	r0, #16
 800bd5a:	f7ff fd7f 	bl	800b85c <malloc>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	61f0      	str	r0, [r6, #28]
 800bd62:	b928      	cbnz	r0, 800bd70 <__pow5mult+0x40>
 800bd64:	4b1d      	ldr	r3, [pc, #116]	; (800bddc <__pow5mult+0xac>)
 800bd66:	481e      	ldr	r0, [pc, #120]	; (800bde0 <__pow5mult+0xb0>)
 800bd68:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bd6c:	f000 fbe4 	bl	800c538 <__assert_func>
 800bd70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd74:	6004      	str	r4, [r0, #0]
 800bd76:	60c4      	str	r4, [r0, #12]
 800bd78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bd7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd80:	b94c      	cbnz	r4, 800bd96 <__pow5mult+0x66>
 800bd82:	f240 2171 	movw	r1, #625	; 0x271
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7ff ff12 	bl	800bbb0 <__i2b>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd92:	4604      	mov	r4, r0
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	f04f 0900 	mov.w	r9, #0
 800bd9a:	07eb      	lsls	r3, r5, #31
 800bd9c:	d50a      	bpl.n	800bdb4 <__pow5mult+0x84>
 800bd9e:	4639      	mov	r1, r7
 800bda0:	4622      	mov	r2, r4
 800bda2:	4630      	mov	r0, r6
 800bda4:	f7ff ff1a 	bl	800bbdc <__multiply>
 800bda8:	4639      	mov	r1, r7
 800bdaa:	4680      	mov	r8, r0
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff fe49 	bl	800ba44 <_Bfree>
 800bdb2:	4647      	mov	r7, r8
 800bdb4:	106d      	asrs	r5, r5, #1
 800bdb6:	d00b      	beq.n	800bdd0 <__pow5mult+0xa0>
 800bdb8:	6820      	ldr	r0, [r4, #0]
 800bdba:	b938      	cbnz	r0, 800bdcc <__pow5mult+0x9c>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7ff ff0b 	bl	800bbdc <__multiply>
 800bdc6:	6020      	str	r0, [r4, #0]
 800bdc8:	f8c0 9000 	str.w	r9, [r0]
 800bdcc:	4604      	mov	r4, r0
 800bdce:	e7e4      	b.n	800bd9a <__pow5mult+0x6a>
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd6:	bf00      	nop
 800bdd8:	0800ce80 	.word	0x0800ce80
 800bddc:	0800ccb5 	.word	0x0800ccb5
 800bde0:	0800cd35 	.word	0x0800cd35

0800bde4 <__lshift>:
 800bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	460c      	mov	r4, r1
 800bdea:	6849      	ldr	r1, [r1, #4]
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdf2:	68a3      	ldr	r3, [r4, #8]
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	4691      	mov	r9, r2
 800bdf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdfc:	f108 0601 	add.w	r6, r8, #1
 800be00:	42b3      	cmp	r3, r6
 800be02:	db0b      	blt.n	800be1c <__lshift+0x38>
 800be04:	4638      	mov	r0, r7
 800be06:	f7ff fddd 	bl	800b9c4 <_Balloc>
 800be0a:	4605      	mov	r5, r0
 800be0c:	b948      	cbnz	r0, 800be22 <__lshift+0x3e>
 800be0e:	4602      	mov	r2, r0
 800be10:	4b28      	ldr	r3, [pc, #160]	; (800beb4 <__lshift+0xd0>)
 800be12:	4829      	ldr	r0, [pc, #164]	; (800beb8 <__lshift+0xd4>)
 800be14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800be18:	f000 fb8e 	bl	800c538 <__assert_func>
 800be1c:	3101      	adds	r1, #1
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	e7ee      	b.n	800be00 <__lshift+0x1c>
 800be22:	2300      	movs	r3, #0
 800be24:	f100 0114 	add.w	r1, r0, #20
 800be28:	f100 0210 	add.w	r2, r0, #16
 800be2c:	4618      	mov	r0, r3
 800be2e:	4553      	cmp	r3, sl
 800be30:	db33      	blt.n	800be9a <__lshift+0xb6>
 800be32:	6920      	ldr	r0, [r4, #16]
 800be34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be38:	f104 0314 	add.w	r3, r4, #20
 800be3c:	f019 091f 	ands.w	r9, r9, #31
 800be40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be48:	d02b      	beq.n	800bea2 <__lshift+0xbe>
 800be4a:	f1c9 0e20 	rsb	lr, r9, #32
 800be4e:	468a      	mov	sl, r1
 800be50:	2200      	movs	r2, #0
 800be52:	6818      	ldr	r0, [r3, #0]
 800be54:	fa00 f009 	lsl.w	r0, r0, r9
 800be58:	4310      	orrs	r0, r2
 800be5a:	f84a 0b04 	str.w	r0, [sl], #4
 800be5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be62:	459c      	cmp	ip, r3
 800be64:	fa22 f20e 	lsr.w	r2, r2, lr
 800be68:	d8f3      	bhi.n	800be52 <__lshift+0x6e>
 800be6a:	ebac 0304 	sub.w	r3, ip, r4
 800be6e:	3b15      	subs	r3, #21
 800be70:	f023 0303 	bic.w	r3, r3, #3
 800be74:	3304      	adds	r3, #4
 800be76:	f104 0015 	add.w	r0, r4, #21
 800be7a:	4584      	cmp	ip, r0
 800be7c:	bf38      	it	cc
 800be7e:	2304      	movcc	r3, #4
 800be80:	50ca      	str	r2, [r1, r3]
 800be82:	b10a      	cbz	r2, 800be88 <__lshift+0xa4>
 800be84:	f108 0602 	add.w	r6, r8, #2
 800be88:	3e01      	subs	r6, #1
 800be8a:	4638      	mov	r0, r7
 800be8c:	612e      	str	r6, [r5, #16]
 800be8e:	4621      	mov	r1, r4
 800be90:	f7ff fdd8 	bl	800ba44 <_Bfree>
 800be94:	4628      	mov	r0, r5
 800be96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be9e:	3301      	adds	r3, #1
 800bea0:	e7c5      	b.n	800be2e <__lshift+0x4a>
 800bea2:	3904      	subs	r1, #4
 800bea4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea8:	f841 2f04 	str.w	r2, [r1, #4]!
 800beac:	459c      	cmp	ip, r3
 800beae:	d8f9      	bhi.n	800bea4 <__lshift+0xc0>
 800beb0:	e7ea      	b.n	800be88 <__lshift+0xa4>
 800beb2:	bf00      	nop
 800beb4:	0800cd24 	.word	0x0800cd24
 800beb8:	0800cd35 	.word	0x0800cd35

0800bebc <__mcmp>:
 800bebc:	b530      	push	{r4, r5, lr}
 800bebe:	6902      	ldr	r2, [r0, #16]
 800bec0:	690c      	ldr	r4, [r1, #16]
 800bec2:	1b12      	subs	r2, r2, r4
 800bec4:	d10e      	bne.n	800bee4 <__mcmp+0x28>
 800bec6:	f100 0314 	add.w	r3, r0, #20
 800beca:	3114      	adds	r1, #20
 800becc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bed0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bed4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bed8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bedc:	42a5      	cmp	r5, r4
 800bede:	d003      	beq.n	800bee8 <__mcmp+0x2c>
 800bee0:	d305      	bcc.n	800beee <__mcmp+0x32>
 800bee2:	2201      	movs	r2, #1
 800bee4:	4610      	mov	r0, r2
 800bee6:	bd30      	pop	{r4, r5, pc}
 800bee8:	4283      	cmp	r3, r0
 800beea:	d3f3      	bcc.n	800bed4 <__mcmp+0x18>
 800beec:	e7fa      	b.n	800bee4 <__mcmp+0x28>
 800beee:	f04f 32ff 	mov.w	r2, #4294967295
 800bef2:	e7f7      	b.n	800bee4 <__mcmp+0x28>

0800bef4 <__mdiff>:
 800bef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef8:	460c      	mov	r4, r1
 800befa:	4606      	mov	r6, r0
 800befc:	4611      	mov	r1, r2
 800befe:	4620      	mov	r0, r4
 800bf00:	4690      	mov	r8, r2
 800bf02:	f7ff ffdb 	bl	800bebc <__mcmp>
 800bf06:	1e05      	subs	r5, r0, #0
 800bf08:	d110      	bne.n	800bf2c <__mdiff+0x38>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	f7ff fd59 	bl	800b9c4 <_Balloc>
 800bf12:	b930      	cbnz	r0, 800bf22 <__mdiff+0x2e>
 800bf14:	4b3a      	ldr	r3, [pc, #232]	; (800c000 <__mdiff+0x10c>)
 800bf16:	4602      	mov	r2, r0
 800bf18:	f240 2137 	movw	r1, #567	; 0x237
 800bf1c:	4839      	ldr	r0, [pc, #228]	; (800c004 <__mdiff+0x110>)
 800bf1e:	f000 fb0b 	bl	800c538 <__assert_func>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2c:	bfa4      	itt	ge
 800bf2e:	4643      	movge	r3, r8
 800bf30:	46a0      	movge	r8, r4
 800bf32:	4630      	mov	r0, r6
 800bf34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf38:	bfa6      	itte	ge
 800bf3a:	461c      	movge	r4, r3
 800bf3c:	2500      	movge	r5, #0
 800bf3e:	2501      	movlt	r5, #1
 800bf40:	f7ff fd40 	bl	800b9c4 <_Balloc>
 800bf44:	b920      	cbnz	r0, 800bf50 <__mdiff+0x5c>
 800bf46:	4b2e      	ldr	r3, [pc, #184]	; (800c000 <__mdiff+0x10c>)
 800bf48:	4602      	mov	r2, r0
 800bf4a:	f240 2145 	movw	r1, #581	; 0x245
 800bf4e:	e7e5      	b.n	800bf1c <__mdiff+0x28>
 800bf50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf54:	6926      	ldr	r6, [r4, #16]
 800bf56:	60c5      	str	r5, [r0, #12]
 800bf58:	f104 0914 	add.w	r9, r4, #20
 800bf5c:	f108 0514 	add.w	r5, r8, #20
 800bf60:	f100 0e14 	add.w	lr, r0, #20
 800bf64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf6c:	f108 0210 	add.w	r2, r8, #16
 800bf70:	46f2      	mov	sl, lr
 800bf72:	2100      	movs	r1, #0
 800bf74:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf7c:	fa11 f88b 	uxtah	r8, r1, fp
 800bf80:	b299      	uxth	r1, r3
 800bf82:	0c1b      	lsrs	r3, r3, #16
 800bf84:	eba8 0801 	sub.w	r8, r8, r1
 800bf88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf90:	fa1f f888 	uxth.w	r8, r8
 800bf94:	1419      	asrs	r1, r3, #16
 800bf96:	454e      	cmp	r6, r9
 800bf98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf9c:	f84a 3b04 	str.w	r3, [sl], #4
 800bfa0:	d8e8      	bhi.n	800bf74 <__mdiff+0x80>
 800bfa2:	1b33      	subs	r3, r6, r4
 800bfa4:	3b15      	subs	r3, #21
 800bfa6:	f023 0303 	bic.w	r3, r3, #3
 800bfaa:	3304      	adds	r3, #4
 800bfac:	3415      	adds	r4, #21
 800bfae:	42a6      	cmp	r6, r4
 800bfb0:	bf38      	it	cc
 800bfb2:	2304      	movcc	r3, #4
 800bfb4:	441d      	add	r5, r3
 800bfb6:	4473      	add	r3, lr
 800bfb8:	469e      	mov	lr, r3
 800bfba:	462e      	mov	r6, r5
 800bfbc:	4566      	cmp	r6, ip
 800bfbe:	d30e      	bcc.n	800bfde <__mdiff+0xea>
 800bfc0:	f10c 0203 	add.w	r2, ip, #3
 800bfc4:	1b52      	subs	r2, r2, r5
 800bfc6:	f022 0203 	bic.w	r2, r2, #3
 800bfca:	3d03      	subs	r5, #3
 800bfcc:	45ac      	cmp	ip, r5
 800bfce:	bf38      	it	cc
 800bfd0:	2200      	movcc	r2, #0
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bfd8:	b17a      	cbz	r2, 800bffa <__mdiff+0x106>
 800bfda:	6107      	str	r7, [r0, #16]
 800bfdc:	e7a4      	b.n	800bf28 <__mdiff+0x34>
 800bfde:	f856 8b04 	ldr.w	r8, [r6], #4
 800bfe2:	fa11 f288 	uxtah	r2, r1, r8
 800bfe6:	1414      	asrs	r4, r2, #16
 800bfe8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfec:	b292      	uxth	r2, r2
 800bfee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bff2:	f84e 2b04 	str.w	r2, [lr], #4
 800bff6:	1421      	asrs	r1, r4, #16
 800bff8:	e7e0      	b.n	800bfbc <__mdiff+0xc8>
 800bffa:	3f01      	subs	r7, #1
 800bffc:	e7ea      	b.n	800bfd4 <__mdiff+0xe0>
 800bffe:	bf00      	nop
 800c000:	0800cd24 	.word	0x0800cd24
 800c004:	0800cd35 	.word	0x0800cd35

0800c008 <__d2b>:
 800c008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c00c:	460f      	mov	r7, r1
 800c00e:	2101      	movs	r1, #1
 800c010:	ec59 8b10 	vmov	r8, r9, d0
 800c014:	4616      	mov	r6, r2
 800c016:	f7ff fcd5 	bl	800b9c4 <_Balloc>
 800c01a:	4604      	mov	r4, r0
 800c01c:	b930      	cbnz	r0, 800c02c <__d2b+0x24>
 800c01e:	4602      	mov	r2, r0
 800c020:	4b24      	ldr	r3, [pc, #144]	; (800c0b4 <__d2b+0xac>)
 800c022:	4825      	ldr	r0, [pc, #148]	; (800c0b8 <__d2b+0xb0>)
 800c024:	f240 310f 	movw	r1, #783	; 0x30f
 800c028:	f000 fa86 	bl	800c538 <__assert_func>
 800c02c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c034:	bb2d      	cbnz	r5, 800c082 <__d2b+0x7a>
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	f1b8 0300 	subs.w	r3, r8, #0
 800c03c:	d026      	beq.n	800c08c <__d2b+0x84>
 800c03e:	4668      	mov	r0, sp
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	f7ff fd87 	bl	800bb54 <__lo0bits>
 800c046:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c04a:	b1e8      	cbz	r0, 800c088 <__d2b+0x80>
 800c04c:	f1c0 0320 	rsb	r3, r0, #32
 800c050:	fa02 f303 	lsl.w	r3, r2, r3
 800c054:	430b      	orrs	r3, r1
 800c056:	40c2      	lsrs	r2, r0
 800c058:	6163      	str	r3, [r4, #20]
 800c05a:	9201      	str	r2, [sp, #4]
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	61a3      	str	r3, [r4, #24]
 800c060:	2b00      	cmp	r3, #0
 800c062:	bf14      	ite	ne
 800c064:	2202      	movne	r2, #2
 800c066:	2201      	moveq	r2, #1
 800c068:	6122      	str	r2, [r4, #16]
 800c06a:	b1bd      	cbz	r5, 800c09c <__d2b+0x94>
 800c06c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c070:	4405      	add	r5, r0
 800c072:	603d      	str	r5, [r7, #0]
 800c074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c078:	6030      	str	r0, [r6, #0]
 800c07a:	4620      	mov	r0, r4
 800c07c:	b003      	add	sp, #12
 800c07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c086:	e7d6      	b.n	800c036 <__d2b+0x2e>
 800c088:	6161      	str	r1, [r4, #20]
 800c08a:	e7e7      	b.n	800c05c <__d2b+0x54>
 800c08c:	a801      	add	r0, sp, #4
 800c08e:	f7ff fd61 	bl	800bb54 <__lo0bits>
 800c092:	9b01      	ldr	r3, [sp, #4]
 800c094:	6163      	str	r3, [r4, #20]
 800c096:	3020      	adds	r0, #32
 800c098:	2201      	movs	r2, #1
 800c09a:	e7e5      	b.n	800c068 <__d2b+0x60>
 800c09c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0a4:	6038      	str	r0, [r7, #0]
 800c0a6:	6918      	ldr	r0, [r3, #16]
 800c0a8:	f7ff fd34 	bl	800bb14 <__hi0bits>
 800c0ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0b0:	e7e2      	b.n	800c078 <__d2b+0x70>
 800c0b2:	bf00      	nop
 800c0b4:	0800cd24 	.word	0x0800cd24
 800c0b8:	0800cd35 	.word	0x0800cd35

0800c0bc <__ssputs_r>:
 800c0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c0:	688e      	ldr	r6, [r1, #8]
 800c0c2:	461f      	mov	r7, r3
 800c0c4:	42be      	cmp	r6, r7
 800c0c6:	680b      	ldr	r3, [r1, #0]
 800c0c8:	4682      	mov	sl, r0
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	4690      	mov	r8, r2
 800c0ce:	d82c      	bhi.n	800c12a <__ssputs_r+0x6e>
 800c0d0:	898a      	ldrh	r2, [r1, #12]
 800c0d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0d6:	d026      	beq.n	800c126 <__ssputs_r+0x6a>
 800c0d8:	6965      	ldr	r5, [r4, #20]
 800c0da:	6909      	ldr	r1, [r1, #16]
 800c0dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0e0:	eba3 0901 	sub.w	r9, r3, r1
 800c0e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0e8:	1c7b      	adds	r3, r7, #1
 800c0ea:	444b      	add	r3, r9
 800c0ec:	106d      	asrs	r5, r5, #1
 800c0ee:	429d      	cmp	r5, r3
 800c0f0:	bf38      	it	cc
 800c0f2:	461d      	movcc	r5, r3
 800c0f4:	0553      	lsls	r3, r2, #21
 800c0f6:	d527      	bpl.n	800c148 <__ssputs_r+0x8c>
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f7ff fbd7 	bl	800b8ac <_malloc_r>
 800c0fe:	4606      	mov	r6, r0
 800c100:	b360      	cbz	r0, 800c15c <__ssputs_r+0xa0>
 800c102:	6921      	ldr	r1, [r4, #16]
 800c104:	464a      	mov	r2, r9
 800c106:	f000 fa09 	bl	800c51c <memcpy>
 800c10a:	89a3      	ldrh	r3, [r4, #12]
 800c10c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	6126      	str	r6, [r4, #16]
 800c118:	6165      	str	r5, [r4, #20]
 800c11a:	444e      	add	r6, r9
 800c11c:	eba5 0509 	sub.w	r5, r5, r9
 800c120:	6026      	str	r6, [r4, #0]
 800c122:	60a5      	str	r5, [r4, #8]
 800c124:	463e      	mov	r6, r7
 800c126:	42be      	cmp	r6, r7
 800c128:	d900      	bls.n	800c12c <__ssputs_r+0x70>
 800c12a:	463e      	mov	r6, r7
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	4632      	mov	r2, r6
 800c130:	4641      	mov	r1, r8
 800c132:	f000 f9c9 	bl	800c4c8 <memmove>
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	1b9b      	subs	r3, r3, r6
 800c13a:	60a3      	str	r3, [r4, #8]
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	4433      	add	r3, r6
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	2000      	movs	r0, #0
 800c144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c148:	462a      	mov	r2, r5
 800c14a:	f000 fa3b 	bl	800c5c4 <_realloc_r>
 800c14e:	4606      	mov	r6, r0
 800c150:	2800      	cmp	r0, #0
 800c152:	d1e0      	bne.n	800c116 <__ssputs_r+0x5a>
 800c154:	6921      	ldr	r1, [r4, #16]
 800c156:	4650      	mov	r0, sl
 800c158:	f7ff fb34 	bl	800b7c4 <_free_r>
 800c15c:	230c      	movs	r3, #12
 800c15e:	f8ca 3000 	str.w	r3, [sl]
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c168:	81a3      	strh	r3, [r4, #12]
 800c16a:	f04f 30ff 	mov.w	r0, #4294967295
 800c16e:	e7e9      	b.n	800c144 <__ssputs_r+0x88>

0800c170 <_svfiprintf_r>:
 800c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	4698      	mov	r8, r3
 800c176:	898b      	ldrh	r3, [r1, #12]
 800c178:	061b      	lsls	r3, r3, #24
 800c17a:	b09d      	sub	sp, #116	; 0x74
 800c17c:	4607      	mov	r7, r0
 800c17e:	460d      	mov	r5, r1
 800c180:	4614      	mov	r4, r2
 800c182:	d50e      	bpl.n	800c1a2 <_svfiprintf_r+0x32>
 800c184:	690b      	ldr	r3, [r1, #16]
 800c186:	b963      	cbnz	r3, 800c1a2 <_svfiprintf_r+0x32>
 800c188:	2140      	movs	r1, #64	; 0x40
 800c18a:	f7ff fb8f 	bl	800b8ac <_malloc_r>
 800c18e:	6028      	str	r0, [r5, #0]
 800c190:	6128      	str	r0, [r5, #16]
 800c192:	b920      	cbnz	r0, 800c19e <_svfiprintf_r+0x2e>
 800c194:	230c      	movs	r3, #12
 800c196:	603b      	str	r3, [r7, #0]
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	e0d0      	b.n	800c340 <_svfiprintf_r+0x1d0>
 800c19e:	2340      	movs	r3, #64	; 0x40
 800c1a0:	616b      	str	r3, [r5, #20]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a6:	2320      	movs	r3, #32
 800c1a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1b0:	2330      	movs	r3, #48	; 0x30
 800c1b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c358 <_svfiprintf_r+0x1e8>
 800c1b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1ba:	f04f 0901 	mov.w	r9, #1
 800c1be:	4623      	mov	r3, r4
 800c1c0:	469a      	mov	sl, r3
 800c1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1c6:	b10a      	cbz	r2, 800c1cc <_svfiprintf_r+0x5c>
 800c1c8:	2a25      	cmp	r2, #37	; 0x25
 800c1ca:	d1f9      	bne.n	800c1c0 <_svfiprintf_r+0x50>
 800c1cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c1d0:	d00b      	beq.n	800c1ea <_svfiprintf_r+0x7a>
 800c1d2:	465b      	mov	r3, fp
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	4638      	mov	r0, r7
 800c1da:	f7ff ff6f 	bl	800c0bc <__ssputs_r>
 800c1de:	3001      	adds	r0, #1
 800c1e0:	f000 80a9 	beq.w	800c336 <_svfiprintf_r+0x1c6>
 800c1e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1e6:	445a      	add	r2, fp
 800c1e8:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f000 80a1 	beq.w	800c336 <_svfiprintf_r+0x1c6>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1fe:	f10a 0a01 	add.w	sl, sl, #1
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	9307      	str	r3, [sp, #28]
 800c206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c20a:	931a      	str	r3, [sp, #104]	; 0x68
 800c20c:	4654      	mov	r4, sl
 800c20e:	2205      	movs	r2, #5
 800c210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c214:	4850      	ldr	r0, [pc, #320]	; (800c358 <_svfiprintf_r+0x1e8>)
 800c216:	f7f3 ffdb 	bl	80001d0 <memchr>
 800c21a:	9a04      	ldr	r2, [sp, #16]
 800c21c:	b9d8      	cbnz	r0, 800c256 <_svfiprintf_r+0xe6>
 800c21e:	06d0      	lsls	r0, r2, #27
 800c220:	bf44      	itt	mi
 800c222:	2320      	movmi	r3, #32
 800c224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c228:	0711      	lsls	r1, r2, #28
 800c22a:	bf44      	itt	mi
 800c22c:	232b      	movmi	r3, #43	; 0x2b
 800c22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c232:	f89a 3000 	ldrb.w	r3, [sl]
 800c236:	2b2a      	cmp	r3, #42	; 0x2a
 800c238:	d015      	beq.n	800c266 <_svfiprintf_r+0xf6>
 800c23a:	9a07      	ldr	r2, [sp, #28]
 800c23c:	4654      	mov	r4, sl
 800c23e:	2000      	movs	r0, #0
 800c240:	f04f 0c0a 	mov.w	ip, #10
 800c244:	4621      	mov	r1, r4
 800c246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c24a:	3b30      	subs	r3, #48	; 0x30
 800c24c:	2b09      	cmp	r3, #9
 800c24e:	d94d      	bls.n	800c2ec <_svfiprintf_r+0x17c>
 800c250:	b1b0      	cbz	r0, 800c280 <_svfiprintf_r+0x110>
 800c252:	9207      	str	r2, [sp, #28]
 800c254:	e014      	b.n	800c280 <_svfiprintf_r+0x110>
 800c256:	eba0 0308 	sub.w	r3, r0, r8
 800c25a:	fa09 f303 	lsl.w	r3, r9, r3
 800c25e:	4313      	orrs	r3, r2
 800c260:	9304      	str	r3, [sp, #16]
 800c262:	46a2      	mov	sl, r4
 800c264:	e7d2      	b.n	800c20c <_svfiprintf_r+0x9c>
 800c266:	9b03      	ldr	r3, [sp, #12]
 800c268:	1d19      	adds	r1, r3, #4
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	9103      	str	r1, [sp, #12]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	bfbb      	ittet	lt
 800c272:	425b      	neglt	r3, r3
 800c274:	f042 0202 	orrlt.w	r2, r2, #2
 800c278:	9307      	strge	r3, [sp, #28]
 800c27a:	9307      	strlt	r3, [sp, #28]
 800c27c:	bfb8      	it	lt
 800c27e:	9204      	strlt	r2, [sp, #16]
 800c280:	7823      	ldrb	r3, [r4, #0]
 800c282:	2b2e      	cmp	r3, #46	; 0x2e
 800c284:	d10c      	bne.n	800c2a0 <_svfiprintf_r+0x130>
 800c286:	7863      	ldrb	r3, [r4, #1]
 800c288:	2b2a      	cmp	r3, #42	; 0x2a
 800c28a:	d134      	bne.n	800c2f6 <_svfiprintf_r+0x186>
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	1d1a      	adds	r2, r3, #4
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	9203      	str	r2, [sp, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	bfb8      	it	lt
 800c298:	f04f 33ff 	movlt.w	r3, #4294967295
 800c29c:	3402      	adds	r4, #2
 800c29e:	9305      	str	r3, [sp, #20]
 800c2a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c368 <_svfiprintf_r+0x1f8>
 800c2a4:	7821      	ldrb	r1, [r4, #0]
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	4650      	mov	r0, sl
 800c2aa:	f7f3 ff91 	bl	80001d0 <memchr>
 800c2ae:	b138      	cbz	r0, 800c2c0 <_svfiprintf_r+0x150>
 800c2b0:	9b04      	ldr	r3, [sp, #16]
 800c2b2:	eba0 000a 	sub.w	r0, r0, sl
 800c2b6:	2240      	movs	r2, #64	; 0x40
 800c2b8:	4082      	lsls	r2, r0
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	3401      	adds	r4, #1
 800c2be:	9304      	str	r3, [sp, #16]
 800c2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2c4:	4825      	ldr	r0, [pc, #148]	; (800c35c <_svfiprintf_r+0x1ec>)
 800c2c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2ca:	2206      	movs	r2, #6
 800c2cc:	f7f3 ff80 	bl	80001d0 <memchr>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d038      	beq.n	800c346 <_svfiprintf_r+0x1d6>
 800c2d4:	4b22      	ldr	r3, [pc, #136]	; (800c360 <_svfiprintf_r+0x1f0>)
 800c2d6:	bb1b      	cbnz	r3, 800c320 <_svfiprintf_r+0x1b0>
 800c2d8:	9b03      	ldr	r3, [sp, #12]
 800c2da:	3307      	adds	r3, #7
 800c2dc:	f023 0307 	bic.w	r3, r3, #7
 800c2e0:	3308      	adds	r3, #8
 800c2e2:	9303      	str	r3, [sp, #12]
 800c2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e6:	4433      	add	r3, r6
 800c2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ea:	e768      	b.n	800c1be <_svfiprintf_r+0x4e>
 800c2ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2f0:	460c      	mov	r4, r1
 800c2f2:	2001      	movs	r0, #1
 800c2f4:	e7a6      	b.n	800c244 <_svfiprintf_r+0xd4>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	3401      	adds	r4, #1
 800c2fa:	9305      	str	r3, [sp, #20]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	f04f 0c0a 	mov.w	ip, #10
 800c302:	4620      	mov	r0, r4
 800c304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c308:	3a30      	subs	r2, #48	; 0x30
 800c30a:	2a09      	cmp	r2, #9
 800c30c:	d903      	bls.n	800c316 <_svfiprintf_r+0x1a6>
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d0c6      	beq.n	800c2a0 <_svfiprintf_r+0x130>
 800c312:	9105      	str	r1, [sp, #20]
 800c314:	e7c4      	b.n	800c2a0 <_svfiprintf_r+0x130>
 800c316:	fb0c 2101 	mla	r1, ip, r1, r2
 800c31a:	4604      	mov	r4, r0
 800c31c:	2301      	movs	r3, #1
 800c31e:	e7f0      	b.n	800c302 <_svfiprintf_r+0x192>
 800c320:	ab03      	add	r3, sp, #12
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	462a      	mov	r2, r5
 800c326:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <_svfiprintf_r+0x1f4>)
 800c328:	a904      	add	r1, sp, #16
 800c32a:	4638      	mov	r0, r7
 800c32c:	f7fd fe62 	bl	8009ff4 <_printf_float>
 800c330:	1c42      	adds	r2, r0, #1
 800c332:	4606      	mov	r6, r0
 800c334:	d1d6      	bne.n	800c2e4 <_svfiprintf_r+0x174>
 800c336:	89ab      	ldrh	r3, [r5, #12]
 800c338:	065b      	lsls	r3, r3, #25
 800c33a:	f53f af2d 	bmi.w	800c198 <_svfiprintf_r+0x28>
 800c33e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c340:	b01d      	add	sp, #116	; 0x74
 800c342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c346:	ab03      	add	r3, sp, #12
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	462a      	mov	r2, r5
 800c34c:	4b05      	ldr	r3, [pc, #20]	; (800c364 <_svfiprintf_r+0x1f4>)
 800c34e:	a904      	add	r1, sp, #16
 800c350:	4638      	mov	r0, r7
 800c352:	f7fe f8f3 	bl	800a53c <_printf_i>
 800c356:	e7eb      	b.n	800c330 <_svfiprintf_r+0x1c0>
 800c358:	0800ce8c 	.word	0x0800ce8c
 800c35c:	0800ce96 	.word	0x0800ce96
 800c360:	08009ff5 	.word	0x08009ff5
 800c364:	0800c0bd 	.word	0x0800c0bd
 800c368:	0800ce92 	.word	0x0800ce92

0800c36c <__sflush_r>:
 800c36c:	898a      	ldrh	r2, [r1, #12]
 800c36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c372:	4605      	mov	r5, r0
 800c374:	0710      	lsls	r0, r2, #28
 800c376:	460c      	mov	r4, r1
 800c378:	d458      	bmi.n	800c42c <__sflush_r+0xc0>
 800c37a:	684b      	ldr	r3, [r1, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dc05      	bgt.n	800c38c <__sflush_r+0x20>
 800c380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	dc02      	bgt.n	800c38c <__sflush_r+0x20>
 800c386:	2000      	movs	r0, #0
 800c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c38c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c38e:	2e00      	cmp	r6, #0
 800c390:	d0f9      	beq.n	800c386 <__sflush_r+0x1a>
 800c392:	2300      	movs	r3, #0
 800c394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c398:	682f      	ldr	r7, [r5, #0]
 800c39a:	6a21      	ldr	r1, [r4, #32]
 800c39c:	602b      	str	r3, [r5, #0]
 800c39e:	d032      	beq.n	800c406 <__sflush_r+0x9a>
 800c3a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	075a      	lsls	r2, r3, #29
 800c3a6:	d505      	bpl.n	800c3b4 <__sflush_r+0x48>
 800c3a8:	6863      	ldr	r3, [r4, #4]
 800c3aa:	1ac0      	subs	r0, r0, r3
 800c3ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3ae:	b10b      	cbz	r3, 800c3b4 <__sflush_r+0x48>
 800c3b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3b2:	1ac0      	subs	r0, r0, r3
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3ba:	6a21      	ldr	r1, [r4, #32]
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b0      	blx	r6
 800c3c0:	1c43      	adds	r3, r0, #1
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	d106      	bne.n	800c3d4 <__sflush_r+0x68>
 800c3c6:	6829      	ldr	r1, [r5, #0]
 800c3c8:	291d      	cmp	r1, #29
 800c3ca:	d82b      	bhi.n	800c424 <__sflush_r+0xb8>
 800c3cc:	4a29      	ldr	r2, [pc, #164]	; (800c474 <__sflush_r+0x108>)
 800c3ce:	410a      	asrs	r2, r1
 800c3d0:	07d6      	lsls	r6, r2, #31
 800c3d2:	d427      	bmi.n	800c424 <__sflush_r+0xb8>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	6062      	str	r2, [r4, #4]
 800c3d8:	04d9      	lsls	r1, r3, #19
 800c3da:	6922      	ldr	r2, [r4, #16]
 800c3dc:	6022      	str	r2, [r4, #0]
 800c3de:	d504      	bpl.n	800c3ea <__sflush_r+0x7e>
 800c3e0:	1c42      	adds	r2, r0, #1
 800c3e2:	d101      	bne.n	800c3e8 <__sflush_r+0x7c>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b903      	cbnz	r3, 800c3ea <__sflush_r+0x7e>
 800c3e8:	6560      	str	r0, [r4, #84]	; 0x54
 800c3ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3ec:	602f      	str	r7, [r5, #0]
 800c3ee:	2900      	cmp	r1, #0
 800c3f0:	d0c9      	beq.n	800c386 <__sflush_r+0x1a>
 800c3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3f6:	4299      	cmp	r1, r3
 800c3f8:	d002      	beq.n	800c400 <__sflush_r+0x94>
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f7ff f9e2 	bl	800b7c4 <_free_r>
 800c400:	2000      	movs	r0, #0
 800c402:	6360      	str	r0, [r4, #52]	; 0x34
 800c404:	e7c0      	b.n	800c388 <__sflush_r+0x1c>
 800c406:	2301      	movs	r3, #1
 800c408:	4628      	mov	r0, r5
 800c40a:	47b0      	blx	r6
 800c40c:	1c41      	adds	r1, r0, #1
 800c40e:	d1c8      	bne.n	800c3a2 <__sflush_r+0x36>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0c5      	beq.n	800c3a2 <__sflush_r+0x36>
 800c416:	2b1d      	cmp	r3, #29
 800c418:	d001      	beq.n	800c41e <__sflush_r+0xb2>
 800c41a:	2b16      	cmp	r3, #22
 800c41c:	d101      	bne.n	800c422 <__sflush_r+0xb6>
 800c41e:	602f      	str	r7, [r5, #0]
 800c420:	e7b1      	b.n	800c386 <__sflush_r+0x1a>
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c428:	81a3      	strh	r3, [r4, #12]
 800c42a:	e7ad      	b.n	800c388 <__sflush_r+0x1c>
 800c42c:	690f      	ldr	r7, [r1, #16]
 800c42e:	2f00      	cmp	r7, #0
 800c430:	d0a9      	beq.n	800c386 <__sflush_r+0x1a>
 800c432:	0793      	lsls	r3, r2, #30
 800c434:	680e      	ldr	r6, [r1, #0]
 800c436:	bf08      	it	eq
 800c438:	694b      	ldreq	r3, [r1, #20]
 800c43a:	600f      	str	r7, [r1, #0]
 800c43c:	bf18      	it	ne
 800c43e:	2300      	movne	r3, #0
 800c440:	eba6 0807 	sub.w	r8, r6, r7
 800c444:	608b      	str	r3, [r1, #8]
 800c446:	f1b8 0f00 	cmp.w	r8, #0
 800c44a:	dd9c      	ble.n	800c386 <__sflush_r+0x1a>
 800c44c:	6a21      	ldr	r1, [r4, #32]
 800c44e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c450:	4643      	mov	r3, r8
 800c452:	463a      	mov	r2, r7
 800c454:	4628      	mov	r0, r5
 800c456:	47b0      	blx	r6
 800c458:	2800      	cmp	r0, #0
 800c45a:	dc06      	bgt.n	800c46a <__sflush_r+0xfe>
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	e78e      	b.n	800c388 <__sflush_r+0x1c>
 800c46a:	4407      	add	r7, r0
 800c46c:	eba8 0800 	sub.w	r8, r8, r0
 800c470:	e7e9      	b.n	800c446 <__sflush_r+0xda>
 800c472:	bf00      	nop
 800c474:	dfbffffe 	.word	0xdfbffffe

0800c478 <_fflush_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	690b      	ldr	r3, [r1, #16]
 800c47c:	4605      	mov	r5, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	b913      	cbnz	r3, 800c488 <_fflush_r+0x10>
 800c482:	2500      	movs	r5, #0
 800c484:	4628      	mov	r0, r5
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	b118      	cbz	r0, 800c492 <_fflush_r+0x1a>
 800c48a:	6a03      	ldr	r3, [r0, #32]
 800c48c:	b90b      	cbnz	r3, 800c492 <_fflush_r+0x1a>
 800c48e:	f7fe fa03 	bl	800a898 <__sinit>
 800c492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d0f3      	beq.n	800c482 <_fflush_r+0xa>
 800c49a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c49c:	07d0      	lsls	r0, r2, #31
 800c49e:	d404      	bmi.n	800c4aa <_fflush_r+0x32>
 800c4a0:	0599      	lsls	r1, r3, #22
 800c4a2:	d402      	bmi.n	800c4aa <_fflush_r+0x32>
 800c4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4a6:	f7fe fb0e 	bl	800aac6 <__retarget_lock_acquire_recursive>
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	f7ff ff5d 	bl	800c36c <__sflush_r>
 800c4b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4b4:	07da      	lsls	r2, r3, #31
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	d4e4      	bmi.n	800c484 <_fflush_r+0xc>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	059b      	lsls	r3, r3, #22
 800c4be:	d4e1      	bmi.n	800c484 <_fflush_r+0xc>
 800c4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4c2:	f7fe fb01 	bl	800aac8 <__retarget_lock_release_recursive>
 800c4c6:	e7dd      	b.n	800c484 <_fflush_r+0xc>

0800c4c8 <memmove>:
 800c4c8:	4288      	cmp	r0, r1
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	eb01 0402 	add.w	r4, r1, r2
 800c4d0:	d902      	bls.n	800c4d8 <memmove+0x10>
 800c4d2:	4284      	cmp	r4, r0
 800c4d4:	4623      	mov	r3, r4
 800c4d6:	d807      	bhi.n	800c4e8 <memmove+0x20>
 800c4d8:	1e43      	subs	r3, r0, #1
 800c4da:	42a1      	cmp	r1, r4
 800c4dc:	d008      	beq.n	800c4f0 <memmove+0x28>
 800c4de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4e6:	e7f8      	b.n	800c4da <memmove+0x12>
 800c4e8:	4402      	add	r2, r0
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	428a      	cmp	r2, r1
 800c4ee:	d100      	bne.n	800c4f2 <memmove+0x2a>
 800c4f0:	bd10      	pop	{r4, pc}
 800c4f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4fa:	e7f7      	b.n	800c4ec <memmove+0x24>

0800c4fc <_sbrk_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d06      	ldr	r5, [pc, #24]	; (800c518 <_sbrk_r+0x1c>)
 800c500:	2300      	movs	r3, #0
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	f7f5 f820 	bl	800154c <_sbrk>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_sbrk_r+0x1a>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_sbrk_r+0x1a>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20001764 	.word	0x20001764

0800c51c <memcpy>:
 800c51c:	440a      	add	r2, r1
 800c51e:	4291      	cmp	r1, r2
 800c520:	f100 33ff 	add.w	r3, r0, #4294967295
 800c524:	d100      	bne.n	800c528 <memcpy+0xc>
 800c526:	4770      	bx	lr
 800c528:	b510      	push	{r4, lr}
 800c52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c532:	4291      	cmp	r1, r2
 800c534:	d1f9      	bne.n	800c52a <memcpy+0xe>
 800c536:	bd10      	pop	{r4, pc}

0800c538 <__assert_func>:
 800c538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c53a:	4614      	mov	r4, r2
 800c53c:	461a      	mov	r2, r3
 800c53e:	4b09      	ldr	r3, [pc, #36]	; (800c564 <__assert_func+0x2c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4605      	mov	r5, r0
 800c544:	68d8      	ldr	r0, [r3, #12]
 800c546:	b14c      	cbz	r4, 800c55c <__assert_func+0x24>
 800c548:	4b07      	ldr	r3, [pc, #28]	; (800c568 <__assert_func+0x30>)
 800c54a:	9100      	str	r1, [sp, #0]
 800c54c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c550:	4906      	ldr	r1, [pc, #24]	; (800c56c <__assert_func+0x34>)
 800c552:	462b      	mov	r3, r5
 800c554:	f000 f872 	bl	800c63c <fiprintf>
 800c558:	f000 f882 	bl	800c660 <abort>
 800c55c:	4b04      	ldr	r3, [pc, #16]	; (800c570 <__assert_func+0x38>)
 800c55e:	461c      	mov	r4, r3
 800c560:	e7f3      	b.n	800c54a <__assert_func+0x12>
 800c562:	bf00      	nop
 800c564:	200001d4 	.word	0x200001d4
 800c568:	0800cea7 	.word	0x0800cea7
 800c56c:	0800ceb4 	.word	0x0800ceb4
 800c570:	0800cee2 	.word	0x0800cee2

0800c574 <_calloc_r>:
 800c574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c576:	fba1 2402 	umull	r2, r4, r1, r2
 800c57a:	b94c      	cbnz	r4, 800c590 <_calloc_r+0x1c>
 800c57c:	4611      	mov	r1, r2
 800c57e:	9201      	str	r2, [sp, #4]
 800c580:	f7ff f994 	bl	800b8ac <_malloc_r>
 800c584:	9a01      	ldr	r2, [sp, #4]
 800c586:	4605      	mov	r5, r0
 800c588:	b930      	cbnz	r0, 800c598 <_calloc_r+0x24>
 800c58a:	4628      	mov	r0, r5
 800c58c:	b003      	add	sp, #12
 800c58e:	bd30      	pop	{r4, r5, pc}
 800c590:	220c      	movs	r2, #12
 800c592:	6002      	str	r2, [r0, #0]
 800c594:	2500      	movs	r5, #0
 800c596:	e7f8      	b.n	800c58a <_calloc_r+0x16>
 800c598:	4621      	mov	r1, r4
 800c59a:	f7fe fa16 	bl	800a9ca <memset>
 800c59e:	e7f4      	b.n	800c58a <_calloc_r+0x16>

0800c5a0 <__ascii_mbtowc>:
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	b901      	cbnz	r1, 800c5a6 <__ascii_mbtowc+0x6>
 800c5a4:	a901      	add	r1, sp, #4
 800c5a6:	b142      	cbz	r2, 800c5ba <__ascii_mbtowc+0x1a>
 800c5a8:	b14b      	cbz	r3, 800c5be <__ascii_mbtowc+0x1e>
 800c5aa:	7813      	ldrb	r3, [r2, #0]
 800c5ac:	600b      	str	r3, [r1, #0]
 800c5ae:	7812      	ldrb	r2, [r2, #0]
 800c5b0:	1e10      	subs	r0, r2, #0
 800c5b2:	bf18      	it	ne
 800c5b4:	2001      	movne	r0, #1
 800c5b6:	b002      	add	sp, #8
 800c5b8:	4770      	bx	lr
 800c5ba:	4610      	mov	r0, r2
 800c5bc:	e7fb      	b.n	800c5b6 <__ascii_mbtowc+0x16>
 800c5be:	f06f 0001 	mvn.w	r0, #1
 800c5c2:	e7f8      	b.n	800c5b6 <__ascii_mbtowc+0x16>

0800c5c4 <_realloc_r>:
 800c5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	4614      	mov	r4, r2
 800c5cc:	460e      	mov	r6, r1
 800c5ce:	b921      	cbnz	r1, 800c5da <_realloc_r+0x16>
 800c5d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	f7ff b969 	b.w	800b8ac <_malloc_r>
 800c5da:	b92a      	cbnz	r2, 800c5e8 <_realloc_r+0x24>
 800c5dc:	f7ff f8f2 	bl	800b7c4 <_free_r>
 800c5e0:	4625      	mov	r5, r4
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e8:	f000 f841 	bl	800c66e <_malloc_usable_size_r>
 800c5ec:	4284      	cmp	r4, r0
 800c5ee:	4607      	mov	r7, r0
 800c5f0:	d802      	bhi.n	800c5f8 <_realloc_r+0x34>
 800c5f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5f6:	d812      	bhi.n	800c61e <_realloc_r+0x5a>
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	4640      	mov	r0, r8
 800c5fc:	f7ff f956 	bl	800b8ac <_malloc_r>
 800c600:	4605      	mov	r5, r0
 800c602:	2800      	cmp	r0, #0
 800c604:	d0ed      	beq.n	800c5e2 <_realloc_r+0x1e>
 800c606:	42bc      	cmp	r4, r7
 800c608:	4622      	mov	r2, r4
 800c60a:	4631      	mov	r1, r6
 800c60c:	bf28      	it	cs
 800c60e:	463a      	movcs	r2, r7
 800c610:	f7ff ff84 	bl	800c51c <memcpy>
 800c614:	4631      	mov	r1, r6
 800c616:	4640      	mov	r0, r8
 800c618:	f7ff f8d4 	bl	800b7c4 <_free_r>
 800c61c:	e7e1      	b.n	800c5e2 <_realloc_r+0x1e>
 800c61e:	4635      	mov	r5, r6
 800c620:	e7df      	b.n	800c5e2 <_realloc_r+0x1e>

0800c622 <__ascii_wctomb>:
 800c622:	b149      	cbz	r1, 800c638 <__ascii_wctomb+0x16>
 800c624:	2aff      	cmp	r2, #255	; 0xff
 800c626:	bf85      	ittet	hi
 800c628:	238a      	movhi	r3, #138	; 0x8a
 800c62a:	6003      	strhi	r3, [r0, #0]
 800c62c:	700a      	strbls	r2, [r1, #0]
 800c62e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c632:	bf98      	it	ls
 800c634:	2001      	movls	r0, #1
 800c636:	4770      	bx	lr
 800c638:	4608      	mov	r0, r1
 800c63a:	4770      	bx	lr

0800c63c <fiprintf>:
 800c63c:	b40e      	push	{r1, r2, r3}
 800c63e:	b503      	push	{r0, r1, lr}
 800c640:	4601      	mov	r1, r0
 800c642:	ab03      	add	r3, sp, #12
 800c644:	4805      	ldr	r0, [pc, #20]	; (800c65c <fiprintf+0x20>)
 800c646:	f853 2b04 	ldr.w	r2, [r3], #4
 800c64a:	6800      	ldr	r0, [r0, #0]
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	f000 f83f 	bl	800c6d0 <_vfiprintf_r>
 800c652:	b002      	add	sp, #8
 800c654:	f85d eb04 	ldr.w	lr, [sp], #4
 800c658:	b003      	add	sp, #12
 800c65a:	4770      	bx	lr
 800c65c:	200001d4 	.word	0x200001d4

0800c660 <abort>:
 800c660:	b508      	push	{r3, lr}
 800c662:	2006      	movs	r0, #6
 800c664:	f000 fa0c 	bl	800ca80 <raise>
 800c668:	2001      	movs	r0, #1
 800c66a:	f7f4 fef7 	bl	800145c <_exit>

0800c66e <_malloc_usable_size_r>:
 800c66e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c672:	1f18      	subs	r0, r3, #4
 800c674:	2b00      	cmp	r3, #0
 800c676:	bfbc      	itt	lt
 800c678:	580b      	ldrlt	r3, [r1, r0]
 800c67a:	18c0      	addlt	r0, r0, r3
 800c67c:	4770      	bx	lr

0800c67e <__sfputc_r>:
 800c67e:	6893      	ldr	r3, [r2, #8]
 800c680:	3b01      	subs	r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	b410      	push	{r4}
 800c686:	6093      	str	r3, [r2, #8]
 800c688:	da08      	bge.n	800c69c <__sfputc_r+0x1e>
 800c68a:	6994      	ldr	r4, [r2, #24]
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	db01      	blt.n	800c694 <__sfputc_r+0x16>
 800c690:	290a      	cmp	r1, #10
 800c692:	d103      	bne.n	800c69c <__sfputc_r+0x1e>
 800c694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c698:	f000 b934 	b.w	800c904 <__swbuf_r>
 800c69c:	6813      	ldr	r3, [r2, #0]
 800c69e:	1c58      	adds	r0, r3, #1
 800c6a0:	6010      	str	r0, [r2, #0]
 800c6a2:	7019      	strb	r1, [r3, #0]
 800c6a4:	4608      	mov	r0, r1
 800c6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <__sfputs_r>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	460f      	mov	r7, r1
 800c6b2:	4614      	mov	r4, r2
 800c6b4:	18d5      	adds	r5, r2, r3
 800c6b6:	42ac      	cmp	r4, r5
 800c6b8:	d101      	bne.n	800c6be <__sfputs_r+0x12>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e007      	b.n	800c6ce <__sfputs_r+0x22>
 800c6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c2:	463a      	mov	r2, r7
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f7ff ffda 	bl	800c67e <__sfputc_r>
 800c6ca:	1c43      	adds	r3, r0, #1
 800c6cc:	d1f3      	bne.n	800c6b6 <__sfputs_r+0xa>
 800c6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6d0 <_vfiprintf_r>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	b09d      	sub	sp, #116	; 0x74
 800c6d8:	4614      	mov	r4, r2
 800c6da:	4698      	mov	r8, r3
 800c6dc:	4606      	mov	r6, r0
 800c6de:	b118      	cbz	r0, 800c6e8 <_vfiprintf_r+0x18>
 800c6e0:	6a03      	ldr	r3, [r0, #32]
 800c6e2:	b90b      	cbnz	r3, 800c6e8 <_vfiprintf_r+0x18>
 800c6e4:	f7fe f8d8 	bl	800a898 <__sinit>
 800c6e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ea:	07d9      	lsls	r1, r3, #31
 800c6ec:	d405      	bmi.n	800c6fa <_vfiprintf_r+0x2a>
 800c6ee:	89ab      	ldrh	r3, [r5, #12]
 800c6f0:	059a      	lsls	r2, r3, #22
 800c6f2:	d402      	bmi.n	800c6fa <_vfiprintf_r+0x2a>
 800c6f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6f6:	f7fe f9e6 	bl	800aac6 <__retarget_lock_acquire_recursive>
 800c6fa:	89ab      	ldrh	r3, [r5, #12]
 800c6fc:	071b      	lsls	r3, r3, #28
 800c6fe:	d501      	bpl.n	800c704 <_vfiprintf_r+0x34>
 800c700:	692b      	ldr	r3, [r5, #16]
 800c702:	b99b      	cbnz	r3, 800c72c <_vfiprintf_r+0x5c>
 800c704:	4629      	mov	r1, r5
 800c706:	4630      	mov	r0, r6
 800c708:	f000 f93a 	bl	800c980 <__swsetup_r>
 800c70c:	b170      	cbz	r0, 800c72c <_vfiprintf_r+0x5c>
 800c70e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c710:	07dc      	lsls	r4, r3, #31
 800c712:	d504      	bpl.n	800c71e <_vfiprintf_r+0x4e>
 800c714:	f04f 30ff 	mov.w	r0, #4294967295
 800c718:	b01d      	add	sp, #116	; 0x74
 800c71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	0598      	lsls	r0, r3, #22
 800c722:	d4f7      	bmi.n	800c714 <_vfiprintf_r+0x44>
 800c724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c726:	f7fe f9cf 	bl	800aac8 <__retarget_lock_release_recursive>
 800c72a:	e7f3      	b.n	800c714 <_vfiprintf_r+0x44>
 800c72c:	2300      	movs	r3, #0
 800c72e:	9309      	str	r3, [sp, #36]	; 0x24
 800c730:	2320      	movs	r3, #32
 800c732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c736:	f8cd 800c 	str.w	r8, [sp, #12]
 800c73a:	2330      	movs	r3, #48	; 0x30
 800c73c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c8f0 <_vfiprintf_r+0x220>
 800c740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c744:	f04f 0901 	mov.w	r9, #1
 800c748:	4623      	mov	r3, r4
 800c74a:	469a      	mov	sl, r3
 800c74c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c750:	b10a      	cbz	r2, 800c756 <_vfiprintf_r+0x86>
 800c752:	2a25      	cmp	r2, #37	; 0x25
 800c754:	d1f9      	bne.n	800c74a <_vfiprintf_r+0x7a>
 800c756:	ebba 0b04 	subs.w	fp, sl, r4
 800c75a:	d00b      	beq.n	800c774 <_vfiprintf_r+0xa4>
 800c75c:	465b      	mov	r3, fp
 800c75e:	4622      	mov	r2, r4
 800c760:	4629      	mov	r1, r5
 800c762:	4630      	mov	r0, r6
 800c764:	f7ff ffa2 	bl	800c6ac <__sfputs_r>
 800c768:	3001      	adds	r0, #1
 800c76a:	f000 80a9 	beq.w	800c8c0 <_vfiprintf_r+0x1f0>
 800c76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c770:	445a      	add	r2, fp
 800c772:	9209      	str	r2, [sp, #36]	; 0x24
 800c774:	f89a 3000 	ldrb.w	r3, [sl]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 80a1 	beq.w	800c8c0 <_vfiprintf_r+0x1f0>
 800c77e:	2300      	movs	r3, #0
 800c780:	f04f 32ff 	mov.w	r2, #4294967295
 800c784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c788:	f10a 0a01 	add.w	sl, sl, #1
 800c78c:	9304      	str	r3, [sp, #16]
 800c78e:	9307      	str	r3, [sp, #28]
 800c790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c794:	931a      	str	r3, [sp, #104]	; 0x68
 800c796:	4654      	mov	r4, sl
 800c798:	2205      	movs	r2, #5
 800c79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c79e:	4854      	ldr	r0, [pc, #336]	; (800c8f0 <_vfiprintf_r+0x220>)
 800c7a0:	f7f3 fd16 	bl	80001d0 <memchr>
 800c7a4:	9a04      	ldr	r2, [sp, #16]
 800c7a6:	b9d8      	cbnz	r0, 800c7e0 <_vfiprintf_r+0x110>
 800c7a8:	06d1      	lsls	r1, r2, #27
 800c7aa:	bf44      	itt	mi
 800c7ac:	2320      	movmi	r3, #32
 800c7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7b2:	0713      	lsls	r3, r2, #28
 800c7b4:	bf44      	itt	mi
 800c7b6:	232b      	movmi	r3, #43	; 0x2b
 800c7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7c2:	d015      	beq.n	800c7f0 <_vfiprintf_r+0x120>
 800c7c4:	9a07      	ldr	r2, [sp, #28]
 800c7c6:	4654      	mov	r4, sl
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	f04f 0c0a 	mov.w	ip, #10
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7d4:	3b30      	subs	r3, #48	; 0x30
 800c7d6:	2b09      	cmp	r3, #9
 800c7d8:	d94d      	bls.n	800c876 <_vfiprintf_r+0x1a6>
 800c7da:	b1b0      	cbz	r0, 800c80a <_vfiprintf_r+0x13a>
 800c7dc:	9207      	str	r2, [sp, #28]
 800c7de:	e014      	b.n	800c80a <_vfiprintf_r+0x13a>
 800c7e0:	eba0 0308 	sub.w	r3, r0, r8
 800c7e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	9304      	str	r3, [sp, #16]
 800c7ec:	46a2      	mov	sl, r4
 800c7ee:	e7d2      	b.n	800c796 <_vfiprintf_r+0xc6>
 800c7f0:	9b03      	ldr	r3, [sp, #12]
 800c7f2:	1d19      	adds	r1, r3, #4
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	9103      	str	r1, [sp, #12]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	bfbb      	ittet	lt
 800c7fc:	425b      	neglt	r3, r3
 800c7fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c802:	9307      	strge	r3, [sp, #28]
 800c804:	9307      	strlt	r3, [sp, #28]
 800c806:	bfb8      	it	lt
 800c808:	9204      	strlt	r2, [sp, #16]
 800c80a:	7823      	ldrb	r3, [r4, #0]
 800c80c:	2b2e      	cmp	r3, #46	; 0x2e
 800c80e:	d10c      	bne.n	800c82a <_vfiprintf_r+0x15a>
 800c810:	7863      	ldrb	r3, [r4, #1]
 800c812:	2b2a      	cmp	r3, #42	; 0x2a
 800c814:	d134      	bne.n	800c880 <_vfiprintf_r+0x1b0>
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	1d1a      	adds	r2, r3, #4
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	9203      	str	r2, [sp, #12]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bfb8      	it	lt
 800c822:	f04f 33ff 	movlt.w	r3, #4294967295
 800c826:	3402      	adds	r4, #2
 800c828:	9305      	str	r3, [sp, #20]
 800c82a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c900 <_vfiprintf_r+0x230>
 800c82e:	7821      	ldrb	r1, [r4, #0]
 800c830:	2203      	movs	r2, #3
 800c832:	4650      	mov	r0, sl
 800c834:	f7f3 fccc 	bl	80001d0 <memchr>
 800c838:	b138      	cbz	r0, 800c84a <_vfiprintf_r+0x17a>
 800c83a:	9b04      	ldr	r3, [sp, #16]
 800c83c:	eba0 000a 	sub.w	r0, r0, sl
 800c840:	2240      	movs	r2, #64	; 0x40
 800c842:	4082      	lsls	r2, r0
 800c844:	4313      	orrs	r3, r2
 800c846:	3401      	adds	r4, #1
 800c848:	9304      	str	r3, [sp, #16]
 800c84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c84e:	4829      	ldr	r0, [pc, #164]	; (800c8f4 <_vfiprintf_r+0x224>)
 800c850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c854:	2206      	movs	r2, #6
 800c856:	f7f3 fcbb 	bl	80001d0 <memchr>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d03f      	beq.n	800c8de <_vfiprintf_r+0x20e>
 800c85e:	4b26      	ldr	r3, [pc, #152]	; (800c8f8 <_vfiprintf_r+0x228>)
 800c860:	bb1b      	cbnz	r3, 800c8aa <_vfiprintf_r+0x1da>
 800c862:	9b03      	ldr	r3, [sp, #12]
 800c864:	3307      	adds	r3, #7
 800c866:	f023 0307 	bic.w	r3, r3, #7
 800c86a:	3308      	adds	r3, #8
 800c86c:	9303      	str	r3, [sp, #12]
 800c86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c870:	443b      	add	r3, r7
 800c872:	9309      	str	r3, [sp, #36]	; 0x24
 800c874:	e768      	b.n	800c748 <_vfiprintf_r+0x78>
 800c876:	fb0c 3202 	mla	r2, ip, r2, r3
 800c87a:	460c      	mov	r4, r1
 800c87c:	2001      	movs	r0, #1
 800c87e:	e7a6      	b.n	800c7ce <_vfiprintf_r+0xfe>
 800c880:	2300      	movs	r3, #0
 800c882:	3401      	adds	r4, #1
 800c884:	9305      	str	r3, [sp, #20]
 800c886:	4619      	mov	r1, r3
 800c888:	f04f 0c0a 	mov.w	ip, #10
 800c88c:	4620      	mov	r0, r4
 800c88e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c892:	3a30      	subs	r2, #48	; 0x30
 800c894:	2a09      	cmp	r2, #9
 800c896:	d903      	bls.n	800c8a0 <_vfiprintf_r+0x1d0>
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0c6      	beq.n	800c82a <_vfiprintf_r+0x15a>
 800c89c:	9105      	str	r1, [sp, #20]
 800c89e:	e7c4      	b.n	800c82a <_vfiprintf_r+0x15a>
 800c8a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e7f0      	b.n	800c88c <_vfiprintf_r+0x1bc>
 800c8aa:	ab03      	add	r3, sp, #12
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	462a      	mov	r2, r5
 800c8b0:	4b12      	ldr	r3, [pc, #72]	; (800c8fc <_vfiprintf_r+0x22c>)
 800c8b2:	a904      	add	r1, sp, #16
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f7fd fb9d 	bl	8009ff4 <_printf_float>
 800c8ba:	4607      	mov	r7, r0
 800c8bc:	1c78      	adds	r0, r7, #1
 800c8be:	d1d6      	bne.n	800c86e <_vfiprintf_r+0x19e>
 800c8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8c2:	07d9      	lsls	r1, r3, #31
 800c8c4:	d405      	bmi.n	800c8d2 <_vfiprintf_r+0x202>
 800c8c6:	89ab      	ldrh	r3, [r5, #12]
 800c8c8:	059a      	lsls	r2, r3, #22
 800c8ca:	d402      	bmi.n	800c8d2 <_vfiprintf_r+0x202>
 800c8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ce:	f7fe f8fb 	bl	800aac8 <__retarget_lock_release_recursive>
 800c8d2:	89ab      	ldrh	r3, [r5, #12]
 800c8d4:	065b      	lsls	r3, r3, #25
 800c8d6:	f53f af1d 	bmi.w	800c714 <_vfiprintf_r+0x44>
 800c8da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8dc:	e71c      	b.n	800c718 <_vfiprintf_r+0x48>
 800c8de:	ab03      	add	r3, sp, #12
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	462a      	mov	r2, r5
 800c8e4:	4b05      	ldr	r3, [pc, #20]	; (800c8fc <_vfiprintf_r+0x22c>)
 800c8e6:	a904      	add	r1, sp, #16
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7fd fe27 	bl	800a53c <_printf_i>
 800c8ee:	e7e4      	b.n	800c8ba <_vfiprintf_r+0x1ea>
 800c8f0:	0800ce8c 	.word	0x0800ce8c
 800c8f4:	0800ce96 	.word	0x0800ce96
 800c8f8:	08009ff5 	.word	0x08009ff5
 800c8fc:	0800c6ad 	.word	0x0800c6ad
 800c900:	0800ce92 	.word	0x0800ce92

0800c904 <__swbuf_r>:
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c906:	460e      	mov	r6, r1
 800c908:	4614      	mov	r4, r2
 800c90a:	4605      	mov	r5, r0
 800c90c:	b118      	cbz	r0, 800c916 <__swbuf_r+0x12>
 800c90e:	6a03      	ldr	r3, [r0, #32]
 800c910:	b90b      	cbnz	r3, 800c916 <__swbuf_r+0x12>
 800c912:	f7fd ffc1 	bl	800a898 <__sinit>
 800c916:	69a3      	ldr	r3, [r4, #24]
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	071a      	lsls	r2, r3, #28
 800c91e:	d525      	bpl.n	800c96c <__swbuf_r+0x68>
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	b31b      	cbz	r3, 800c96c <__swbuf_r+0x68>
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	6922      	ldr	r2, [r4, #16]
 800c928:	1a98      	subs	r0, r3, r2
 800c92a:	6963      	ldr	r3, [r4, #20]
 800c92c:	b2f6      	uxtb	r6, r6
 800c92e:	4283      	cmp	r3, r0
 800c930:	4637      	mov	r7, r6
 800c932:	dc04      	bgt.n	800c93e <__swbuf_r+0x3a>
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f7ff fd9e 	bl	800c478 <_fflush_r>
 800c93c:	b9e0      	cbnz	r0, 800c978 <__swbuf_r+0x74>
 800c93e:	68a3      	ldr	r3, [r4, #8]
 800c940:	3b01      	subs	r3, #1
 800c942:	60a3      	str	r3, [r4, #8]
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	6022      	str	r2, [r4, #0]
 800c94a:	701e      	strb	r6, [r3, #0]
 800c94c:	6962      	ldr	r2, [r4, #20]
 800c94e:	1c43      	adds	r3, r0, #1
 800c950:	429a      	cmp	r2, r3
 800c952:	d004      	beq.n	800c95e <__swbuf_r+0x5a>
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	07db      	lsls	r3, r3, #31
 800c958:	d506      	bpl.n	800c968 <__swbuf_r+0x64>
 800c95a:	2e0a      	cmp	r6, #10
 800c95c:	d104      	bne.n	800c968 <__swbuf_r+0x64>
 800c95e:	4621      	mov	r1, r4
 800c960:	4628      	mov	r0, r5
 800c962:	f7ff fd89 	bl	800c478 <_fflush_r>
 800c966:	b938      	cbnz	r0, 800c978 <__swbuf_r+0x74>
 800c968:	4638      	mov	r0, r7
 800c96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c96c:	4621      	mov	r1, r4
 800c96e:	4628      	mov	r0, r5
 800c970:	f000 f806 	bl	800c980 <__swsetup_r>
 800c974:	2800      	cmp	r0, #0
 800c976:	d0d5      	beq.n	800c924 <__swbuf_r+0x20>
 800c978:	f04f 37ff 	mov.w	r7, #4294967295
 800c97c:	e7f4      	b.n	800c968 <__swbuf_r+0x64>
	...

0800c980 <__swsetup_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4b2a      	ldr	r3, [pc, #168]	; (800ca2c <__swsetup_r+0xac>)
 800c984:	4605      	mov	r5, r0
 800c986:	6818      	ldr	r0, [r3, #0]
 800c988:	460c      	mov	r4, r1
 800c98a:	b118      	cbz	r0, 800c994 <__swsetup_r+0x14>
 800c98c:	6a03      	ldr	r3, [r0, #32]
 800c98e:	b90b      	cbnz	r3, 800c994 <__swsetup_r+0x14>
 800c990:	f7fd ff82 	bl	800a898 <__sinit>
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c99a:	0718      	lsls	r0, r3, #28
 800c99c:	d422      	bmi.n	800c9e4 <__swsetup_r+0x64>
 800c99e:	06d9      	lsls	r1, r3, #27
 800c9a0:	d407      	bmi.n	800c9b2 <__swsetup_r+0x32>
 800c9a2:	2309      	movs	r3, #9
 800c9a4:	602b      	str	r3, [r5, #0]
 800c9a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9aa:	81a3      	strh	r3, [r4, #12]
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	e034      	b.n	800ca1c <__swsetup_r+0x9c>
 800c9b2:	0758      	lsls	r0, r3, #29
 800c9b4:	d512      	bpl.n	800c9dc <__swsetup_r+0x5c>
 800c9b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9b8:	b141      	cbz	r1, 800c9cc <__swsetup_r+0x4c>
 800c9ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9be:	4299      	cmp	r1, r3
 800c9c0:	d002      	beq.n	800c9c8 <__swsetup_r+0x48>
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f7fe fefe 	bl	800b7c4 <_free_r>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	6363      	str	r3, [r4, #52]	; 0x34
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9d2:	81a3      	strh	r3, [r4, #12]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	6063      	str	r3, [r4, #4]
 800c9d8:	6923      	ldr	r3, [r4, #16]
 800c9da:	6023      	str	r3, [r4, #0]
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	f043 0308 	orr.w	r3, r3, #8
 800c9e2:	81a3      	strh	r3, [r4, #12]
 800c9e4:	6923      	ldr	r3, [r4, #16]
 800c9e6:	b94b      	cbnz	r3, 800c9fc <__swsetup_r+0x7c>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9f2:	d003      	beq.n	800c9fc <__swsetup_r+0x7c>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	f000 f884 	bl	800cb04 <__smakebuf_r>
 800c9fc:	89a0      	ldrh	r0, [r4, #12]
 800c9fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca02:	f010 0301 	ands.w	r3, r0, #1
 800ca06:	d00a      	beq.n	800ca1e <__swsetup_r+0x9e>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	60a3      	str	r3, [r4, #8]
 800ca0c:	6963      	ldr	r3, [r4, #20]
 800ca0e:	425b      	negs	r3, r3
 800ca10:	61a3      	str	r3, [r4, #24]
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	b943      	cbnz	r3, 800ca28 <__swsetup_r+0xa8>
 800ca16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca1a:	d1c4      	bne.n	800c9a6 <__swsetup_r+0x26>
 800ca1c:	bd38      	pop	{r3, r4, r5, pc}
 800ca1e:	0781      	lsls	r1, r0, #30
 800ca20:	bf58      	it	pl
 800ca22:	6963      	ldrpl	r3, [r4, #20]
 800ca24:	60a3      	str	r3, [r4, #8]
 800ca26:	e7f4      	b.n	800ca12 <__swsetup_r+0x92>
 800ca28:	2000      	movs	r0, #0
 800ca2a:	e7f7      	b.n	800ca1c <__swsetup_r+0x9c>
 800ca2c:	200001d4 	.word	0x200001d4

0800ca30 <_raise_r>:
 800ca30:	291f      	cmp	r1, #31
 800ca32:	b538      	push	{r3, r4, r5, lr}
 800ca34:	4604      	mov	r4, r0
 800ca36:	460d      	mov	r5, r1
 800ca38:	d904      	bls.n	800ca44 <_raise_r+0x14>
 800ca3a:	2316      	movs	r3, #22
 800ca3c:	6003      	str	r3, [r0, #0]
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca42:	bd38      	pop	{r3, r4, r5, pc}
 800ca44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca46:	b112      	cbz	r2, 800ca4e <_raise_r+0x1e>
 800ca48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca4c:	b94b      	cbnz	r3, 800ca62 <_raise_r+0x32>
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 f830 	bl	800cab4 <_getpid_r>
 800ca54:	462a      	mov	r2, r5
 800ca56:	4601      	mov	r1, r0
 800ca58:	4620      	mov	r0, r4
 800ca5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca5e:	f000 b817 	b.w	800ca90 <_kill_r>
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d00a      	beq.n	800ca7c <_raise_r+0x4c>
 800ca66:	1c59      	adds	r1, r3, #1
 800ca68:	d103      	bne.n	800ca72 <_raise_r+0x42>
 800ca6a:	2316      	movs	r3, #22
 800ca6c:	6003      	str	r3, [r0, #0]
 800ca6e:	2001      	movs	r0, #1
 800ca70:	e7e7      	b.n	800ca42 <_raise_r+0x12>
 800ca72:	2400      	movs	r4, #0
 800ca74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca78:	4628      	mov	r0, r5
 800ca7a:	4798      	blx	r3
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e7e0      	b.n	800ca42 <_raise_r+0x12>

0800ca80 <raise>:
 800ca80:	4b02      	ldr	r3, [pc, #8]	; (800ca8c <raise+0xc>)
 800ca82:	4601      	mov	r1, r0
 800ca84:	6818      	ldr	r0, [r3, #0]
 800ca86:	f7ff bfd3 	b.w	800ca30 <_raise_r>
 800ca8a:	bf00      	nop
 800ca8c:	200001d4 	.word	0x200001d4

0800ca90 <_kill_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d07      	ldr	r5, [pc, #28]	; (800cab0 <_kill_r+0x20>)
 800ca94:	2300      	movs	r3, #0
 800ca96:	4604      	mov	r4, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	602b      	str	r3, [r5, #0]
 800ca9e:	f7f4 fccd 	bl	800143c <_kill>
 800caa2:	1c43      	adds	r3, r0, #1
 800caa4:	d102      	bne.n	800caac <_kill_r+0x1c>
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	b103      	cbz	r3, 800caac <_kill_r+0x1c>
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	bd38      	pop	{r3, r4, r5, pc}
 800caae:	bf00      	nop
 800cab0:	20001764 	.word	0x20001764

0800cab4 <_getpid_r>:
 800cab4:	f7f4 bcba 	b.w	800142c <_getpid>

0800cab8 <__swhatbuf_r>:
 800cab8:	b570      	push	{r4, r5, r6, lr}
 800caba:	460c      	mov	r4, r1
 800cabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac0:	2900      	cmp	r1, #0
 800cac2:	b096      	sub	sp, #88	; 0x58
 800cac4:	4615      	mov	r5, r2
 800cac6:	461e      	mov	r6, r3
 800cac8:	da0d      	bge.n	800cae6 <__swhatbuf_r+0x2e>
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cad0:	f04f 0100 	mov.w	r1, #0
 800cad4:	bf0c      	ite	eq
 800cad6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cada:	2340      	movne	r3, #64	; 0x40
 800cadc:	2000      	movs	r0, #0
 800cade:	6031      	str	r1, [r6, #0]
 800cae0:	602b      	str	r3, [r5, #0]
 800cae2:	b016      	add	sp, #88	; 0x58
 800cae4:	bd70      	pop	{r4, r5, r6, pc}
 800cae6:	466a      	mov	r2, sp
 800cae8:	f000 f848 	bl	800cb7c <_fstat_r>
 800caec:	2800      	cmp	r0, #0
 800caee:	dbec      	blt.n	800caca <__swhatbuf_r+0x12>
 800caf0:	9901      	ldr	r1, [sp, #4]
 800caf2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800caf6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cafa:	4259      	negs	r1, r3
 800cafc:	4159      	adcs	r1, r3
 800cafe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb02:	e7eb      	b.n	800cadc <__swhatbuf_r+0x24>

0800cb04 <__smakebuf_r>:
 800cb04:	898b      	ldrh	r3, [r1, #12]
 800cb06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb08:	079d      	lsls	r5, r3, #30
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	d507      	bpl.n	800cb20 <__smakebuf_r+0x1c>
 800cb10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	6123      	str	r3, [r4, #16]
 800cb18:	2301      	movs	r3, #1
 800cb1a:	6163      	str	r3, [r4, #20]
 800cb1c:	b002      	add	sp, #8
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}
 800cb20:	ab01      	add	r3, sp, #4
 800cb22:	466a      	mov	r2, sp
 800cb24:	f7ff ffc8 	bl	800cab8 <__swhatbuf_r>
 800cb28:	9900      	ldr	r1, [sp, #0]
 800cb2a:	4605      	mov	r5, r0
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f7fe febd 	bl	800b8ac <_malloc_r>
 800cb32:	b948      	cbnz	r0, 800cb48 <__smakebuf_r+0x44>
 800cb34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb38:	059a      	lsls	r2, r3, #22
 800cb3a:	d4ef      	bmi.n	800cb1c <__smakebuf_r+0x18>
 800cb3c:	f023 0303 	bic.w	r3, r3, #3
 800cb40:	f043 0302 	orr.w	r3, r3, #2
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	e7e3      	b.n	800cb10 <__smakebuf_r+0xc>
 800cb48:	89a3      	ldrh	r3, [r4, #12]
 800cb4a:	6020      	str	r0, [r4, #0]
 800cb4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb50:	81a3      	strh	r3, [r4, #12]
 800cb52:	9b00      	ldr	r3, [sp, #0]
 800cb54:	6163      	str	r3, [r4, #20]
 800cb56:	9b01      	ldr	r3, [sp, #4]
 800cb58:	6120      	str	r0, [r4, #16]
 800cb5a:	b15b      	cbz	r3, 800cb74 <__smakebuf_r+0x70>
 800cb5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb60:	4630      	mov	r0, r6
 800cb62:	f000 f81d 	bl	800cba0 <_isatty_r>
 800cb66:	b128      	cbz	r0, 800cb74 <__smakebuf_r+0x70>
 800cb68:	89a3      	ldrh	r3, [r4, #12]
 800cb6a:	f023 0303 	bic.w	r3, r3, #3
 800cb6e:	f043 0301 	orr.w	r3, r3, #1
 800cb72:	81a3      	strh	r3, [r4, #12]
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	431d      	orrs	r5, r3
 800cb78:	81a5      	strh	r5, [r4, #12]
 800cb7a:	e7cf      	b.n	800cb1c <__smakebuf_r+0x18>

0800cb7c <_fstat_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	4d07      	ldr	r5, [pc, #28]	; (800cb9c <_fstat_r+0x20>)
 800cb80:	2300      	movs	r3, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	4608      	mov	r0, r1
 800cb86:	4611      	mov	r1, r2
 800cb88:	602b      	str	r3, [r5, #0]
 800cb8a:	f7f4 fcb6 	bl	80014fa <_fstat>
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	d102      	bne.n	800cb98 <_fstat_r+0x1c>
 800cb92:	682b      	ldr	r3, [r5, #0]
 800cb94:	b103      	cbz	r3, 800cb98 <_fstat_r+0x1c>
 800cb96:	6023      	str	r3, [r4, #0]
 800cb98:	bd38      	pop	{r3, r4, r5, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20001764 	.word	0x20001764

0800cba0 <_isatty_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4d06      	ldr	r5, [pc, #24]	; (800cbbc <_isatty_r+0x1c>)
 800cba4:	2300      	movs	r3, #0
 800cba6:	4604      	mov	r4, r0
 800cba8:	4608      	mov	r0, r1
 800cbaa:	602b      	str	r3, [r5, #0]
 800cbac:	f7f4 fcb5 	bl	800151a <_isatty>
 800cbb0:	1c43      	adds	r3, r0, #1
 800cbb2:	d102      	bne.n	800cbba <_isatty_r+0x1a>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	b103      	cbz	r3, 800cbba <_isatty_r+0x1a>
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	bd38      	pop	{r3, r4, r5, pc}
 800cbbc:	20001764 	.word	0x20001764

0800cbc0 <_init>:
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc2:	bf00      	nop
 800cbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc6:	bc08      	pop	{r3}
 800cbc8:	469e      	mov	lr, r3
 800cbca:	4770      	bx	lr

0800cbcc <_fini>:
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	bf00      	nop
 800cbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd2:	bc08      	pop	{r3}
 800cbd4:	469e      	mov	lr, r3
 800cbd6:	4770      	bx	lr
